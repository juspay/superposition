{
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Create Experiment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "function create_default_config_keys() {",
              "    let keys = [",
              "        `pmTestKey1`,",
              "        `pmTestKey2`",
              "    ];",
              "",
              "    for (const key of keys) {",
              "        const options = {",
              "            'method': 'POST',",
              "            'url': `${host}/default-config`,",
              "            \"header\": {",
              "                'Authorization': `Bearer ${token}`,",
              "                'x-tenant': 'test',",
              "                'Content-Type': 'application/json',",
              "                'x-org-id': `${org_id}`",
              "            },",
              "            \"body\": {",
              "                \"mode\": \"raw\",",
              "                \"raw\": JSON.stringify({ ",
              "                    \"key\": key,",
              "                    \"value\": \"value1\",",
              "                    \"schema\": {",
              "                        \"type\": \"string\",",
              "                        \"pattern\": \".*\"",
              "                    }, ",
              "                    \"description\": \"description\",",
              "                    \"change_reason\": \"change_reason\"",
              "                })",
              "            }",
              "        };",
              "        console.log(options);",
              "        pm.sendRequest(options, function (error, response) {",
              "            if (error) {",
              "                console.log(`Error creating default-config key: ${key}`);",
              "                console.log(error);",
              "                return;",
              "            };",
              "            console.log(`Created default-config key: ${key}`);",
              "        });",
              "    }",
              "}",
              "",
              "function create_dimensions(dimension) {",
              "",
              "        const options = {",
              "            'method': 'POST',",
              "            'url': `${host}/dimension`,",
              "            'header': {",
              "                'Authorization': `Bearer ${token}`,",
              "                'x-tenant': 'test',",
              "                'Content-Type': 'application/json'",
              "            },",
              "            \"body\": {",
              "                \"mode\": \"raw\",",
              "                \"raw\": JSON.stringify({",
              "                    \"dimension\": dimension.name,",
              "                    \"position\": dimension.position,",
              "                    \"schema\": dimension.schema, ",
              "                    \"description\": dimension.description,",
              "                    \"change_reason\": dimension.change_reason",
              "                })",
              "            }",
              "        };",
              "        ",
              "            pm.sendRequest(options, function (error, response) {",
              "                if (error) {",
              "                    console.log(`Error creating dimension: ${dimension.name}`);",
              "                    console.log(error);",
              "                    return;",
              "                }",
              "                console.log(`Created dimension: ${dimension.name}`);",
              "            }).await;",
              "}",
              "",
              "create_default_config_keys();",
              "",
              "const dimensions = [",
              "    {name: \"os\", position: 1, schema: { type: \"string\", enum: [\"android\", \"ios\", \"web\"] } , description: \"description\", change_reason: \"change_reason\"},",
              "    {name: \"client\", position: 2, schema: { type: \"string\", pattern: \".*\" }, description: \"description\", change_reason: \"change_reason\"}",
              "];",
              "create_dimensions(dimensions[0]);",
              "setTimeout(() => {",
              "    create_dimensions(dimensions[1]);",
              "}, 2000);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "",
              "function fetch_context_n_test(context_id, expected_override_id, expected_override, expected_variant_context) {",
              "    const getRequest = {",
              "        url: `${host}/context/${context_id}`,",
              "        method: 'GET',",
              "        header: {",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "            'x-org-id': `${org_id}`",
              "        }",
              "    };",
              "",
              "",
              "    pm.sendRequest(getRequest, (error, response) => {",
              "        if(error) {",
              "            console.log(\"Failed to fetch context\");",
              "            throw error;",
              "        }",
              "",
              "        const context = response.json();",
              "",
              "        /*********** checking contexts created in CAC **********/;",
              "",
              "",
              "        const variant_override_id = context.override_id;",
              "        const varaint_context = context.value;",
              "        const variant_override = context.override;",
              "",
              "        console.log(\"Testing variant override id\");",
              "        console.log(\"Override from CAC: \\n\", variant_override_id);",
              "        console.log(\"Expected Context: \\n\", expected_override_id);",
              "        pm.expect(variant_override_id).to.be.eq(expected_override_id);",
              "",
              "        console.log(\"Testing variant override\");",
              "        console.log(\"Override from CAC: \\n\", JSON.stringify(variant_override, null, 2));",
              "        console.log(\"Expected Context: \\n\", JSON.stringify(expected_override, null, 2));",
              "        pm.expect(JSON.stringify(variant_override)).to.be.eq(JSON.stringify(expected_override));",
              "",
              "        console.log(\"Testing variant context\");",
              "        console.log(\"Context from CAC: \\n\", JSON.stringify(varaint_context, null, 2));",
              "        console.log(\"Expected Context: \\n\", JSON.stringify(expected_variant_context, null, 2));",
              "        pm.expect(JSON.stringify(varaint_context)).to.be.eq(JSON.stringify(expected_variant_context));",
              "    });",
              "}",
              "",
              "function fetch_experiment_n_test(experiment_id, expected_context, expected_varaints, expected_variant_contexts) {",
              "    const options = {",
              "        'method': 'GET',",
              "        'url': `${host}/experiments/${experiment_id}`,",
              "        \"header\": {",
              "            'Authorization': `Bearer ${token}`,",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "        }",
              "    };",
              "",
              "    pm.sendRequest(options, function(error, response) {",
              "        if(error) {",
              "            console.log(\"Failed to fetch experiment\");",
              "            throw error;",
              "        }",
              "",
              "        const experiment = response.json();",
              "",
              "        const context = experiment.context;",
              "        console.log(\"Testing Context of Experiment\");",
              "        console.log(`Expected: ${JSON.stringify(expected_context, null, 2)}`);",
              "        console.log(`Actual: ${JSON.stringify(context, null, 2)}`);",
              "        pm.expect(JSON.stringify(context)).to.be.eq(JSON.stringify(expected_context));",
              "",
              "        const variants = experiment.variants;",
              "        for(const variant of variants) {",
              "            const variant_id = variant.id;",
              "",
              "            console.log(`TESTING variant: ${variant_id}`);",
              "",
              "            // check if the variant present in the expected_variants",
              "            const variant_cpy = JSON.parse(JSON.stringify(variant));",
              "            delete variant_cpy.override_id;",
              "            delete variant_cpy.context_id;",
              "",
              "            const expected_variant = expected_varaints.find((ev) => ev.id === variant_id);",
              "            console.log(\"Actual Variant:\", JSON.stringify(variant_cpy, null, 4));",
              "            console.log(\"Expected Variant:\", JSON.stringify(expected_variant, null, 4));",
              "            pm.expect(JSON.stringify(variant_cpy)).to.be.eq(JSON.stringify(expected_variant));",
              "",
              "            /*********/",
              "",
              "            const expected_context_id = variant.context_id;",
              "            const expected_override_id = variant.override_id;",
              "            const expected_override = variant.overrides;",
              "            const expected_variant_context = expected_variant_contexts.find(evc => evc.vid === variant_id)?.context;",
              "",
              "            fetch_context_n_test(expected_context_id, expected_override_id, expected_override, expected_variant_context);",
              "        }",
              "    });",
              "}",
              "",
              "// check experiment creation in experiment",
              "pm.test(\"200 OK\", function () {",
              "    const response = pm.response.json();",
              "    const experiment_id = response.experiment_id;",
              "",
              "    pm.environment.set(\"experiment_id\", experiment_id);",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// check for contexts in CAC",
              "pm.test(\"Test created contexts\", function() {",
              "    const response = pm.response.json();",
              "    const experiment_id = response.experiment_id;",
              "",
              "",
              "    const expected_context = {",
              "      \"and\": [",
              "        {",
              "          \"==\": [",
              "            {",
              "              \"var\": \"os\"",
              "            },",
              "            \"ios\"",
              "          ]",
              "        },",
              "        {",
              "          \"==\": [",
              "            {",
              "              \"var\": \"client\"",
              "            },",
              "            \"testClientCac1\"",
              "          ]",
              "        }",
              "      ]",
              "    };",
              "    const expected_varaints = [",
              "        {",
              "            \"id\": `${experiment_id}-control`,",
              "            \"overrides\": {",
              "                \"pmTestKey1\": \"value1-control\",",
              "                \"pmTestKey2\": \"value1-control\"",
              "            },",
              "            \"variant_type\": \"CONTROL\", ",
              "            \"description\": \"description\",",
              "            \"change_reason\": \"change_reason\"",
              "        },",
              "        {",
              "            \"id\": `${experiment_id}-test1`,",
              "            \"overrides\": {",
              "                \"pmTestKey1\": \"value2-test\",",
              "                \"pmTestKey2\": \"value2-test\"",
              "            },",
              "            \"variant_type\": \"EXPERIMENTAL\",",
              "            \"description\": \"description\",",
              "            \"change_reason\": \"change_reason\"",
              "        }",
              "    ];",
              "    const expected_variant_contexts = [",
              "        {",
              "            \"vid\": `${experiment_id}-control`,",
              "            \"context\": {",
              "                \"and\": [",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"os\"",
              "                            },",
              "                            \"ios\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"client\"",
              "                            },",
              "                            \"testClientCac1\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"in\": [",
              "                            `${experiment_id}-control`,",
              "                            {",
              "                                \"var\": \"variantIds\"",
              "                            }",
              "                        ]",
              "                    }",
              "                ], ",
              "                \"description\": \"description\",",
              "                \"change_reason\": \"change_reason\"",
              "            }",
              "        },",
              "        {",
              "            \"vid\": `${experiment_id}-test1`,",
              "            \"context\": {",
              "                \"and\": [",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"os\"",
              "                            },",
              "                            \"ios\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"client\"",
              "                            },",
              "                            \"testClientCac1\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"in\": [",
              "                            `${experiment_id}-test1`,",
              "                            {",
              "                                \"var\": \"variantIds\"",
              "                            }",
              "                        ]",
              "                    }",
              "                ], ",
              "                \"description\": \"description\",",
              "                \"change_reason\": \"change_reason\"",
              "            }",
              "        }",
              "    ];",
              "",
              "    fetch_experiment_n_test(experiment_id, expected_context, expected_varaints, expected_variant_contexts);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "default"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "body": {
          "mode": "raw",
          "options": {
            "raw": {
              "language": "json"
            }
          },
          "raw": "{\"name\":\"experiment-1\",\"override_keys\":[\"pmTestKey1\",\"pmTestKey2\"],\"traffic_percentage\":10,\"context\":{\"and\":[{\"==\":[{\"var\":\"os\"},\"ios\"]},{\"==\":[{\"var\":\"client\"},\"testClientCac1\"]}]},\"variants\":[{\"id\":\"control\",\"variant_type\":\"CONTROL\",\"overrides\":{\"pmTestKey1\":\"value1-control\",\"pmTestKey2\":\"value1-control\"}},{\"id\":\"test1\",\"variant_type\":\"EXPERIMENTAL\",\"overrides\":{\"pmTestKey1\":\"value2-test\",\"pmTestKey2\":\"value2-test\"}}],\"description\":\"description\",\"change_reason\":\"change_reason\"}"
        },
        "url": {
          "raw": "{{host}}/experiments",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Experiment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"200 OK\", function() {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "url": {
          "raw": "{{host}}/experiments/{{experiment_id}}",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments",
            "{{experiment_id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Ramp",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "function fetch_experiment_n_test(experiment_id, expected_traffic_percentage) {",
              "    const options = {",
              "        'method': 'GET',",
              "        'url': `${host}/experiments/${experiment_id}`,",
              "        \"header\": {",
              "            'Authorization': `Bearer ${token}`,",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "            'x-org-id': `${org_id}`",
              "        }",
              "    };",
              "",
              "    pm.sendRequest(options, function(error, response) {",
              "        if(error) {",
              "            console.log(\"Failed to fetch experiment\");",
              "            throw error;",
              "        }",
              "",
              "        const experiment = response.json();",
              "        console.log(`Expected: ${expected_traffic_percentage}, Actual: ${experiment.traffic_percentage}`);",
              "        pm.expect(experiment.traffic_percentage).to.be.eq(expected_traffic_percentage);",
              "    });",
              "}",
              "",
              "// check experiment creation in experiment",
              "pm.test(\"200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// check for contexts in CAC",
              "pm.test(\"Test traffic percentage\", function() {",
              "    const experiment_id = pm.environment.get(\"experiment_id\");",
              "",
              "    fetch_experiment_n_test(experiment_id, 46);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "default"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "default"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "body": {
          "mode": "raw",
          "options": {
            "raw": {
              "language": "json"
            }
          },
          "raw": "{\"traffic_percentage\":46,\"description\":\"description\",\"change_reason\":\"change_reason\"}"
        },
        "url": {
          "raw": "{{host}}/experiments/{{experiment_id}}/ramp",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments",
            "{{experiment_id}}",
            "ramp"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Conclude",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "const experiment_id = pm.environment.get(\"experiment_id\");",
              "",
              "function fetch_config_n_test(variants, winner_variant_id) {",
              "    const options = {",
              "        'method': 'GET',",
              "        'url': `${host}/config`,",
              "        'header': {",
              "            'Authorization': `Bearer ${token}`,",
              "            'Contet-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "            'x-org-id': `${org_id}`",
              "        }",
              "    };",
              "",
              "    pm.sendRequest(options, function(error, response) {",
              "        if(error) {",
              "            console.log(\"Failed to fetch config\");",
              "            throw error;",
              "        }",
              "",
              "        const config = response.json();",
              "        const contexts = config.contexts;",
              "        const overrides = config.overrides;",
              "",
              "        const winner_variant = variants.find(variant => variant.id === winner_variant_id);",
              "        const winner_variant_override_id = winner_variant.override_id;",
              "",
              "        // there should be only one context with the winner variant override id",
              "        const contexts_with_winner_variant_override = contexts.filter((context) => context.override_with_keys.includes(winner_variant_override_id));",
              "        console.log(\"Context with winner variant override\");",
              "        console.log(JSON.stringify(contexts_with_winner_variant_override, null, 4));",
              "        pm.expect(contexts_with_winner_variant_override.length).to.be.eq(1);",
              "",
              "        // there should be 0 contexts with variant as a dimension",
              "        const contexts_with_variant_dim = contexts",
              "            .filter(",
              "                (context) =>",
              "                    context.condition.and",
              "                        ?.map(",
              "                            (condition) =>",
              "                                Object.keys(condition)",
              "                                    .map((k) => condition[k][0].var === \"variant\")",
              "                                    .reduce((p, c) => p || c, false))",
              "                        .reduce((p, c) => p || c, false)",
              "            );",
              "        pm.expect(contexts_with_variant_dim.length).to.be.eq(0);",
              "",
              "        // checking if winner override exists and is same as the expected override",
              "        const winner_variant_context = contexts_with_winner_variant_override[0];",
              "        pm.expect(winner_variant_context.override_with_keys.length).to.be.eq(1);",
              "        pm.expect(JSON.stringify(winner_variant_context.override_with_keys[0])).to.be.eq(JSON.stringify(winner_variant_override_id));",
              "",
              "        // checking if all the discarded overrides are removed",
              "        const discarded_variants = variants.filter(variant => variant.id !== winner_variant_id);",
              "        const discarded_variants_override_ids = discarded_variants.map(dv => dv.override_id);",
              "        const available_overrides = Object.keys(overrides);",
              "        for(const ao of available_overrides) {",
              "            pm.expect(discarded_variants_override_ids).to.not.include(ao);",
              "        }",
              "    });",
              "}",
              "",
              "function fetch_experiment_n_test(experiment_id, winner_variant_id, expected_status) {",
              "    const options = {",
              "        'method': 'GET',",
              "        'url': `${host}/experiments/${experiment_id}`,",
              "        \"header\": {",
              "            'Authorization': `Bearer ${token}`,",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "        }",
              "    };",
              "",
              "    pm.sendRequest(options, function(error, response) {",
              "        if(error) {",
              "            console.log(\"Failed to fetch experiment\");",
              "            throw error;",
              "        }",
              "",
              "        const experiment = response.json();",
              "",
              "        const status = experiment.status;",
              "        pm.expect(status).to.be.eq(expected_status);",
              "",
              "        const variants = experiment.variants;",
              "        fetch_config_n_test(variants, winner_variant_id);",
              "    });",
              "}",
              "",
              "pm.test(\"200 OK\", function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Conclude correctness\", function() {",
              "    const winner_variant_id = `${experiment_id}-control`;",
              "    fetch_experiment_n_test(experiment_id, winner_variant_id, \"CONCLUDED\")",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "text"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "body": {
          "mode": "raw",
          "options": {
            "raw": {
              "language": "json"
            }
          },
          "raw": "{\"chosen_variant\":\"{{experiment_id}}-control\",\"description\":\"description\",\"change_reason\":\"change_reason\"}"
        },
        "url": {
          "raw": "{{host}}/experiments/{{experiment_id}}/conclude",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments",
            "{{experiment_id}}",
            "conclude"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create Experiment 2",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "function create_default_config_keys() {",
              "    let keys = [",
              "        `pmTestKey4`,",
              "        `pmTestKey3`",
              "    ];",
              "",
              "    for (const key of keys) {",
              "        const options = {",
              "            'method': 'POST',",
              "            'url': `${host}/default-config`,",
              "            \"header\": {",
              "                'Authorization': `Bearer ${token}`,",
              "                'x-tenant': 'test',",
              "                'Content-Type': 'application/json',",
              "                'x-org-id': `${org_id}`",
              "            },",
              "            \"body\": {",
              "                \"mode\": \"raw\",",
              "                \"raw\": JSON.stringify({ ",
              "                    \"key\": key,",
              "                    \"value\": \"value1\",",
              "                    \"schema\": {",
              "                        \"type\": \"string\",",
              "                        \"pattern\": \".*\"",
              "                    }, ",
              "                    \"description\": \"description\",",
              "                    \"change_reason\": \"change_reason\"",
              "                })",
              "            }",
              "        };",
              "        console.log(options);",
              "        pm.sendRequest(options, function (error, response) {",
              "            if (error) {",
              "                console.log(`Error creating default-config key: ${key}`);",
              "                console.log(error);",
              "                return;",
              "            };",
              "            console.log(`Created default-config key: ${key}`);",
              "        });",
              "    }",
              "}",
              "",
              "create_default_config_keys();"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "",
              "function fetch_context_n_test(context_id, expected_override_id, expected_override, expected_variant_context) {",
              "    const getRequest = {",
              "        url: `${host}/context/${context_id}`,",
              "        method: 'GET',",
              "        header: {",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "            'x-org-id': `${org_id}`",
              "        }",
              "    };",
              "",
              "",
              "    pm.sendRequest(getRequest, (error, response) => {",
              "        if(error) {",
              "            console.log(\"Failed to fetch context\");",
              "            throw error;",
              "        }",
              "",
              "        const context = response.json();",
              "",
              "        /*********** checking contexts created in CAC **********/;",
              "",
              "",
              "        const variant_override_id = context.override_id;",
              "        const varaint_context = context.value;",
              "        const variant_override = context.override;",
              "",
              "        console.log(\"Testing variant override id\");",
              "        console.log(\"Override from CAC: \\n\", variant_override_id);",
              "        console.log(\"Expected Context: \\n\", expected_override_id);",
              "        pm.expect(variant_override_id).to.be.eq(expected_override_id);",
              "",
              "        console.log(\"Testing variant override\");",
              "        console.log(\"Override from CAC: \\n\", JSON.stringify(variant_override, null, 2));",
              "        console.log(\"Expected Context: \\n\", JSON.stringify(expected_override, null, 2));",
              "        pm.expect(JSON.stringify(variant_override)).to.be.eq(JSON.stringify(expected_override));",
              "",
              "        console.log(\"Testing variant context\");",
              "        console.log(\"Context from CAC: \\n\", JSON.stringify(varaint_context, null, 2));",
              "        console.log(\"Expected Context: \\n\", JSON.stringify(expected_variant_context, null, 2));",
              "        pm.expect(JSON.stringify(varaint_context)).to.be.eq(JSON.stringify(expected_variant_context));",
              "    });",
              "}",
              "",
              "function fetch_experiment_n_test(experiment_id, expected_context, expected_varaints, expected_variant_contexts) {",
              "    const options = {",
              "        'method': 'GET',",
              "        'url': `${host}/experiments/${experiment_id}`,",
              "        \"header\": {",
              "            'Authorization': `Bearer ${token}`,",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "        }",
              "    };",
              "",
              "    pm.sendRequest(options, function(error, response) {",
              "        if(error) {",
              "            console.log(\"Failed to fetch experiment\");",
              "            throw error;",
              "        }",
              "",
              "        const experiment = response.json();",
              "",
              "        const context = experiment.context;",
              "        console.log(\"Testing Context of Experiment\");",
              "        console.log(`Expected: ${JSON.stringify(expected_context, null, 2)}`);",
              "        console.log(`Actual: ${JSON.stringify(context, null, 2)}`);",
              "        pm.expect(JSON.stringify(context)).to.be.eq(JSON.stringify(expected_context));",
              "",
              "        const variants = experiment.variants;",
              "        for(const variant of variants) {",
              "            const variant_id = variant.id;",
              "",
              "            console.log(`TESTING variant: ${variant_id}`);",
              "",
              "            // check if the variant present in the expected_variants",
              "            const variant_cpy = JSON.parse(JSON.stringify(variant));",
              "            delete variant_cpy.override_id;",
              "            delete variant_cpy.context_id;",
              "",
              "            const expected_variant = expected_varaints.find((ev) => ev.id === variant_id);",
              "            console.log(\"Actual Variant:\", JSON.stringify(variant_cpy, null, 4));",
              "            console.log(\"Expected Variant:\", JSON.stringify(expected_variant, null, 4));",
              "            pm.expect(JSON.stringify(variant_cpy)).to.be.eq(JSON.stringify(expected_variant));",
              "",
              "            /*********/",
              "",
              "            const expected_context_id = variant.context_id;",
              "            const expected_override_id = variant.override_id;",
              "            const expected_override = variant.overrides;",
              "            const expected_variant_context = expected_variant_contexts.find(evc => evc.vid === variant_id)?.context;",
              "",
              "            fetch_context_n_test(expected_context_id, expected_override_id, expected_override, expected_variant_context);",
              "        }",
              "    });",
              "}",
              "",
              "// check experiment creation in experiment",
              "pm.test(\"200 OK\", function () {",
              "    const response = pm.response.json();",
              "    const experiment_id = response.experiment_id;",
              "",
              "    pm.environment.set(\"experiment_id\", experiment_id);",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// check for contexts in CAC",
              "pm.test(\"Test created contexts\", function() {",
              "    const response = pm.response.json();",
              "    const experiment_id = response.experiment_id;",
              "",
              "",
              "    const expected_context = {",
              "      \"and\": [",
              "        {",
              "          \"==\": [",
              "            {",
              "              \"var\": \"os\"",
              "            },",
              "            \"ios\"",
              "          ]",
              "        },",
              "        {",
              "          \"==\": [",
              "            {",
              "              \"var\": \"client\"",
              "            },",
              "            \"testClientCac02\"",
              "          ]",
              "        }",
              "      ]",
              "    };",
              "    const expected_varaints = [",
              "        {",
              "            \"id\": `${experiment_id}-control`,",
              "            \"overrides\": {",
              "                \"pmTestKey3\": \"value3-control\",",
              "                \"pmTestKey4\": \"value3-control\"",
              "            },",
              "            \"variant_type\": \"CONTROL\"",
              "        },",
              "        {",
              "            \"id\": `${experiment_id}-test1`,",
              "            \"overrides\": {",
              "                \"pmTestKey3\": \"value4-test\",",
              "                \"pmTestKey4\": \"value4-test\"",
              "            },",
              "            \"variant_type\": \"EXPERIMENTAL\"",
              "        }",
              "    ];",
              "    const expected_variant_contexts = [",
              "        {",
              "            \"vid\": `${experiment_id}-control`,",
              "            \"context\": {",
              "                \"and\": [",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"os\"",
              "                            },",
              "                            \"ios\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"client\"",
              "                            },",
              "                            \"testClientCac02\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"in\": [",
              "                            `${experiment_id}-control`,",
              "                            {",
              "                                \"var\": \"variantIds\"",
              "                            }",
              "                        ]",
              "                    }",
              "                ]",
              "            }",
              "        },",
              "        {",
              "            \"vid\": `${experiment_id}-test1`,",
              "            \"context\": {",
              "                \"and\": [",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"os\"",
              "                            },",
              "                            \"ios\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"client\"",
              "                            },",
              "                            \"testClientCac02\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"in\": [",
              "                            `${experiment_id}-test1`,",
              "                            {",
              "                                \"var\": \"variantIds\"",
              "                            }",
              "                        ]",
              "                    }",
              "                ]",
              "            }",
              "        }",
              "    ];",
              "",
              "    fetch_experiment_n_test(experiment_id, expected_context, expected_varaints, expected_variant_contexts);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "default"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "body": {
          "mode": "raw",
          "options": {
            "raw": {
              "language": "json"
            }
          },
          "raw": "{\"name\":\"experiment-1\",\"override_keys\":[\"pmTestKey3\",\"pmTestKey4\"],\"traffic_percentage\":10,\"context\":{\"and\":[{\"==\":[{\"var\":\"os\"},\"ios\"]},{\"==\":[{\"var\":\"client\"},\"testClientCac02\"]}]},\"variants\":[{\"id\":\"control\",\"variant_type\":\"CONTROL\",\"overrides\":{\"pmTestKey3\":\"value3-control\",\"pmTestKey4\":\"value3-control\"}},{\"id\":\"test1\",\"variant_type\":\"EXPERIMENTAL\",\"overrides\":{\"pmTestKey3\":\"value4-test\",\"pmTestKey4\":\"value4-test\"}}],\"description\":\"description\",\"change_reason\":\"change_reason\"}"
        },
        "url": {
          "raw": "{{host}}/experiments",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update Override Keys",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "",
              "function create_default_config_keys() {",
              "    let keys = [",
              "        `pmTestKey1972`,",
              "        `pmTestKey1999`",
              "    ];",
              "",
              "    for (const key of keys) {",
              "        const options = {",
              "            'method': 'POST',",
              "            'url': `${host}/default-config`,",
              "            \"header\": {",
              "                'Authorization': `Bearer ${token}`,",
              "                'x-tenant': 'test',",
              "                'Content-Type': 'application/json'",
              "            },",
              "            \"body\": {",
              "                \"mode\": \"raw\",",
              "                \"raw\": JSON.stringify({ ",
              "                    \"key\": key,",
              "                    \"value\": \"value1\",",
              "                    \"schema\": {",
              "                        \"type\": \"string\",",
              "                        \"pattern\": \".*\"",
              "                    }, ",
              "                    \"description\": \"description\",",
              "                    \"change_reason\": \"change_reason\"",
              "                })",
              "            }",
              "        };",
              "        console.log(options);",
              "        pm.sendRequest(options, function (error, response) {",
              "            if (error) {",
              "                console.log(`Error creating default-config key: ${key}`);",
              "                console.log(error);",
              "                return;",
              "            };",
              "            console.log(`Created default-config key: ${key}`);",
              "        });",
              "    }",
              "}",
              "",
              "create_default_config_keys()"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const host = pm.environment.get(\"host\");",
              "const token = pm.environment.get(\"token\");",
              "const org_id = pm.environment.get(\"org_id\");",
              "",
              "",
              "function fetch_context_n_test(context_id, expected_override_id, expected_override, expected_variant_context) {",
              "    const getRequest = {",
              "        url: `${host}/context/${context_id}`,",
              "        method: 'GET',",
              "        header: {",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "            'x-org-id': `${org_id}`",
              "        }",
              "    };",
              "",
              "",
              "    pm.sendRequest(getRequest, (error, response) => {",
              "        if(error) {",
              "            console.log(\"Failed to fetch context\");",
              "            throw error;",
              "        }",
              "",
              "        const context = response.json();",
              "",
              "        /*********** checking contexts created in CAC **********/;",
              "",
              "",
              "        const variant_override_id = context.override_id;",
              "        const varaint_context = context.value;",
              "        const variant_override = context.override;",
              "",
              "        console.log(\"Testing variant override id\");",
              "        console.log(\"Override from CAC: \\n\", variant_override_id);",
              "        console.log(\"Expected Context: \\n\", expected_override_id);",
              "        pm.expect(variant_override_id).to.be.eq(expected_override_id);",
              "",
              "        console.log(\"Testing variant override\");",
              "        console.log(\"Override from CAC: \\n\", JSON.stringify(variant_override, null, 2));",
              "        console.log(\"Expected Context: \\n\", JSON.stringify(expected_override, null, 2));",
              "        pm.expect(JSON.stringify(variant_override)).to.be.eq(JSON.stringify(expected_override));",
              "",
              "        console.log(\"Testing variant context\");",
              "        console.log(\"Context from CAC: \\n\", JSON.stringify(varaint_context, null, 2));",
              "        console.log(\"Expected Context: \\n\", JSON.stringify(expected_variant_context, null, 2));",
              "        pm.expect(JSON.stringify(varaint_context)).to.be.eq(JSON.stringify(expected_variant_context));",
              "    });",
              "}",
              "",
              "function fetch_experiment_n_test(experiment_id, expected_varaints, expected_variant_contexts) {",
              "    const options = {",
              "        'method': 'GET',",
              "        'url': `${host}/experiments/${experiment_id}`,",
              "        \"header\": {",
              "            'Authorization': `Bearer ${token}`,",
              "            'Content-Type': 'application/json',",
              "            'x-tenant': 'test',",
              "            'x-org-id': `${org_id}`",
              "        }",
              "    };",
              "",
              "    pm.sendRequest(options, function(error, response) {",
              "        if(error) {",
              "            console.log(\"Failed to fetch experiment\");",
              "            throw error;",
              "        }",
              "",
              "        const experiment = response.json();",
              "",
              "        const variants = experiment.variants;",
              "        for(const variant of variants) {",
              "            const variant_id = variant.id;",
              "",
              "            console.log(`TESTING variant: ${variant_id}`);",
              "",
              "            // check if the variant present in the expected_variants",
              "            const variant_cpy = JSON.parse(JSON.stringify(variant));",
              "            delete variant_cpy.override_id;",
              "            delete variant_cpy.context_id;",
              "",
              "            const expected_variant = expected_varaints.find((ev) => ev.id === variant_id);",
              "            console.log(\"Actual Variant:\", JSON.stringify(variant_cpy, null, 4));",
              "            console.log(\"Expected Variant:\", JSON.stringify(expected_variant, null, 4));",
              "            pm.expect(JSON.stringify(variant_cpy)).to.be.eq(JSON.stringify(expected_variant));",
              "",
              "            /*********/",
              "",
              "            const expected_context_id = variant.context_id;",
              "            const expected_override_id = variant.override_id;",
              "            const expected_override = variant.overrides;",
              "            const expected_variant_context = expected_variant_contexts.find(evc => evc.vid === variant_id)?.context;",
              "",
              "            fetch_context_n_test(expected_context_id, expected_override_id, expected_override, expected_variant_context);",
              "        }",
              "    });",
              "}",
              "",
              "// check experiment creation in experiment",
              "pm.test(\"200 OK\", function () {",
              "    const response = pm.response.json();",
              "    const experiment_id = response.experiment_id;",
              "",
              "    pm.environment.set(\"experiment_id\", experiment_id);",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// check for contexts in CAC",
              "pm.test(\"Test updated experiment\", function() {",
              "    const response = pm.response.json();",
              "    const experiment_id = response.id;",
              "",
              "    const expected_varaints = [",
              "        {",
              "            \"id\": `${experiment_id}-control`,",
              "            \"overrides\": {",
              "                \"pmTestKey1972\": \"value-7910-an-control\",",
              "                \"pmTestKey1999\": \"value-6910-an-control\"",
              "            },",
              "            \"variant_type\": \"CONTROL\"",
              "        },",
              "        {",
              "            \"id\": `${experiment_id}-test1`,",
              "            \"overrides\": {",
              "                \"pmTestKey1972\": \"value-7920-an-test\",",
              "                \"pmTestKey1999\": \"value-6930-an-test\"",
              "            },",
              "            \"variant_type\": \"EXPERIMENTAL\"",
              "        }",
              "    ];",
              "    const expected_variant_contexts = [",
              "        {",
              "            \"vid\": `${experiment_id}-control`,",
              "            \"context\": {",
              "                \"and\": [",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"os\"",
              "                            },",
              "                            \"ios\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"client\"",
              "                            },",
              "                            \"testClientCac02\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"in\": [",
              "                            `${experiment_id}-control`,",
              "                            {",
              "                                \"var\": \"variantIds\"",
              "                            }",
              "                        ]",
              "                    }",
              "                ]",
              "            }",
              "        },",
              "        {",
              "            \"vid\": `${experiment_id}-test1`,",
              "            \"context\": {",
              "                \"and\": [",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"os\"",
              "                            },",
              "                            \"ios\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"==\": [",
              "                            {",
              "                                \"var\": \"client\"",
              "                            },",
              "                            \"testClientCac02\"",
              "                        ]",
              "                    },",
              "                    {",
              "                        \"in\": [",
              "                            `${experiment_id}-test1`,",
              "                            {",
              "                                \"var\": \"variantIds\"",
              "                            }",
              "                        ]",
              "                    }",
              "                ]",
              "            }",
              "        }",
              "    ];",
              "",
              "    fetch_experiment_n_test(experiment_id, expected_varaints, expected_variant_contexts);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}",
            "type": "default"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "body": {
          "mode": "raw",
          "options": {
            "raw": {
              "language": "json"
            }
          },
          "raw": "{\"override_keys\":[\"pmTestKey1972\",\"pmTestKey1999\"],\"variants\":[{\"id\":\"{{experiment_id}}-control\",\"overrides\":{\"pmTestKey1972\":\"value-7910-an-control\",\"pmTestKey1999\":\"value-6910-an-control\"}},{\"id\":\"{{experiment_id}}-test1\",\"overrides\":{\"pmTestKey1972\":\"value-7920-an-test\",\"pmTestKey1999\":\"value-6930-an-test\"}}],\"description\":\"description\",\"change_reason\":\"change_reason\"}"
        },
        "url": {
          "raw": "{{host}}/experiments/{{experiment_id}}/overrides",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments",
            "{{experiment_id}}",
            "overrides"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List experiments No If-Modified-Since",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "url": {
          "raw": "{{host}}/experiments?from_date=2023-01-01%2000%3A00%3A00%20UTC&to_date=2023-08-04%2005%3A52%3A39.889727%20UTC&page=1&count=100&status=CREATED,INPROGRESS",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments"
          ],
          "query": [
            {
              "key": "from_date",
              "value": "2023-01-01%2000%3A00%3A00%20UTC"
            },
            {
              "key": "to_date",
              "value": "2023-08-04%2005%3A52%3A39.889727%20UTC"
            },
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "count",
              "value": "100"
            },
            {
              "key": "status",
              "value": "CREATED,INPROGRESS"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "List experiments If-Modified-Since Thu 01 Jan 1970 00_00_00 0000",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"200 check\", function() {",
              "    pm.response.to.have.status(200);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "If-Modified-Since",
            "value": "Thu, 01 Jan 1970 00:00:00 +0000",
            "type": "default"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "url": {
          "raw": "{{host}}/experiments?page=1&count=100&status=CREATED,INPROGRESS,CONCLUDED",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments"
          ],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "count",
              "value": "100"
            },
            {
              "key": "status",
              "value": "CREATED,INPROGRESS,CONCLUDED"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "List experiments If-Modified-Since Wed 01 Dec 2070 00_00_00 0000",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"304 check\", function() {",
              "    pm.response.to.have.status(304);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{token}}"
          },
          {
            "key": "If-Modified-Since",
            "value": "Wed, 01 Jan 2070 00:00:00 +0000",
            "type": "default"
          },
          {
            "key": "x-tenant",
            "value": "test",
            "type": "default"
          },
          {
            "key": "x-org-id",
            "value": "{{org_id}}",
            "type": "default"
          }
        ],
        "url": {
          "raw": "{{host}}/experiments?page=1&count=100&status=CREATED,INPROGRESS",
          "host": [
            "{{host}}"
          ],
          "path": [
            "experiments"
          ],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "count",
              "value": "100"
            },
            {
              "key": "status",
              "value": "CREATED,INPROGRESS"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "info": {
    "_postman_id": "d7e3355b-8480-43d9-87a2-9bbfc158f267",
    "name": "experimentation-platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "host",
      "value": "http://localhost:8080",
      "type": "default"
    },
    {
      "key": "token",
      "value": "12345678",
      "type": "default"
    },
    {
      "key": "org_id",
      "value": "testorg",
      "type": "default"
    }
  ]
}
