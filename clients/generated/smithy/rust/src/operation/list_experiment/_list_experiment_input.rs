// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExperimentInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub workspace_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub org_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub page: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub count: ::std::option::Option<i64>,
    #[allow(missing_docs)] // documentation missing in model
    pub all: ::std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    pub status: ::std::option::Option<crate::types::ExperimentStatusType>,
    #[allow(missing_docs)] // documentation missing in model
    pub from_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    #[allow(missing_docs)] // documentation missing in model
    pub to_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    #[allow(missing_docs)] // documentation missing in model
    pub experiment_name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub experiment_ids: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub created_by: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub context_query: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub sort_on: ::std::option::Option<crate::types::ExperimentSortOn>,
    #[allow(missing_docs)] // documentation missing in model
    pub sort_by: ::std::option::Option<crate::types::SortBy>,
}
impl  ListExperimentInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(&self) -> ::std::option::Option<&str> {
        self.org_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn page(&self) -> ::std::option::Option<i64> {
        self.page
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn count(&self) -> ::std::option::Option<i64> {
        self.count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn all(&self) -> ::std::option::Option<bool> {
        self.all
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> ::std::option::Option<&crate::types::ExperimentStatusType> {
        self.status.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn from_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.from_date.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn to_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.to_date.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn experiment_name(&self) -> ::std::option::Option<&str> {
        self.experiment_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn experiment_ids(&self) -> ::std::option::Option<&str> {
        self.experiment_ids.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn context_query(&self) -> ::std::option::Option<&str> {
        self.context_query.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_on(&self) -> ::std::option::Option<&crate::types::ExperimentSortOn> {
        self.sort_on.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::SortBy> {
        self.sort_by.as_ref()
    }
}
impl ListExperimentInput {
    /// Creates a new builder-style object to manufacture [`ListExperimentInput`](crate::operation::list_experiment::ListExperimentInput).
    pub fn builder() -> crate::operation::list_experiment::builders::ListExperimentInputBuilder {
        crate::operation::list_experiment::builders::ListExperimentInputBuilder::default()
    }
}

/// A builder for [`ListExperimentInput`](crate::operation::list_experiment::ListExperimentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListExperimentInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) org_id: ::std::option::Option<::std::string::String>,
    pub(crate) page: ::std::option::Option<i64>,
    pub(crate) count: ::std::option::Option<i64>,
    pub(crate) all: ::std::option::Option<bool>,
    pub(crate) status: ::std::option::Option<crate::types::ExperimentStatusType>,
    pub(crate) from_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) to_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) experiment_name: ::std::option::Option<::std::string::String>,
    pub(crate) experiment_ids: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) context_query: ::std::option::Option<::std::string::String>,
    pub(crate) sort_on: ::std::option::Option<crate::types::ExperimentSortOn>,
    pub(crate) sort_by: ::std::option::Option<crate::types::SortBy>,
}
impl ListExperimentInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.org_id
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn page(mut self, input: i64) -> Self {
        self.page = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_page(mut self, input: ::std::option::Option<i64>) -> Self {
        self.page = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_page(&self) -> &::std::option::Option<i64> {
        &self.page
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn count(mut self, input: i64) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.count = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_count(&self) -> &::std::option::Option<i64> {
        &self.count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn all(mut self, input: bool) -> Self {
        self.all = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_all(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_all(&self) -> &::std::option::Option<bool> {
        &self.all
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::types::ExperimentStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExperimentStatusType>) -> Self {
        self.status = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExperimentStatusType> {
        &self.status
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn from_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.from_date = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_from_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.from_date = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_from_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.from_date
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn to_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.to_date = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_to_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.to_date = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_to_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.to_date
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn experiment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.experiment_name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_experiment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.experiment_name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_experiment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.experiment_name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn experiment_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.experiment_ids = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_experiment_ids(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.experiment_ids = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_experiment_ids(&self) -> &::std::option::Option<::std::string::String> {
        &self.experiment_ids
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn context_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.context_query = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_context_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.context_query = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_context_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.context_query
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_on(mut self, input: crate::types::ExperimentSortOn) -> Self {
        self.sort_on = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sort_on(mut self, input: ::std::option::Option<crate::types::ExperimentSortOn>) -> Self {
        self.sort_on = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_sort_on(&self) -> &::std::option::Option<crate::types::ExperimentSortOn> {
        &self.sort_on
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_by(mut self, input: crate::types::SortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortBy>) -> Self {
        self.sort_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortBy> {
        &self.sort_by
    }
    /// Consumes the builder and constructs a [`ListExperimentInput`](crate::operation::list_experiment::ListExperimentInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_experiment::ListExperimentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::list_experiment::ListExperimentInput {
                workspace_id: self.workspace_id
                ,
                org_id: self.org_id
                ,
                page: self.page
                ,
                count: self.count
                ,
                all: self.all
                ,
                status: self.status
                ,
                from_date: self.from_date
                ,
                to_date: self.to_date
                ,
                experiment_name: self.experiment_name
                ,
                experiment_ids: self.experiment_ids
                ,
                created_by: self.created_by
                ,
                context_query: self.context_query
                ,
                sort_on: self.sort_on
                ,
                sort_by: self.sort_by
                ,
            }
        )
    }
}

