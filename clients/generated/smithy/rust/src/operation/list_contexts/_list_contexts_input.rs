// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListContextsInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub workspace_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub org_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub page: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub count: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub prefix: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub sort_on: ::std::option::Option<crate::types::ContextFilterSortOn>,
    #[allow(missing_docs)] // documentation missing in model
    pub sort_by: ::std::option::Option<crate::types::SortBy>,
    #[allow(missing_docs)] // documentation missing in model
    pub created_by: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub last_modified_by: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub plaintext: ::std::option::Option<::std::string::String>,
}
impl  ListContextsInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(&self) -> ::std::option::Option<&str> {
        self.org_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn page(&self) -> ::std::option::Option<i32> {
        self.page
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_on(&self) -> ::std::option::Option<&crate::types::ContextFilterSortOn> {
        self.sort_on.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::SortBy> {
        self.sort_by.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn last_modified_by(&self) -> ::std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn plaintext(&self) -> ::std::option::Option<&str> {
        self.plaintext.as_deref()
    }
}
impl ListContextsInput {
    /// Creates a new builder-style object to manufacture [`ListContextsInput`](crate::operation::list_contexts::ListContextsInput).
    pub fn builder() -> crate::operation::list_contexts::builders::ListContextsInputBuilder {
        crate::operation::list_contexts::builders::ListContextsInputBuilder::default()
    }
}

/// A builder for [`ListContextsInput`](crate::operation::list_contexts::ListContextsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListContextsInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) org_id: ::std::option::Option<::std::string::String>,
    pub(crate) page: ::std::option::Option<i32>,
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) sort_on: ::std::option::Option<crate::types::ContextFilterSortOn>,
    pub(crate) sort_by: ::std::option::Option<crate::types::SortBy>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_by: ::std::option::Option<::std::string::String>,
    pub(crate) plaintext: ::std::option::Option<::std::string::String>,
}
impl ListContextsInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.org_id
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn page(mut self, input: i32) -> Self {
        self.page = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_page(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_page(&self) -> &::std::option::Option<i32> {
        &self.page
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_on(mut self, input: crate::types::ContextFilterSortOn) -> Self {
        self.sort_on = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sort_on(mut self, input: ::std::option::Option<crate::types::ContextFilterSortOn>) -> Self {
        self.sort_on = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_sort_on(&self) -> &::std::option::Option<crate::types::ContextFilterSortOn> {
        &self.sort_on
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sort_by(mut self, input: crate::types::SortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortBy>) -> Self {
        self.sort_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortBy> {
        &self.sort_by
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn last_modified_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_last_modified_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_by
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn plaintext(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plaintext = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_plaintext(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plaintext = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_plaintext(&self) -> &::std::option::Option<::std::string::String> {
        &self.plaintext
    }
    /// Consumes the builder and constructs a [`ListContextsInput`](crate::operation::list_contexts::ListContextsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_contexts::ListContextsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::list_contexts::ListContextsInput {
                workspace_id: self.workspace_id
                ,
                org_id: self.org_id
                ,
                page: self.page
                ,
                count: self.count
                ,
                prefix: self.prefix
                ,
                sort_on: self.sort_on
                ,
                sort_by: self.sort_by
                ,
                created_by: self.created_by
                ,
                last_modified_by: self.last_modified_by
                ,
                plaintext: self.plaintext
                ,
            }
        )
    }
}

