// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_experiment::_create_experiment_output::CreateExperimentOutputBuilder;

pub use crate::operation::create_experiment::_create_experiment_input::CreateExperimentInputBuilder;

impl crate::operation::create_experiment::builders::CreateExperimentInputBuilder {
                    /// Sends a request with this input using the given client.
                    pub async fn send_with(self, client: &crate::Client) -> ::std::result::Result<
                        crate::operation::create_experiment::CreateExperimentOutput,
                        ::aws_smithy_runtime_api::client::result::SdkError<
                            crate::operation::create_experiment::CreateExperimentError,
                            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse
                        >
                    > {
                        let mut fluent_builder = client.create_experiment();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
                }
/// Fluent builder constructing a request to `CreateExperiment`.
/// 
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateExperimentFluentBuilder {
                handle: ::std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_experiment::builders::CreateExperimentInputBuilder,
config_override: ::std::option::Option<crate::config::Builder>,
            }
impl
                crate::client::customize::internal::CustomizableSend<
                    crate::operation::create_experiment::CreateExperimentOutput,
                    crate::operation::create_experiment::CreateExperimentError,
                > for CreateExperimentFluentBuilder
            {
                fn send(
                    self,
                    config_override: crate::config::Builder,
                ) -> crate::client::customize::internal::BoxFuture<
                    crate::client::customize::internal::SendResult<
                        crate::operation::create_experiment::CreateExperimentOutput,
                        crate::operation::create_experiment::CreateExperimentError,
                    >,
                > {
                    ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
                }
            }
impl CreateExperimentFluentBuilder {
    /// Creates a new `CreateExperimentFluentBuilder`.
                    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
                        Self {
                            handle,
                            inner: ::std::default::Default::default(),
    config_override: ::std::option::Option::None,
                        }
                    }
    /// Access the CreateExperiment as a reference.
                    pub fn as_input(&self) -> &crate::operation::create_experiment::builders::CreateExperimentInputBuilder {
                        &self.inner
                    }
    /// Sends the request and returns the response.
                    ///
                    /// If an error occurs, an `SdkError` will be returned with additional details that
                    /// can be matched against.
                    ///
                    /// By default, any retryable failures will be retried twice. Retry behavior
                    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
                    /// set when configuring the client.
                    pub async fn send(self) -> ::std::result::Result<crate::operation::create_experiment::CreateExperimentOutput, ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_experiment::CreateExperimentError, ::aws_smithy_runtime_api::client::orchestrator::HttpResponse>> {
                        let input = self.inner.build().map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
                        let runtime_plugins = crate::operation::create_experiment::CreateExperiment::operation_runtime_plugins(
                            self.handle.runtime_plugins.clone(),
                            &self.handle.conf,
                            self.config_override,
                        );
                        crate::operation::create_experiment::CreateExperiment::orchestrate(&runtime_plugins, input).await
                    }
    
                    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
                    pub fn customize(
                        self,
                    ) -> crate::client::customize::CustomizableOperation<crate::operation::create_experiment::CreateExperimentOutput, crate::operation::create_experiment::CreateExperimentError, Self> {
                        crate::client::customize::CustomizableOperation::new(self)
                    }
    pub(crate) fn config_override(
                            mut self,
                            config_override: impl ::std::convert::Into<crate::config::Builder>,
                        ) -> Self {
                            self.set_config_override(::std::option::Option::Some(config_override.into()));
                            self
                        }
    
                        pub(crate) fn set_config_override(
                            &mut self,
                            config_override: ::std::option::Option<crate::config::Builder>,
                        ) -> &mut Self {
                            self.config_override = config_override;
                            self
                        }
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
                    self.inner = self.inner.workspace_id(input.into());
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
                    self.inner = self.inner.set_workspace_id(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
                    self.inner.get_workspace_id()
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
                    self.inner = self.inner.org_id(input.into());
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
                    self.inner = self.inner.set_org_id(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
                    self.inner.get_org_id()
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
                    self.inner = self.inner.name(input.into());
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
                    self.inner = self.inner.set_name(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
                    self.inner.get_name()
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn experiment_type(mut self, input: crate::types::ExperimentType) -> Self {
                    self.inner = self.inner.experiment_type(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_experiment_type(mut self, input: ::std::option::Option<crate::types::ExperimentType>) -> Self {
                    self.inner = self.inner.set_experiment_type(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_experiment_type(&self) -> &::std::option::Option<crate::types::ExperimentType> {
                    self.inner.get_experiment_type()
                }
    /// 
    /// Adds a key-value pair to `context`.
    /// 
    /// To override the contents of this collection use [`set_context`](Self::set_context).
    /// 
    #[allow(missing_docs)] // documentation missing in model
    pub fn context(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
                    self.inner = self.inner.context(k.into(), v);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_context(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>) -> Self {
                    self.inner = self.inner.set_context(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_context(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
                    self.inner.get_context()
                }
    /// 
    /// Appends an item to `variants`.
    /// 
    /// To override the contents of this collection use [`set_variants`](Self::set_variants).
    /// 
    #[allow(missing_docs)] // documentation missing in model
    pub fn variants(mut self, input: crate::types::Variant) -> Self {
                        self.inner = self.inner.variants(input);
                        self
                    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_variants(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::Variant>>) -> Self {
                    self.inner = self.inner.set_variants(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_variants(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::Variant>> {
                    self.inner.get_variants()
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
                    self.inner = self.inner.description(input.into());
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
                    self.inner = self.inner.set_description(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
                    self.inner.get_description()
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn change_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
                    self.inner = self.inner.change_reason(input.into());
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_change_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
                    self.inner = self.inner.set_change_reason(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_change_reason(&self) -> &::std::option::Option<::std::string::String> {
                    self.inner.get_change_reason()
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn metrics(mut self, input: ::aws_smithy_types::Document) -> Self {
                    self.inner = self.inner.metrics(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_metrics(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
                    self.inner = self.inner.set_metrics(input);
                    self
                }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_metrics(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
                    self.inner.get_metrics()
                }
}

