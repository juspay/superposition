// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    #[allow(missing_docs)] // documentation missing in model
    FunctionNotFound(crate::types::error::FunctionNotFound),
    #[allow(missing_docs)] // documentation missing in model
    InternalServerError(crate::types::error::InternalServerError),
    #[allow(missing_docs)] // documentation missing in model
    OrganisationNotFound(crate::types::error::OrganisationNotFound),
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound(crate::types::error::ResourceNotFound),
    #[allow(missing_docs)] // documentation missing in model
    TypeTemplatesNotFound(crate::types::error::TypeTemplatesNotFound),
    #[allow(missing_docs)] // documentation missing in model
    WebhookNotFound(crate::types::error::WebhookNotFound),
    #[allow(missing_docs)] // documentation missing in model
    WorkspaceNotFound(crate::types::error::WorkspaceNotFound),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled)
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::FunctionNotFound(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::OrganisationNotFound(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::TypeTemplatesNotFound(inner) => inner.fmt(f),
            Error::WebhookNotFound(inner) => inner.fmt(f),
            Error::WorkspaceNotFound(inner) => inner.fmt(f),
            Error::Unhandled(_) => if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                                        write!(f, "unhandled error ({code})")
                                    } else {
                                        f.write_str("unhandled error")
                                    }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
                fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
                    Error::Unhandled(crate::error::sealed_unhandled::Unhandled { source: value.into(), meta: ::std::default::Default::default() })
                }
            }
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
                fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
                    match self {
                        Self::FunctionNotFound(inner) => inner.meta(),
Self::InternalServerError(inner) => inner.meta(),
Self::OrganisationNotFound(inner) => inner.meta(),
Self::ResourceNotFound(inner) => inner.meta(),
Self::TypeTemplatesNotFound(inner) => inner.meta(),
Self::WebhookNotFound(inner) => inner.meta(),
Self::WorkspaceNotFound(inner) => inner.meta(),
                        Self::Unhandled(inner) => &inner.meta,
                    }
                }
            }
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::applicable_variants::ApplicableVariantsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::applicable_variants::ApplicableVariantsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::applicable_variants::ApplicableVariantsError> for Error {
    fn from(err: crate::operation::applicable_variants::ApplicableVariantsError) -> Self {
        match err {
            crate::operation::applicable_variants::ApplicableVariantsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::applicable_variants::ApplicableVariantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::bulk_operation::BulkOperationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::bulk_operation::BulkOperationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::bulk_operation::BulkOperationError> for Error {
    fn from(err: crate::operation::bulk_operation::BulkOperationError) -> Self {
        match err {
            crate::operation::bulk_operation::BulkOperationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::bulk_operation::BulkOperationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::conclude_experiment::ConcludeExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::conclude_experiment::ConcludeExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::conclude_experiment::ConcludeExperimentError> for Error {
    fn from(err: crate::operation::conclude_experiment::ConcludeExperimentError) -> Self {
        match err {
            crate::operation::conclude_experiment::ConcludeExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::conclude_experiment::ConcludeExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_context::CreateContextError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_context::CreateContextError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_context::CreateContextError> for Error {
    fn from(err: crate::operation::create_context::CreateContextError) -> Self {
        match err {
            crate::operation::create_context::CreateContextError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_context::CreateContextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_default_config::CreateDefaultConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_default_config::CreateDefaultConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_default_config::CreateDefaultConfigError> for Error {
    fn from(err: crate::operation::create_default_config::CreateDefaultConfigError) -> Self {
        match err {
            crate::operation::create_default_config::CreateDefaultConfigError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_default_config::CreateDefaultConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_dimension::CreateDimensionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_dimension::CreateDimensionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_dimension::CreateDimensionError> for Error {
    fn from(err: crate::operation::create_dimension::CreateDimensionError) -> Self {
        match err {
            crate::operation::create_dimension::CreateDimensionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_dimension::CreateDimensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_experiment::CreateExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_experiment::CreateExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_experiment::CreateExperimentError> for Error {
    fn from(err: crate::operation::create_experiment::CreateExperimentError) -> Self {
        match err {
            crate::operation::create_experiment::CreateExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_experiment::CreateExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_function::CreateFunctionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_function::CreateFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_function::CreateFunctionError> for Error {
    fn from(err: crate::operation::create_function::CreateFunctionError) -> Self {
        match err {
            crate::operation::create_function::CreateFunctionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_function::CreateFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_organisation::CreateOrganisationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_organisation::CreateOrganisationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_organisation::CreateOrganisationError> for Error {
    fn from(err: crate::operation::create_organisation::CreateOrganisationError) -> Self {
        match err {
            crate::operation::create_organisation::CreateOrganisationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_organisation::CreateOrganisationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_type_templates::CreateTypeTemplatesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_type_templates::CreateTypeTemplatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_type_templates::CreateTypeTemplatesError> for Error {
    fn from(err: crate::operation::create_type_templates::CreateTypeTemplatesError) -> Self {
        match err {
            crate::operation::create_type_templates::CreateTypeTemplatesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_type_templates::CreateTypeTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_webhook::CreateWebhookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_webhook::CreateWebhookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_webhook::CreateWebhookError> for Error {
    fn from(err: crate::operation::create_webhook::CreateWebhookError) -> Self {
        match err {
            crate::operation::create_webhook::CreateWebhookError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_webhook::CreateWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workspace::CreateWorkspaceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workspace::CreateWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::create_workspace::CreateWorkspaceError> for Error {
    fn from(err: crate::operation::create_workspace::CreateWorkspaceError) -> Self {
        match err {
            crate::operation::create_workspace::CreateWorkspaceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_workspace::CreateWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_context::DeleteContextError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_context::DeleteContextError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::delete_context::DeleteContextError> for Error {
    fn from(err: crate::operation::delete_context::DeleteContextError) -> Self {
        match err {
            crate::operation::delete_context::DeleteContextError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_context::DeleteContextError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_context::DeleteContextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_default_config::DeleteDefaultConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_default_config::DeleteDefaultConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::delete_default_config::DeleteDefaultConfigError> for Error {
    fn from(err: crate::operation::delete_default_config::DeleteDefaultConfigError) -> Self {
        match err {
            crate::operation::delete_default_config::DeleteDefaultConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_default_config::DeleteDefaultConfigError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_default_config::DeleteDefaultConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_dimension::DeleteDimensionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_dimension::DeleteDimensionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::delete_dimension::DeleteDimensionError> for Error {
    fn from(err: crate::operation::delete_dimension::DeleteDimensionError) -> Self {
        match err {
            crate::operation::delete_dimension::DeleteDimensionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::delete_dimension::DeleteDimensionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_dimension::DeleteDimensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_function::DeleteFunctionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_function::DeleteFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::delete_function::DeleteFunctionError> for Error {
    fn from(err: crate::operation::delete_function::DeleteFunctionError) -> Self {
        match err {
            crate::operation::delete_function::DeleteFunctionError::FunctionNotFound(inner) => Error::FunctionNotFound(inner),
            crate::operation::delete_function::DeleteFunctionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_function::DeleteFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_type_templates::DeleteTypeTemplatesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_type_templates::DeleteTypeTemplatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::delete_type_templates::DeleteTypeTemplatesError> for Error {
    fn from(err: crate::operation::delete_type_templates::DeleteTypeTemplatesError) -> Self {
        match err {
            crate::operation::delete_type_templates::DeleteTypeTemplatesError::TypeTemplatesNotFound(inner) => Error::TypeTemplatesNotFound(inner),
            crate::operation::delete_type_templates::DeleteTypeTemplatesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_type_templates::DeleteTypeTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::discard_experiment::DiscardExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::discard_experiment::DiscardExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::discard_experiment::DiscardExperimentError> for Error {
    fn from(err: crate::operation::discard_experiment::DiscardExperimentError) -> Self {
        match err {
            crate::operation::discard_experiment::DiscardExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::discard_experiment::DiscardExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_config::GetConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_config::GetConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_config::GetConfigError> for Error {
    fn from(err: crate::operation::get_config::GetConfigError) -> Self {
        match err {
            crate::operation::get_config::GetConfigError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_config::GetConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_config_fast::GetConfigFastError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_config_fast::GetConfigFastError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_config_fast::GetConfigFastError> for Error {
    fn from(err: crate::operation::get_config_fast::GetConfigFastError) -> Self {
        match err {
            crate::operation::get_config_fast::GetConfigFastError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_config_fast::GetConfigFastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_context::GetContextError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_context::GetContextError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_context::GetContextError> for Error {
    fn from(err: crate::operation::get_context::GetContextError) -> Self {
        match err {
            crate::operation::get_context::GetContextError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::get_context::GetContextError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_context::GetContextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_context_from_condition::GetContextFromConditionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_context_from_condition::GetContextFromConditionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_context_from_condition::GetContextFromConditionError> for Error {
    fn from(err: crate::operation::get_context_from_condition::GetContextFromConditionError) -> Self {
        match err {
            crate::operation::get_context_from_condition::GetContextFromConditionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::get_context_from_condition::GetContextFromConditionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_context_from_condition::GetContextFromConditionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_experiment::GetExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_experiment::GetExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_experiment::GetExperimentError> for Error {
    fn from(err: crate::operation::get_experiment::GetExperimentError) -> Self {
        match err {
            crate::operation::get_experiment::GetExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_experiment::GetExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_function::GetFunctionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_function::GetFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_function::GetFunctionError> for Error {
    fn from(err: crate::operation::get_function::GetFunctionError) -> Self {
        match err {
            crate::operation::get_function::GetFunctionError::FunctionNotFound(inner) => Error::FunctionNotFound(inner),
            crate::operation::get_function::GetFunctionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_function::GetFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_organisation::GetOrganisationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_organisation::GetOrganisationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_organisation::GetOrganisationError> for Error {
    fn from(err: crate::operation::get_organisation::GetOrganisationError) -> Self {
        match err {
            crate::operation::get_organisation::GetOrganisationError::OrganisationNotFound(inner) => Error::OrganisationNotFound(inner),
            crate::operation::get_organisation::GetOrganisationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_organisation::GetOrganisationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolved_config::GetResolvedConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolved_config::GetResolvedConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_resolved_config::GetResolvedConfigError> for Error {
    fn from(err: crate::operation::get_resolved_config::GetResolvedConfigError) -> Self {
        match err {
            crate::operation::get_resolved_config::GetResolvedConfigError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_resolved_config::GetResolvedConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_type_templates_list::GetTypeTemplatesListError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_type_templates_list::GetTypeTemplatesListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_type_templates_list::GetTypeTemplatesListError> for Error {
    fn from(err: crate::operation::get_type_templates_list::GetTypeTemplatesListError) -> Self {
        match err {
            crate::operation::get_type_templates_list::GetTypeTemplatesListError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_type_templates_list::GetTypeTemplatesListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_webhook::GetWebhookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_webhook::GetWebhookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::get_webhook::GetWebhookError> for Error {
    fn from(err: crate::operation::get_webhook::GetWebhookError) -> Self {
        match err {
            crate::operation::get_webhook::GetWebhookError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_webhook::GetWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_audit_logs::ListAuditLogsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_audit_logs::ListAuditLogsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_audit_logs::ListAuditLogsError> for Error {
    fn from(err: crate::operation::list_audit_logs::ListAuditLogsError) -> Self {
        match err {
            crate::operation::list_audit_logs::ListAuditLogsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_audit_logs::ListAuditLogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_contexts::ListContextsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_contexts::ListContextsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_contexts::ListContextsError> for Error {
    fn from(err: crate::operation::list_contexts::ListContextsError) -> Self {
        match err {
            crate::operation::list_contexts::ListContextsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_contexts::ListContextsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_default_configs::ListDefaultConfigsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_default_configs::ListDefaultConfigsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_default_configs::ListDefaultConfigsError> for Error {
    fn from(err: crate::operation::list_default_configs::ListDefaultConfigsError) -> Self {
        match err {
            crate::operation::list_default_configs::ListDefaultConfigsError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::list_default_configs::ListDefaultConfigsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_default_configs::ListDefaultConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dimensions::ListDimensionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dimensions::ListDimensionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_dimensions::ListDimensionsError> for Error {
    fn from(err: crate::operation::list_dimensions::ListDimensionsError) -> Self {
        match err {
            crate::operation::list_dimensions::ListDimensionsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_dimensions::ListDimensionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_experiment::ListExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_experiment::ListExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_experiment::ListExperimentError> for Error {
    fn from(err: crate::operation::list_experiment::ListExperimentError) -> Self {
        match err {
            crate::operation::list_experiment::ListExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_experiment::ListExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_function::ListFunctionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_function::ListFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_function::ListFunctionError> for Error {
    fn from(err: crate::operation::list_function::ListFunctionError) -> Self {
        match err {
            crate::operation::list_function::ListFunctionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_function::ListFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_organisation::ListOrganisationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_organisation::ListOrganisationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_organisation::ListOrganisationError> for Error {
    fn from(err: crate::operation::list_organisation::ListOrganisationError) -> Self {
        match err {
            crate::operation::list_organisation::ListOrganisationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_organisation::ListOrganisationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_versions::ListVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_versions::ListVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_versions::ListVersionsError> for Error {
    fn from(err: crate::operation::list_versions::ListVersionsError) -> Self {
        match err {
            crate::operation::list_versions::ListVersionsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_versions::ListVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_webhook::ListWebhookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_webhook::ListWebhookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_webhook::ListWebhookError> for Error {
    fn from(err: crate::operation::list_webhook::ListWebhookError) -> Self {
        match err {
            crate::operation::list_webhook::ListWebhookError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_webhook::ListWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workspace::ListWorkspaceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workspace::ListWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::list_workspace::ListWorkspaceError> for Error {
    fn from(err: crate::operation::list_workspace::ListWorkspaceError) -> Self {
        match err {
            crate::operation::list_workspace::ListWorkspaceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_workspace::ListWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::move_context::MoveContextError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::move_context::MoveContextError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::move_context::MoveContextError> for Error {
    fn from(err: crate::operation::move_context::MoveContextError) -> Self {
        match err {
            crate::operation::move_context::MoveContextError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::move_context::MoveContextError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::move_context::MoveContextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::pause_experiment::PauseExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::pause_experiment::PauseExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::pause_experiment::PauseExperimentError> for Error {
    fn from(err: crate::operation::pause_experiment::PauseExperimentError) -> Self {
        match err {
            crate::operation::pause_experiment::PauseExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::pause_experiment::PauseExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::publish::PublishError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::publish::PublishError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::publish::PublishError> for Error {
    fn from(err: crate::operation::publish::PublishError) -> Self {
        match err {
            crate::operation::publish::PublishError::FunctionNotFound(inner) => Error::FunctionNotFound(inner),
            crate::operation::publish::PublishError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::publish::PublishError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::ramp_experiment::RampExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::ramp_experiment::RampExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::ramp_experiment::RampExperimentError> for Error {
    fn from(err: crate::operation::ramp_experiment::RampExperimentError) -> Self {
        match err {
            crate::operation::ramp_experiment::RampExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::ramp_experiment::RampExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::resume_experiment::ResumeExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::resume_experiment::ResumeExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::resume_experiment::ResumeExperimentError> for Error {
    fn from(err: crate::operation::resume_experiment::ResumeExperimentError) -> Self {
        match err {
            crate::operation::resume_experiment::ResumeExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::resume_experiment::ResumeExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test::TestError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test::TestError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::test::TestError> for Error {
    fn from(err: crate::operation::test::TestError) -> Self {
        match err {
            crate::operation::test::TestError::FunctionNotFound(inner) => Error::FunctionNotFound(inner),
            crate::operation::test::TestError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::test::TestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_default_config::UpdateDefaultConfigError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_default_config::UpdateDefaultConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_default_config::UpdateDefaultConfigError> for Error {
    fn from(err: crate::operation::update_default_config::UpdateDefaultConfigError) -> Self {
        match err {
            crate::operation::update_default_config::UpdateDefaultConfigError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_default_config::UpdateDefaultConfigError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_default_config::UpdateDefaultConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_dimension::UpdateDimensionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_dimension::UpdateDimensionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_dimension::UpdateDimensionError> for Error {
    fn from(err: crate::operation::update_dimension::UpdateDimensionError) -> Self {
        match err {
            crate::operation::update_dimension::UpdateDimensionError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_dimension::UpdateDimensionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_dimension::UpdateDimensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_function::UpdateFunctionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_function::UpdateFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_function::UpdateFunctionError> for Error {
    fn from(err: crate::operation::update_function::UpdateFunctionError) -> Self {
        match err {
            crate::operation::update_function::UpdateFunctionError::FunctionNotFound(inner) => Error::FunctionNotFound(inner),
            crate::operation::update_function::UpdateFunctionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_function::UpdateFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_organisation::UpdateOrganisationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_organisation::UpdateOrganisationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_organisation::UpdateOrganisationError> for Error {
    fn from(err: crate::operation::update_organisation::UpdateOrganisationError) -> Self {
        match err {
            crate::operation::update_organisation::UpdateOrganisationError::OrganisationNotFound(inner) => Error::OrganisationNotFound(inner),
            crate::operation::update_organisation::UpdateOrganisationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_organisation::UpdateOrganisationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_override::UpdateOverrideError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_override::UpdateOverrideError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_override::UpdateOverrideError> for Error {
    fn from(err: crate::operation::update_override::UpdateOverrideError) -> Self {
        match err {
            crate::operation::update_override::UpdateOverrideError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::update_override::UpdateOverrideError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_override::UpdateOverrideError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_overrides_experiment::UpdateOverridesExperimentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_overrides_experiment::UpdateOverridesExperimentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_overrides_experiment::UpdateOverridesExperimentError> for Error {
    fn from(err: crate::operation::update_overrides_experiment::UpdateOverridesExperimentError) -> Self {
        match err {
            crate::operation::update_overrides_experiment::UpdateOverridesExperimentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_overrides_experiment::UpdateOverridesExperimentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_type_templates::UpdateTypeTemplatesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_type_templates::UpdateTypeTemplatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_type_templates::UpdateTypeTemplatesError> for Error {
    fn from(err: crate::operation::update_type_templates::UpdateTypeTemplatesError) -> Self {
        match err {
            crate::operation::update_type_templates::UpdateTypeTemplatesError::TypeTemplatesNotFound(inner) => Error::TypeTemplatesNotFound(inner),
            crate::operation::update_type_templates::UpdateTypeTemplatesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_type_templates::UpdateTypeTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_webhook::UpdateWebhookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_webhook::UpdateWebhookError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_webhook::UpdateWebhookError> for Error {
    fn from(err: crate::operation::update_webhook::UpdateWebhookError) -> Self {
        match err {
            crate::operation::update_webhook::UpdateWebhookError::WebhookNotFound(inner) => Error::WebhookNotFound(inner),
            crate::operation::update_webhook::UpdateWebhookError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_webhook::UpdateWebhookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace::UpdateWorkspaceError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workspace::UpdateWorkspaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::update_workspace::UpdateWorkspaceError> for Error {
    fn from(err: crate::operation::update_workspace::UpdateWorkspaceError) -> Self {
        match err {
            crate::operation::update_workspace::UpdateWorkspaceError::WorkspaceNotFound(inner) => Error::WorkspaceNotFound(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_workspace::UpdateWorkspaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::weight_recompute::WeightRecomputeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::weight_recompute::WeightRecomputeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                        crate::error::sealed_unhandled::Unhandled {
                                            meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                                            source: err.into(),
                                        }
                                    ),
        }
    }
}
impl From<crate::operation::weight_recompute::WeightRecomputeError> for Error {
    fn from(err: crate::operation::weight_recompute::WeightRecomputeError) -> Self {
        match err {
            crate::operation::weight_recompute::WeightRecomputeError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::weight_recompute::WeightRecomputeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::FunctionNotFound(inner) => inner.source(),
            Error::InternalServerError(inner) => inner.source(),
            Error::OrganisationNotFound(inner) => inner.source(),
            Error::ResourceNotFound(inner) => inner.source(),
            Error::TypeTemplatesNotFound(inner) => inner.source(),
            Error::WebhookNotFound(inner) => inner.source(),
            Error::WorkspaceNotFound(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source)
        }
    }
}

