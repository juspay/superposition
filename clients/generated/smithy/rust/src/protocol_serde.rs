// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(result: ::std::result::Result<O, E>) -> ::std::result::Result<::aws_smithy_runtime_api::client::interceptors::context::Output, ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>>
                where
                    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
                    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
                {
                    result.map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
                        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
                        .map_err(::std::convert::Into::into)
                }

pub fn parse_http_error_metadata(_response_status: u16, response_headers: &::aws_smithy_runtime_api::http::Headers, response_body: &[u8]) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
                    crate::json_errors::parse_error_metadata(response_body, response_headers)
                }

pub(crate) mod shape_applicable_variants;

pub(crate) mod shape_bulk_operation;

pub fn rest_json_unset_struct_payload() -> ::std::vec::Vec<u8> {
                    b"{}"[..].into()
                }

pub(crate) mod shape_bulk_operation_input;

pub(crate) mod shape_conclude_experiment;

pub(crate) mod shape_create_context;

pub(crate) mod shape_create_default_config;

pub(crate) mod shape_create_dimension;

pub(crate) mod shape_create_experiment;

pub(crate) mod shape_create_function;

pub(crate) mod shape_create_organisation;

pub(crate) mod shape_create_type_templates;

pub(crate) mod shape_create_webhook;

pub(crate) mod shape_create_workspace;

pub(crate) mod shape_delete_context;

pub(crate) mod shape_delete_default_config;

pub(crate) mod shape_delete_dimension;

pub(crate) mod shape_delete_function;

pub(crate) mod shape_delete_type_templates;

pub(crate) mod shape_discard_experiment;

pub(crate) mod shape_get_config;

pub(crate) mod shape_get_config_fast;

pub(crate) mod shape_get_context;

pub(crate) mod shape_get_context_from_condition;

pub fn serialize_document(input: &::aws_smithy_types::Document) -> ::std::vec::Vec<u8> {
                    let mut out = String::new();
                    ::aws_smithy_json::serialize::JsonValueWriter::new(&mut out).document(input);
                    out.into_bytes()
                }

pub(crate) mod shape_get_context_from_condition_input;

pub(crate) mod shape_get_experiment;

pub(crate) mod shape_get_function;

pub(crate) mod shape_get_organisation;

pub(crate) mod shape_get_resolved_config;

pub(crate) mod shape_get_type_templates_list;

pub(crate) mod shape_get_webhook;

pub(crate) mod shape_list_audit_logs;

pub(crate) mod shape_list_contexts;

pub(crate) mod shape_list_default_configs;

pub(crate) mod shape_list_dimensions;

pub(crate) mod shape_list_experiment;

pub(crate) mod shape_list_function;

pub(crate) mod shape_list_organisation;

pub(crate) mod shape_list_versions;

pub(crate) mod shape_list_webhook;

pub(crate) mod shape_list_workspace;

pub(crate) mod shape_move_context;

pub(crate) mod shape_pause_experiment;

pub(crate) mod shape_publish;

pub(crate) mod shape_ramp_experiment;

pub(crate) mod shape_resume_experiment;

pub(crate) mod shape_test;

pub fn rest_json_unset_union_payload() -> ::std::vec::Vec<u8> { ::std::vec::Vec::new() }

pub(crate) mod shape_test_input;

pub(crate) mod shape_update_default_config;

pub(crate) mod shape_update_dimension;

pub(crate) mod shape_update_function;

pub(crate) mod shape_update_organisation;

pub(crate) mod shape_update_override;

pub(crate) mod shape_update_override_input;

pub(crate) mod shape_update_overrides_experiment;

pub(crate) mod shape_update_type_templates;

pub(crate) mod shape_update_webhook;

pub(crate) mod shape_update_workspace;

pub(crate) mod shape_weight_recompute;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
                    if data.is_empty() {
                        b"{}"
                    } else {
                        data
                    }
                }

pub(crate) mod shape_applicable_variants_input;

pub(crate) mod shape_bulk_operation_output;

pub(crate) mod shape_conclude_experiment_input;

pub(crate) mod shape_create_context_input;

pub(crate) mod shape_create_default_config_input;

pub(crate) mod shape_create_dimension_input;

pub(crate) mod shape_create_experiment_input;

pub(crate) mod shape_create_function_input;

pub(crate) mod shape_create_organisation_input;

pub(crate) mod shape_create_type_templates_input;

pub(crate) mod shape_create_webhook_input;

pub(crate) mod shape_create_workspace_input;

pub(crate) mod shape_discard_experiment_input;

pub(crate) mod shape_function_not_found;

pub(crate) mod shape_get_config_fast_output;

pub(crate) mod shape_get_config_input;

pub(crate) mod shape_get_config_output;

pub(crate) mod shape_get_resolved_config_input;

pub(crate) mod shape_get_resolved_config_output;

pub(crate) mod shape_internal_server_error;

pub(crate) mod shape_move_context_input;

pub(crate) mod shape_organisation_not_found;

pub(crate) mod shape_pause_experiment_input;

pub(crate) mod shape_ramp_experiment_input;

pub(crate) mod shape_resource_not_found;

pub(crate) mod shape_resume_experiment_input;

pub(crate) mod shape_type_templates_not_found;

pub(crate) mod shape_update_default_config_input;

pub(crate) mod shape_update_dimension_input;

pub(crate) mod shape_update_function_input;

pub(crate) mod shape_update_organisation_input;

pub(crate) mod shape_update_overrides_experiment_input;

pub(crate) mod shape_update_type_templates_input;

pub(crate) mod shape_update_webhook_input;

pub(crate) mod shape_update_workspace_input;

pub(crate) mod shape_webhook_not_found;

pub(crate) mod shape_workspace_not_found;

pub(crate) mod shape_audit_log_list;

pub(crate) mod shape_bulk_operation_out;

pub(crate) mod shape_bulk_operation_req;

pub(crate) mod shape_condition;

pub(crate) mod shape_context_list;

pub(crate) mod shape_dependencies;

pub(crate) mod shape_dependents;

pub(crate) mod shape_dimension_ext_list;

pub(crate) mod shape_document;

pub(crate) mod shape_events;

pub(crate) mod shape_experiment_list;

pub(crate) mod shape_function_execution_request;

pub(crate) mod shape_function_list_response;

pub(crate) mod shape_list_context_out;

pub(crate) mod shape_list_default_config_out;

pub(crate) mod shape_list_mandatory_dimensions;

pub(crate) mod shape_list_override_keys;

pub(crate) mod shape_list_variant;

pub(crate) mod shape_list_versions_out;

pub(crate) mod shape_object;

pub(crate) mod shape_organisation_list;

pub(crate) mod shape_overrides;

pub(crate) mod shape_overrides_map;

pub(crate) mod shape_type_templates_list;

pub(crate) mod shape_update_context_override_request;

pub(crate) mod shape_variant;

pub(crate) mod shape_variant_update_request;

pub(crate) mod shape_webhook_list;

pub(crate) mod shape_weight_recompute_responses;

pub(crate) mod shape_workspace_list;

pub(crate) mod shape_audit_log_full;

pub(crate) mod shape_autocomplete_function_request;

pub(crate) mod shape_context_action;

pub(crate) mod shape_context_full;

pub(crate) mod shape_context_identifier;

pub(crate) mod shape_context_partial;

pub(crate) mod shape_default_config_full;

pub(crate) mod shape_dimension_ext;

pub(crate) mod shape_experiment_response;

pub(crate) mod shape_function_response;

pub(crate) mod shape_list_versions_member;

pub(crate) mod shape_organisation_response;

pub(crate) mod shape_type_templates_response;

pub(crate) mod shape_validate_function_request;

pub(crate) mod shape_webhook_response;

pub(crate) mod shape_weight_recompute_response;

pub(crate) mod shape_workspace_response;

pub(crate) mod shape_bulk_operation_out_list;

pub(crate) mod shape_context_move;

pub(crate) mod shape_context_put;

pub(crate) mod shape_override_with_keys;

pub(crate) mod shape_string_list;

pub(crate) mod shape_context_action_out;

pub(crate) mod shape_context_move_out;

pub(crate) mod shape_context_put_out;

