// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrganisationResponse  {
    #[allow(missing_docs)] // documentation missing in model
    pub id: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub country_code: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub contact_email: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub contact_phone: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub created_by: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub admin_email: ::std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    pub status: crate::types::OrgStatus,
    #[allow(missing_docs)] // documentation missing in model
    pub sector: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub created_at: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub updated_at: ::aws_smithy_types::DateTime,
    #[allow(missing_docs)] // documentation missing in model
    pub updated_by: ::std::string::String,
}
impl  OrganisationResponse  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> &str {
        use std::ops::Deref; self.id.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> &str {
        use std::ops::Deref; self.name.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn country_code(&self) -> ::std::option::Option<&str> {
        self.country_code.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn contact_email(&self) -> ::std::option::Option<&str> {
        self.contact_email.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn contact_phone(&self) -> ::std::option::Option<&str> {
        self.contact_phone.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn created_by(&self) -> &str {
        use std::ops::Deref; self.created_by.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn admin_email(&self) -> &str {
        use std::ops::Deref; self.admin_email.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> &crate::types::OrgStatus {
        &self.status
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sector(&self) -> ::std::option::Option<&str> {
        self.sector.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn updated_by(&self) -> &str {
        use std::ops::Deref; self.updated_by.deref()
    }
}
impl OrganisationResponse {
    /// Creates a new builder-style object to manufacture [`OrganisationResponse`](crate::types::OrganisationResponse).
    pub fn builder() -> crate::types::builders::OrganisationResponseBuilder {
        crate::types::builders::OrganisationResponseBuilder::default()
    }
}

/// A builder for [`OrganisationResponse`](crate::types::OrganisationResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OrganisationResponseBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) country_code: ::std::option::Option<::std::string::String>,
    pub(crate) contact_email: ::std::option::Option<::std::string::String>,
    pub(crate) contact_phone: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) admin_email: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::OrgStatus>,
    pub(crate) sector: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
}
impl OrganisationResponseBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country_code = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country_code = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.country_code
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn contact_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_email = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_contact_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_email = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_contact_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_email
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn contact_phone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_phone = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_contact_phone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_phone = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_contact_phone(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_phone
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn admin_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.admin_email = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_admin_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.admin_email = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_admin_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.admin_email
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn status(mut self, input: crate::types::OrgStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OrgStatus>) -> Self {
        self.status = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OrgStatus> {
        &self.status
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn sector(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sector = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_sector(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sector = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_sector(&self) -> &::std::option::Option<::std::string::String> {
        &self.sector
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// Consumes the builder and constructs a [`OrganisationResponse`](crate::types::OrganisationResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::OrganisationResponseBuilder::id)
    /// - [`name`](crate::types::builders::OrganisationResponseBuilder::name)
    /// - [`created_by`](crate::types::builders::OrganisationResponseBuilder::created_by)
    /// - [`admin_email`](crate::types::builders::OrganisationResponseBuilder::admin_email)
    /// - [`status`](crate::types::builders::OrganisationResponseBuilder::status)
    /// - [`created_at`](crate::types::builders::OrganisationResponseBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::OrganisationResponseBuilder::updated_at)
    /// - [`updated_by`](crate::types::builders::OrganisationResponseBuilder::updated_by)
    pub fn build(self) -> ::std::result::Result<crate::types::OrganisationResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::types::OrganisationResponse {
                id: self.id
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                name: self.name
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("name", "name was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                country_code: self.country_code
                ,
                contact_email: self.contact_email
                ,
                contact_phone: self.contact_phone
                ,
                created_by: self.created_by
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("created_by", "created_by was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                admin_email: self.admin_email
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("admin_email", "admin_email was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                status: self.status
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("status", "status was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                sector: self.sector
                ,
                created_at: self.created_at
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("created_at", "created_at was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                updated_at: self.updated_at
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("updated_at", "updated_at was not specified but it is required when building OrganisationResponse")
                    )?
                ,
                updated_by: self.updated_by
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("updated_by", "updated_by was not specified but it is required when building OrganisationResponse")
                    )?
                ,
            }
        )
    }
}

