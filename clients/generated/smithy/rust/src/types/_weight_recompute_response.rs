// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WeightRecomputeResponse  {
    #[allow(missing_docs)] // documentation missing in model
    pub id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub condition: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>,
    #[allow(missing_docs)] // documentation missing in model
    pub old_weight: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub new_weight: ::std::option::Option<::std::string::String>,
}
impl  WeightRecomputeResponse  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn condition(&self) -> ::std::option::Option<&::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
        self.condition.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn old_weight(&self) -> ::std::option::Option<&str> {
        self.old_weight.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn new_weight(&self) -> ::std::option::Option<&str> {
        self.new_weight.as_deref()
    }
}
impl WeightRecomputeResponse {
    /// Creates a new builder-style object to manufacture [`WeightRecomputeResponse`](crate::types::WeightRecomputeResponse).
    pub fn builder() -> crate::types::builders::WeightRecomputeResponseBuilder {
        crate::types::builders::WeightRecomputeResponseBuilder::default()
    }
}

/// A builder for [`WeightRecomputeResponse`](crate::types::WeightRecomputeResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WeightRecomputeResponseBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>,
    pub(crate) old_weight: ::std::option::Option<::std::string::String>,
    pub(crate) new_weight: ::std::option::Option<::std::string::String>,
}
impl WeightRecomputeResponseBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Adds a key-value pair to `condition`.
    ///
    /// To override the contents of this collection use [`set_condition`](Self::set_condition).
    ///
    pub fn condition(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        let mut hash_map = self.condition.unwrap_or_default();
                        hash_map.insert(k.into(), v);
                        self.condition = ::std::option::Option::Some(hash_map);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_condition(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>) -> Self {
        self.condition = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_condition(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
        &self.condition
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn old_weight(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.old_weight = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_old_weight(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.old_weight = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_old_weight(&self) -> &::std::option::Option<::std::string::String> {
        &self.old_weight
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn new_weight(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_weight = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_new_weight(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_weight = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_new_weight(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_weight
    }
    /// Consumes the builder and constructs a [`WeightRecomputeResponse`](crate::types::WeightRecomputeResponse).
    pub fn build(self) -> crate::types::WeightRecomputeResponse {
        crate::types::WeightRecomputeResponse {
            id: self.id
            ,
            condition: self.condition
            ,
            old_weight: self.old_weight
            ,
            new_weight: self.new_weight
            ,
        }
    }
}

