// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ContextAction {
    #[allow(missing_docs)] // documentation missing in model
    Delete(::std::string::String),
    #[allow(missing_docs)] // documentation missing in model
    Move(crate::types::ContextMove),
    #[allow(missing_docs)] // documentation missing in model
    Put(crate::types::ContextPut),
    #[allow(missing_docs)] // documentation missing in model
    Replace(crate::types::ContextPut),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ContextAction {
    /// Tries to convert the enum instance into [`Delete`](crate::types::ContextAction::Delete), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_delete(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ContextAction::Delete(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Delete`](crate::types::ContextAction::Delete).
    pub fn is_delete(&self) -> bool {
        self.as_delete().is_ok()
    }
    /// Tries to convert the enum instance into [`Move`](crate::types::ContextAction::Move), extracting the inner [`ContextMove`](crate::types::ContextMove).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_move(&self) -> ::std::result::Result<&crate::types::ContextMove, &Self> {
        if let ContextAction::Move(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Move`](crate::types::ContextAction::Move).
    pub fn is_move(&self) -> bool {
        self.as_move().is_ok()
    }
    /// Tries to convert the enum instance into [`Put`](crate::types::ContextAction::Put), extracting the inner [`ContextPut`](crate::types::ContextPut).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_put(&self) -> ::std::result::Result<&crate::types::ContextPut, &Self> {
        if let ContextAction::Put(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Put`](crate::types::ContextAction::Put).
    pub fn is_put(&self) -> bool {
        self.as_put().is_ok()
    }
    /// Tries to convert the enum instance into [`Replace`](crate::types::ContextAction::Replace), extracting the inner [`ContextPut`](crate::types::ContextPut).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_replace(&self) -> ::std::result::Result<&crate::types::ContextPut, &Self> {
        if let ContextAction::Replace(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Replace`](crate::types::ContextAction::Replace).
    pub fn is_replace(&self) -> bool {
        self.as_replace().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

