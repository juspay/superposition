// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ExperimentGroupSortOn`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
/// 
/// Here is an example of how you can make a match expression forward-compatible:
/// 
/// ```text
/// # let experimentgroupsorton = unimplemented!();
/// match experimentgroupsorton {
///     ExperimentGroupSortOn::CreatedAt => { /* ... */ },
///     ExperimentGroupSortOn::LastModifiedAt => { /* ... */ },
///     ExperimentGroupSortOn::Name => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `experimentgroupsorton` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ExperimentGroupSortOn::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ExperimentGroupSortOn::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ExperimentGroupSortOn::NewFeature` is defined.
/// Specifically, when `experimentgroupsorton` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ExperimentGroupSortOn::NewFeature` also yielding `"NewFeature"`.
/// 
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// 
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash)]
pub enum ExperimentGroupSortOn {
    /// Sort by creation timestamp.
    CreatedAt,
    /// Sort by last modification timestamp.
    LastModifiedAt,
    /// Sort by name.
    Name,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue)
}
impl ::std::convert::From<&str> for ExperimentGroupSortOn {
                    fn from(s: &str) -> Self {
                        match s {
                            "created_at" => ExperimentGroupSortOn::CreatedAt,
"last_modified_at" => ExperimentGroupSortOn::LastModifiedAt,
"name" => ExperimentGroupSortOn::Name,
other => ExperimentGroupSortOn::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned()))
                        }
                    }
                }
impl ::std::str::FromStr for ExperimentGroupSortOn {
                    type Err = ::std::convert::Infallible;

                    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
                        ::std::result::Result::Ok(ExperimentGroupSortOn::from(s))
                    }
                }
impl ExperimentGroupSortOn {
                /// Returns the `&str` value of the enum member.
                pub fn as_str(&self) -> &str {
                    match self {
    ExperimentGroupSortOn::CreatedAt => "created_at",
    ExperimentGroupSortOn::LastModifiedAt => "last_modified_at",
    ExperimentGroupSortOn::Name => "name",
    ExperimentGroupSortOn::Unknown(value) => value.as_str()
}
                }
                /// Returns all the `&str` representations of the enum members.
                pub const fn values() -> &'static [&'static str] {
                    &["created_at", "last_modified_at", "name"]
                }
            }
impl ::std::convert::AsRef<str> for ExperimentGroupSortOn {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
impl ExperimentGroupSortOn {
                        /// Parses the enum value while disallowing unknown variants.
                        ///
                        /// Unknown variants will result in an error.
                        pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
                            match Self::from(value) {
                                #[allow(deprecated)]
                                Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
                                known => Ok(known),
                            }
                        }
                    }
impl ::std::fmt::Display for ExperimentGroupSortOn {
                        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
                            match self {
                                ExperimentGroupSortOn::CreatedAt => write!(f, "created_at"),
ExperimentGroupSortOn::LastModifiedAt => write!(f, "last_modified_at"),
ExperimentGroupSortOn::Name => write!(f, "name"),
ExperimentGroupSortOn::Unknown(value) => write!(f, "{}", value)
                            }
                        }
                    }

