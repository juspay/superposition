// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspaceNotFound  {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl WorkspaceNotFound {
    /// Returns the error message.
                        pub fn message(&self) -> ::std::option::Option<&str> { self.message.as_deref() }
}
impl ::std::fmt::Display for WorkspaceNotFound {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "WorkspaceNotFound")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
             {
                ::std::write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for WorkspaceNotFound {}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for WorkspaceNotFound {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata { &self.meta }
}
impl WorkspaceNotFound {
    /// Creates a new builder-style object to manufacture [`WorkspaceNotFound`](crate::types::error::WorkspaceNotFound).
    pub fn builder() -> crate::types::error::builders::WorkspaceNotFoundBuilder {
        crate::types::error::builders::WorkspaceNotFoundBuilder::default()
    }
}

/// A builder for [`WorkspaceNotFound`](crate::types::error::WorkspaceNotFound).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkspaceNotFoundBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl WorkspaceNotFoundBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
                                                pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
                                                    self.meta = Some(meta);
                                                    self
                                                }
    
                                                /// Sets error metadata
                                                pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
                                                    self.meta = meta;
                                                    self
                                                }
    /// Consumes the builder and constructs a [`WorkspaceNotFound`](crate::types::error::WorkspaceNotFound).
    pub fn build(self) -> crate::types::error::WorkspaceNotFound {
        crate::types::error::WorkspaceNotFound {
            message: self.message
            ,
            meta: self.meta.unwrap_or_default(),
        }
    }
}

