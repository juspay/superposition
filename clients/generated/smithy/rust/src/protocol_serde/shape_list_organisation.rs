// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_organisation_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::list_organisation::ListOrganisationOutput, crate::operation::list_organisation::ListOrganisationError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::list_organisation::ListOrganisationError::unhandled)?;
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::list_organisation::ListOrganisationError::unhandled(generic))
                            };
    
                            let _error_message = generic.message().map(|msg|msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::operation::list_organisation::ListOrganisationError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                    output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output).map_err(crate::operation::list_organisation::ListOrganisationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        _ => crate::operation::list_organisation::ListOrganisationError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_organisation_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::list_organisation::ListOrganisationOutput, crate::operation::list_organisation::ListOrganisationError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::list_organisation::builders::ListOrganisationOutputBuilder::default();
        output = crate::protocol_serde::shape_list_organisation::de_list_organisation(_response_body, output).map_err(crate::operation::list_organisation::ListOrganisationError::unhandled)?;
        output.build()
    })
}

pub(crate) fn de_list_organisation(value: &[u8], mut builder: crate::operation::list_organisation::builders::ListOrganisationOutputBuilder) -> ::std::result::Result<crate::operation::list_organisation::builders::ListOrganisationOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
                        let tokens = &mut tokens_owned;
                        ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "data" => {
                        builder = builder.set_data(
                            crate::protocol_serde::shape_organisation_list::de_organisation_list(tokens)?
                        );
                    }
                    "total_items" => {
                        builder = builder.set_total_items(
                            ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                                .map(i32::try_from)
                                                .transpose()?
                        );
                    }
                    "total_pages" => {
                        builder = builder.set_total_pages(
                            ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                                .map(i32::try_from)
                                                .transpose()?
                        );
                    }
                    _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?
                }
            }
            other => return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!("expected object key or end object, found: {:?}", other)))
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom("found more JSON tokens after completing parsing"));
    }
    Ok(builder)
}

