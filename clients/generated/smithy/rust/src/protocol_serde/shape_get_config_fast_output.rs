// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_audit_id_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-audit-id");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_config_payload(body: &[u8]) -> std::result::Result<::std::option::Option<::aws_smithy_types::Document>, crate::operation::get_config_fast::GetConfigFastError> {
    (!body.is_empty()).then(||{
        crate::protocol_serde::shape_document::de_document_payload(body).map_err(crate::operation::get_config_fast::GetConfigFastError::unhandled)
    }).transpose()
}

pub(crate) fn de_last_modified_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::aws_smithy_types::DateTime>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("last-modified");
    let var_1: Vec<::aws_smithy_types::DateTime> = ::aws_smithy_http::header::many_dates(headers, ::aws_smithy_types::date_time::Format::DateTimeWithOffset)?
    ;
    if var_1.len() > 1 {
                                Err(::aws_smithy_http::header::ParseError::new(format!("expected one item but found {}", var_1.len())))
                            } else {
                                let mut var_1 = var_1;
                                Ok(var_1.pop())
                            }
}

pub(crate) fn de_version_header(header_map: &::aws_smithy_runtime_api::http::Headers) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-config-version");
    ::aws_smithy_http::header::one_or_none(headers)
}

