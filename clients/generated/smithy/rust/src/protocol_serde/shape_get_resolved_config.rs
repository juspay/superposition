// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_resolved_config_http_error(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::get_resolved_config::GetResolvedConfigOutput, crate::operation::get_resolved_config::GetResolvedConfigError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(crate::operation::get_resolved_config::GetResolvedConfigError::unhandled)?;
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::get_resolved_config::GetResolvedConfigError::unhandled(generic))
                            };
    
                            let _error_message = generic.message().map(|msg|msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::operation::get_resolved_config::GetResolvedConfigError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                    output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output).map_err(crate::operation::get_resolved_config::GetResolvedConfigError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        _ => crate::operation::get_resolved_config::GetResolvedConfigError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_resolved_config_http_response(_response_status: u16, _response_headers: &::aws_smithy_runtime_api::http::Headers, _response_body: &[u8]) -> std::result::Result<crate::operation::get_resolved_config::GetResolvedConfigOutput, crate::operation::get_resolved_config::GetResolvedConfigError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_resolved_config::builders::GetResolvedConfigOutputBuilder::default();
        output = output.set_audit_id(
            crate::protocol_serde::shape_get_resolved_config_output::de_audit_id_header(_response_headers)
                                        .map_err(|_|crate::operation::get_resolved_config::GetResolvedConfigError::unhandled("Failed to parse audit_id from header `x-audit-id"))?
        );
        output = output.set_config(
            crate::protocol_serde::shape_get_resolved_config_output::de_config_payload(_response_body)?
        );
        output = output.set_last_modified(
            crate::protocol_serde::shape_get_resolved_config_output::de_last_modified_header(_response_headers)
                                        .map_err(|_|crate::operation::get_resolved_config::GetResolvedConfigError::unhandled("Failed to parse last_modified from header `last-modified"))?
        );
        output = output.set_version(
            crate::protocol_serde::shape_get_resolved_config_output::de_version_header(_response_headers)
                                        .map_err(|_|crate::operation::get_resolved_config::GetResolvedConfigError::unhandled("Failed to parse version from header `x-config-version"))?
        );
        output.build()
    })
}

pub fn ser_get_resolved_config_headers(
                    input: &crate::operation::get_resolved_config::GetResolvedConfigInput,
                    mut builder: ::http::request::Builder
                ) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.workspace_id {
        let formatted_2 = inner_1.as_str();
        let header_value = formatted_2;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("workspace_id", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-tenant", header_value);
    }
    if let ::std::option::Option::Some(inner_3) = &input.org_id {
        let formatted_4 = inner_3.as_str();
        let header_value = formatted_4;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("org_id", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-org-id", header_value);
    }
    if let ::std::option::Option::Some(inner_5) = &input.merge_strategy {
        let formatted_6 = inner_5.as_str();
        let header_value = formatted_6;
                            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                                ::aws_smithy_types::error::operation::BuildError::invalid_field("merge_strategy", format!(
                                "`{}` cannot be used as a header value: {}",
                                &header_value,
                                err
                            ))
                            })?;
                            builder = builder.header("x-merge-strategy", header_value);
    }
    Ok(builder)
}

pub fn ser_get_resolved_config_input(input: &crate::operation::get_resolved_config::GetResolvedConfigInput) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_get_resolved_config_input::ser_get_resolved_config_input_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

