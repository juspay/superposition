// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_experiment_input_input(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::operation::create_experiment::CreateExperimentInput,
                    ) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.change_reason {
        object.key("change_reason").string(var_1.as_str());
    }
    if let Some(var_2) = &input.context {
        #[allow(unused_mut)]
        let mut object_3 = object.key("context").start_object();
        for (key_4, value_5) in var_2 {
             {
                object_3.key(key_4.as_str()).document(value_5);
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.experiment_type {
        object.key("experiment_type").string(var_7.as_str());
    }
    if let Some(var_8) = &input.name {
        object.key("name").string(var_8.as_str());
    }
    if let Some(var_9) = &input.variants {
        let mut array_10 = object.key("variants").start_array();
        for item_11 in var_9 {
             {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_variant::ser_variant(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

