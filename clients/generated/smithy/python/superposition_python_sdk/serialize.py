# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import AsyncIterable
from urllib.parse import quote as urlquote

from smithy_core import URI as _URI
from smithy_core.aio.types import AsyncBytesReader, SeekableAsyncBytesReader
from smithy_core.types import TimestampFormat
from smithy_core.utils import ensure_utc, serialize_rfc3339
from smithy_http import Field, Fields
from smithy_http.aio import HTTPRequest as _HTTPRequest
from smithy_http.aio.interfaces import HTTPRequest
from smithy_http.utils import join_query_params
from smithy_json import JSONCodec

from .config import Config
from .models import (
    AddMembersToGroupInput,
    ApplicableVariantsInput,
    BulkOperationInput,
    ConcludeExperimentInput,
    CreateContextInput,
    CreateDefaultConfigInput,
    CreateDimensionInput,
    CreateExperimentGroupInput,
    CreateExperimentInput,
    CreateFunctionInput,
    CreateOrganisationInput,
    CreateTypeTemplatesInput,
    CreateWebhookInput,
    CreateWorkspaceInput,
    DeleteContextInput,
    DeleteDefaultConfigInput,
    DeleteDimensionInput,
    DeleteExperimentGroupInput,
    DeleteFunctionInput,
    DeleteTypeTemplatesInput,
    DiscardExperimentInput,
    GetConfigFastInput,
    GetConfigInput,
    GetContextFromConditionInput,
    GetContextInput,
    GetDimensionInput,
    GetExperimentGroupInput,
    GetExperimentInput,
    GetFunctionInput,
    GetOrganisationInput,
    GetResolvedConfigInput,
    GetTypeTemplatesListInput,
    GetWebhookInput,
    ListAuditLogsInput,
    ListContextsInput,
    ListDefaultConfigsInput,
    ListDimensionsInput,
    ListExperimentGroupsInput,
    ListExperimentInput,
    ListFunctionInput,
    ListOrganisationInput,
    ListVersionsInput,
    ListWebhookInput,
    ListWorkspaceInput,
    MoveContextInput,
    PauseExperimentInput,
    PublishInput,
    RampExperimentInput,
    RemoveMembersFromGroupInput,
    ResumeExperimentInput,
    ServiceError,
    TestInput,
    UpdateDefaultConfigInput,
    UpdateDimensionInput,
    UpdateExperimentGroupInput,
    UpdateFunctionInput,
    UpdateOrganisationInput,
    UpdateOverrideInput,
    UpdateOverridesExperimentInput,
    UpdateTypeTemplatesInput,
    UpdateWebhookInput,
    UpdateWorkspaceInput,
    WeightRecomputeInput,
)


async def _serialize_add_members_to_group(input: AddMembersToGroupInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiment-groups/{id}/add-members".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_applicable_variants(input: ApplicableVariantsInput, config: Config) -> HTTPRequest:
    path = "/experiments/applicable-variants"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_bulk_operation(input: BulkOperationInput, config: Config) -> HTTPRequest:
    path = "/context/bulk-operations"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    content_length: int = 0
    if input.bulk_operation is not None:
        codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
        content = codec.serialize(input.bulk_operation)

        content_length = len(content)
        body = SeekableAsyncBytesReader(content)
    else:
        content_length = 2
        body = SeekableAsyncBytesReader(b"{}")

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    if input.config_tags:
        headers.extend(Fields([Field(name="x-config-tags", values=[input.config_tags])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_conclude_experiment(input: ConcludeExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}/conclude".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_create_context(input: CreateContextInput, config: Config) -> HTTPRequest:
    path = "/context"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    if input.config_tags:
        headers.extend(Fields([Field(name="x-config-tags", values=[input.config_tags])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_create_default_config(input: CreateDefaultConfigInput, config: Config) -> HTTPRequest:
    path = "/default-config"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_dimension(input: CreateDimensionInput, config: Config) -> HTTPRequest:
    path = "/dimension"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_experiment(input: CreateExperimentInput, config: Config) -> HTTPRequest:
    path = "/experiments"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_experiment_group(input: CreateExperimentGroupInput, config: Config) -> HTTPRequest:
    path = "/experiment-groups"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_function(input: CreateFunctionInput, config: Config) -> HTTPRequest:
    path = "/function"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_organisation(input: CreateOrganisationInput, config: Config) -> HTTPRequest:
    path = "/superposition/organisations"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_type_templates(input: CreateTypeTemplatesInput, config: Config) -> HTTPRequest:
    path = "/types"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_webhook(input: CreateWebhookInput, config: Config) -> HTTPRequest:
    path = "/webhook"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_create_workspace(input: CreateWorkspaceInput, config: Config) -> HTTPRequest:
    path = "/workspaces"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_delete_context(input: DeleteContextInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/context/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    if input.config_tags:
        headers.extend(Fields([Field(name="x-config-tags", values=[input.config_tags])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="DELETE",
        fields=headers,
        body=body,
    )

async def _serialize_delete_default_config(input: DeleteDefaultConfigInput, config: Config) -> HTTPRequest:
    if not input.key:
        raise ServiceError("key must not be empty.")

    path = "/default-config/{key}".format(
        key=urlquote(input.key, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="DELETE",
        fields=headers,
        body=body,
    )

async def _serialize_delete_dimension(input: DeleteDimensionInput, config: Config) -> HTTPRequest:
    if not input.dimension:
        raise ServiceError("dimension must not be empty.")

    path = "/dimension/{dimension}".format(
        dimension=urlquote(input.dimension, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="DELETE",
        fields=headers,
        body=body,
    )

async def _serialize_delete_experiment_group(input: DeleteExperimentGroupInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiment-groups/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="DELETE",
        fields=headers,
        body=body,
    )

async def _serialize_delete_function(input: DeleteFunctionInput, config: Config) -> HTTPRequest:
    if not input.function_name:
        raise ServiceError("function_name must not be empty.")

    path = "/function/{function_name}".format(
        function_name=urlquote(input.function_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="DELETE",
        fields=headers,
        body=body,
    )

async def _serialize_delete_type_templates(input: DeleteTypeTemplatesInput, config: Config) -> HTTPRequest:
    if not input.type_name:
        raise ServiceError("type_name must not be empty.")

    path = "/types/{type_name}".format(
        type_name=urlquote(input.type_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="DELETE",
        fields=headers,
        body=body,
    )

async def _serialize_discard_experiment(input: DiscardExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}/discard".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_get_config(input: GetConfigInput, config: Config) -> HTTPRequest:
    path = "/config"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.prefix is not None:
        query_params.append(("prefix", input.prefix))
    if input.version is not None:
        query_params.append(("version", input.version))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_get_config_fast(input: GetConfigFastInput, config: Config) -> HTTPRequest:
    path = "/config/fast"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_context(input: GetContextInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/context/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_context_from_condition(input: GetContextFromConditionInput, config: Config) -> HTTPRequest:
    path = "/context/get"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    content_length: int = 0
    if input.context is not None:
        codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
        content = codec.serialize(input.context)

        content_length = len(content)
        body = SeekableAsyncBytesReader(content)
    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_get_dimension(input: GetDimensionInput, config: Config) -> HTTPRequest:
    if not input.dimension:
        raise ServiceError("dimension must not be empty.")

    path = "/dimension/{dimension}".format(
        dimension=urlquote(input.dimension, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_experiment(input: GetExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_experiment_group(input: GetExperimentGroupInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiment-groups/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_function(input: GetFunctionInput, config: Config) -> HTTPRequest:
    if not input.function_name:
        raise ServiceError("function_name must not be empty.")

    path = "/function/{function_name}".format(
        function_name=urlquote(input.function_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_organisation(input: GetOrganisationInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/superposition/organisations/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_resolved_config(input: GetResolvedConfigInput, config: Config) -> HTTPRequest:
    path = "/config/resolve"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.prefix is not None:
        query_params.append(("prefix", input.prefix))
    if input.version is not None:
        query_params.append(("version", input.version))
    if input.show_reasoning is not None:
        query_params.append(("show_reasoning", ('true' if input.show_reasoning else 'false')))
    if input.context_id is not None:
        query_params.append(("context_id", input.context_id))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    if input.merge_strategy:
        headers.extend(Fields([Field(name="x-merge-strategy", values=[input.merge_strategy])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="POST",
        fields=headers,
        body=body,
    )

async def _serialize_get_type_templates_list(input: GetTypeTemplatesListInput, config: Config) -> HTTPRequest:
    path = "/types"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_get_webhook(input: GetWebhookInput, config: Config) -> HTTPRequest:
    if not input.name:
        raise ServiceError("name must not be empty.")

    path = "/webhook/{name}".format(
        name=urlquote(input.name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_audit_logs(input: ListAuditLogsInput, config: Config) -> HTTPRequest:
    path = "/audit"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))
    if input.from_date is not None:
        query_params.append(("from_date", serialize_rfc3339(ensure_utc(input.from_date))))
    if input.to_date is not None:
        query_params.append(("to_date", serialize_rfc3339(ensure_utc(input.to_date))))
    if input.tables is not None:
        query_params.append(("table", input.tables))
    if input.action is not None:
        query_params.append(("action", input.action))
    if input.username is not None:
        query_params.append(("username", input.username))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_contexts(input: ListContextsInput, config: Config) -> HTTPRequest:
    path = "/context/list"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.page is not None:
        query_params.append(("page", str(input.page)))
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.prefix is not None:
        query_params.append(("prefix", input.prefix))
    if input.sort_on is not None:
        query_params.append(("sort_on", input.sort_on))
    if input.sort_by is not None:
        query_params.append(("sort_by", input.sort_by))
    if input.created_by is not None:
        query_params.append(("created_by", input.created_by))
    if input.last_modified_by is not None:
        query_params.append(("last_modified_by", input.last_modified_by))
    if input.plaintext is not None:
        query_params.append(("plaintext", input.plaintext))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_default_configs(input: ListDefaultConfigsInput, config: Config) -> HTTPRequest:
    path = "/default-config"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_dimensions(input: ListDimensionsInput, config: Config) -> HTTPRequest:
    path = "/dimension"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_experiment(input: ListExperimentInput, config: Config) -> HTTPRequest:
    path = "/experiments"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.page is not None:
        query_params.append(("page", str(input.page)))
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.all is not None:
        query_params.append(("all", ('true' if input.all else 'false')))
    if input.status is not None:
        query_params.append(("status", input.status))
    if input.from_date is not None:
        query_params.append(("from_date", serialize_rfc3339(ensure_utc(input.from_date))))
    if input.to_date is not None:
        query_params.append(("to_date", serialize_rfc3339(ensure_utc(input.to_date))))
    if input.experiment_name is not None:
        query_params.append(("experiment_name", input.experiment_name))
    if input.experiment_ids is not None:
        query_params.append(("experiment_ids", input.experiment_ids))
    if input.created_by is not None:
        query_params.append(("created_by", input.created_by))
    if input.context_query is not None:
        query_params.append(("context", input.context_query))
    if input.sort_on is not None:
        query_params.append(("sort_on", input.sort_on))
    if input.sort_by is not None:
        query_params.append(("sort_by", input.sort_by))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_experiment_groups(input: ListExperimentGroupsInput, config: Config) -> HTTPRequest:
    path = "/experiment-groups"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.page is not None:
        query_params.append(("page", str(input.page)))
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.name is not None:
        query_params.append(("name", input.name))
    if input.created_by is not None:
        query_params.append(("created_by", input.created_by))
    if input.last_modified_by is not None:
        query_params.append(("last_modified_by", input.last_modified_by))
    if input.sort_on is not None:
        query_params.append(("sort_on", input.sort_on))
    if input.sort_by is not None:
        query_params.append(("sort_by", input.sort_by))
    if input.all is not None:
        query_params.append(("all", ('true' if input.all else 'false')))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_function(input: ListFunctionInput, config: Config) -> HTTPRequest:
    path = "/function"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_organisation(input: ListOrganisationInput, config: Config) -> HTTPRequest:
    path = "/superposition/organisations"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_versions(input: ListVersionsInput, config: Config) -> HTTPRequest:
    path = "/config/versions"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_webhook(input: ListWebhookInput, config: Config) -> HTTPRequest:
    path = "/webhook"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_list_workspace(input: ListWorkspaceInput, config: Config) -> HTTPRequest:
    path = "/workspaces"
    query: str = f''

    query_params: list[tuple[str, str | None]] = []
    if input.count is not None:
        query_params.append(("count", str(input.count)))
    if input.page is not None:
        query_params.append(("page", str(input.page)))

    query = join_query_params(params=query_params, prefix=query)

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="GET",
        fields=headers,
        body=body,
    )

async def _serialize_move_context(input: MoveContextInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/context/move/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_pause_experiment(input: PauseExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}/pause".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_publish(input: PublishInput, config: Config) -> HTTPRequest:
    if not input.function_name:
        raise ServiceError("function_name must not be empty.")

    path = "/function/{function_name}/publish".format(
        function_name=urlquote(input.function_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_ramp_experiment(input: RampExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}/ramp".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_remove_members_from_group(input: RemoveMembersFromGroupInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiment-groups/{id}/remove-members".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_resume_experiment(input: ResumeExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}/resume".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_test(input: TestInput, config: Config) -> HTTPRequest:
    if not input.function_name:
        raise ServiceError("function_name must not be empty.")

    if not input.stage:
        raise ServiceError("stage must not be empty.")

    path = "/function/{function_name}/{stage}/test".format(
        function_name=urlquote(input.function_name, safe=''),
        stage=urlquote(input.stage, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    content_length: int = 0
    if input.request is not None:
        codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
        content = codec.serialize(input.request)

        content_length = len(content)
        body = SeekableAsyncBytesReader(content)
    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_default_config(input: UpdateDefaultConfigInput, config: Config) -> HTTPRequest:
    if not input.key:
        raise ServiceError("key must not be empty.")

    path = "/default-config/{key}".format(
        key=urlquote(input.key, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_dimension(input: UpdateDimensionInput, config: Config) -> HTTPRequest:
    if not input.dimension:
        raise ServiceError("dimension must not be empty.")

    path = "/dimension/{dimension}".format(
        dimension=urlquote(input.dimension, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_experiment_group(input: UpdateExperimentGroupInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiment-groups/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_update_function(input: UpdateFunctionInput, config: Config) -> HTTPRequest:
    if not input.function_name:
        raise ServiceError("function_name must not be empty.")

    path = "/function/{function_name}".format(
        function_name=urlquote(input.function_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_update_organisation(input: UpdateOrganisationInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/superposition/organisations/{id}".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_override(input: UpdateOverrideInput, config: Config) -> HTTPRequest:
    path = "/context/overrides"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    content_length: int = 0
    if input.request is not None:
        codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
        content = codec.serialize(input.request)

        content_length = len(content)
        body = SeekableAsyncBytesReader(content)
    else:
        content_length = 2
        body = SeekableAsyncBytesReader(b"{}")

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    if input.config_tags:
        headers.extend(Fields([Field(name="x-config-tags", values=[input.config_tags])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_overrides_experiment(input: UpdateOverridesExperimentInput, config: Config) -> HTTPRequest:
    if not input.id:
        raise ServiceError("id must not be empty.")

    path = "/experiments/{id}/overrides".format(
        id=urlquote(input.id, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_type_templates(input: UpdateTypeTemplatesInput, config: Config) -> HTTPRequest:
    if not input.type_name:
        raise ServiceError("type_name must not be empty.")

    path = "/types/{type_name}".format(
        type_name=urlquote(input.type_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_update_webhook(input: UpdateWebhookInput, config: Config) -> HTTPRequest:
    if not input.name:
        raise ServiceError("name must not be empty.")

    path = "/webhook/{name}".format(
        name=urlquote(input.name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PATCH",
        fields=headers,
        body=body,
    )

async def _serialize_update_workspace(input: UpdateWorkspaceInput, config: Config) -> HTTPRequest:
    if not input.workspace_name:
        raise ServiceError("workspace_name must not be empty.")

    path = "/workspaces/{workspace_name}".format(
        workspace_name=urlquote(input.workspace_name, safe=''),
    )
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    codec = JSONCodec(default_timestamp_format=TimestampFormat.EPOCH_SECONDS)
    content = codec.serialize(input)
    if not content:
        content = b"{}"
    content_length = len(content)
    body = SeekableAsyncBytesReader(content)

    headers = Fields(
        [
            Field(name="Content-Type", values=["application/json"]),
            Field(name="Content-Length", values=[str(content_length)]),

        ]
    )

    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )

async def _serialize_weight_recompute(input: WeightRecomputeInput, config: Config) -> HTTPRequest:
    path = "/context/weight/recompute"
    query: str = f''

    body: AsyncIterable[bytes] = AsyncBytesReader(b'')
    headers = Fields(
        [

        ]
    )

    if input.workspace_id:
        headers.extend(Fields([Field(name="x-tenant", values=[input.workspace_id])]))
    if input.org_id:
        headers.extend(Fields([Field(name="x-org-id", values=[input.org_id])]))
    if input.config_tags:
        headers.extend(Fields([Field(name="x-config-tags", values=[input.config_tags])]))
    return _HTTPRequest(
        destination=_URI(
            host="",
            path=path,
            scheme="https",
            query=query,
        ),
        method="PUT",
        fields=headers,
        body=body,
    )
