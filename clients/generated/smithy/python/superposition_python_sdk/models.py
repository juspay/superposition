# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass
from datetime import datetime
from enum import StrEnum
import logging
from typing import Any, ClassVar, Literal, Self, Union

from smithy_core.deserializers import ShapeDeserializer
from smithy_core.documents import Document, TypeRegistry
from smithy_core.exceptions import SmithyException
from smithy_core.schemas import APIOperation, Schema
from smithy_core.serializers import ShapeSerializer
from smithy_core.shapes import ShapeID

from ._private.schemas import (
    ADD_MEMBERS_TO_GROUP as _SCHEMA_ADD_MEMBERS_TO_GROUP,
    ADD_MEMBERS_TO_GROUP_INPUT as _SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT,
    ADD_MEMBERS_TO_GROUP_OUTPUT as _SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT,
    APPLICABLE_VARIANTS as _SCHEMA_APPLICABLE_VARIANTS,
    APPLICABLE_VARIANTS_INPUT as _SCHEMA_APPLICABLE_VARIANTS_INPUT,
    APPLICABLE_VARIANTS_OUTPUT as _SCHEMA_APPLICABLE_VARIANTS_OUTPUT,
    AUDIT_LOG_FULL as _SCHEMA_AUDIT_LOG_FULL,
    AUTOCOMPLETE_FUNCTION_REQUEST as _SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST,
    BULK_OPERATION as _SCHEMA_BULK_OPERATION,
    BULK_OPERATION_INPUT as _SCHEMA_BULK_OPERATION_INPUT,
    BULK_OPERATION_OUT as _SCHEMA_BULK_OPERATION_OUT,
    BULK_OPERATION_OUTPUT as _SCHEMA_BULK_OPERATION_OUTPUT,
    BULK_OPERATION_REQ as _SCHEMA_BULK_OPERATION_REQ,
    CONCLUDE_EXPERIMENT as _SCHEMA_CONCLUDE_EXPERIMENT,
    CONCLUDE_EXPERIMENT_INPUT as _SCHEMA_CONCLUDE_EXPERIMENT_INPUT,
    CONCLUDE_EXPERIMENT_OUTPUT as _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT,
    CONTEXT_ACTION as _SCHEMA_CONTEXT_ACTION,
    CONTEXT_ACTION_OUT as _SCHEMA_CONTEXT_ACTION_OUT,
    CONTEXT_FULL as _SCHEMA_CONTEXT_FULL,
    CONTEXT_IDENTIFIER as _SCHEMA_CONTEXT_IDENTIFIER,
    CONTEXT_MOVE as _SCHEMA_CONTEXT_MOVE,
    CONTEXT_MOVE_OUT as _SCHEMA_CONTEXT_MOVE_OUT,
    CONTEXT_PARTIAL as _SCHEMA_CONTEXT_PARTIAL,
    CONTEXT_PUT as _SCHEMA_CONTEXT_PUT,
    CONTEXT_PUT_OUT as _SCHEMA_CONTEXT_PUT_OUT,
    CREATE_CONTEXT as _SCHEMA_CREATE_CONTEXT,
    CREATE_CONTEXT_INPUT as _SCHEMA_CREATE_CONTEXT_INPUT,
    CREATE_CONTEXT_OUTPUT as _SCHEMA_CREATE_CONTEXT_OUTPUT,
    CREATE_DEFAULT_CONFIG as _SCHEMA_CREATE_DEFAULT_CONFIG,
    CREATE_DEFAULT_CONFIG_INPUT as _SCHEMA_CREATE_DEFAULT_CONFIG_INPUT,
    CREATE_DEFAULT_CONFIG_OUTPUT as _SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT,
    CREATE_DIMENSION as _SCHEMA_CREATE_DIMENSION,
    CREATE_DIMENSION_INPUT as _SCHEMA_CREATE_DIMENSION_INPUT,
    CREATE_DIMENSION_OUTPUT as _SCHEMA_CREATE_DIMENSION_OUTPUT,
    CREATE_EXPERIMENT as _SCHEMA_CREATE_EXPERIMENT,
    CREATE_EXPERIMENT_GROUP as _SCHEMA_CREATE_EXPERIMENT_GROUP,
    CREATE_EXPERIMENT_GROUP_INPUT as _SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT,
    CREATE_EXPERIMENT_GROUP_OUTPUT as _SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT,
    CREATE_EXPERIMENT_INPUT as _SCHEMA_CREATE_EXPERIMENT_INPUT,
    CREATE_EXPERIMENT_OUTPUT as _SCHEMA_CREATE_EXPERIMENT_OUTPUT,
    CREATE_FUNCTION as _SCHEMA_CREATE_FUNCTION,
    CREATE_FUNCTION_INPUT as _SCHEMA_CREATE_FUNCTION_INPUT,
    CREATE_FUNCTION_OUTPUT as _SCHEMA_CREATE_FUNCTION_OUTPUT,
    CREATE_ORGANISATION as _SCHEMA_CREATE_ORGANISATION,
    CREATE_ORGANISATION_INPUT as _SCHEMA_CREATE_ORGANISATION_INPUT,
    CREATE_ORGANISATION_OUTPUT as _SCHEMA_CREATE_ORGANISATION_OUTPUT,
    CREATE_TYPE_TEMPLATES as _SCHEMA_CREATE_TYPE_TEMPLATES,
    CREATE_TYPE_TEMPLATES_INPUT as _SCHEMA_CREATE_TYPE_TEMPLATES_INPUT,
    CREATE_TYPE_TEMPLATES_OUTPUT as _SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT,
    CREATE_WEBHOOK as _SCHEMA_CREATE_WEBHOOK,
    CREATE_WEBHOOK_INPUT as _SCHEMA_CREATE_WEBHOOK_INPUT,
    CREATE_WEBHOOK_OUTPUT as _SCHEMA_CREATE_WEBHOOK_OUTPUT,
    CREATE_WORKSPACE as _SCHEMA_CREATE_WORKSPACE,
    CREATE_WORKSPACE_INPUT as _SCHEMA_CREATE_WORKSPACE_INPUT,
    CREATE_WORKSPACE_OUTPUT as _SCHEMA_CREATE_WORKSPACE_OUTPUT,
    DEFAULT_CONFIG_FULL as _SCHEMA_DEFAULT_CONFIG_FULL,
    DELETE_CONTEXT as _SCHEMA_DELETE_CONTEXT,
    DELETE_CONTEXT_INPUT as _SCHEMA_DELETE_CONTEXT_INPUT,
    DELETE_CONTEXT_OUTPUT as _SCHEMA_DELETE_CONTEXT_OUTPUT,
    DELETE_DEFAULT_CONFIG as _SCHEMA_DELETE_DEFAULT_CONFIG,
    DELETE_DEFAULT_CONFIG_INPUT as _SCHEMA_DELETE_DEFAULT_CONFIG_INPUT,
    DELETE_DEFAULT_CONFIG_OUTPUT as _SCHEMA_DELETE_DEFAULT_CONFIG_OUTPUT,
    DELETE_DIMENSION as _SCHEMA_DELETE_DIMENSION,
    DELETE_DIMENSION_INPUT as _SCHEMA_DELETE_DIMENSION_INPUT,
    DELETE_DIMENSION_OUTPUT as _SCHEMA_DELETE_DIMENSION_OUTPUT,
    DELETE_EXPERIMENT_GROUP as _SCHEMA_DELETE_EXPERIMENT_GROUP,
    DELETE_EXPERIMENT_GROUP_INPUT as _SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT,
    DELETE_EXPERIMENT_GROUP_OUTPUT as _SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT,
    DELETE_FUNCTION as _SCHEMA_DELETE_FUNCTION,
    DELETE_FUNCTION_INPUT as _SCHEMA_DELETE_FUNCTION_INPUT,
    DELETE_FUNCTION_OUTPUT as _SCHEMA_DELETE_FUNCTION_OUTPUT,
    DELETE_TYPE_TEMPLATES as _SCHEMA_DELETE_TYPE_TEMPLATES,
    DELETE_TYPE_TEMPLATES_INPUT as _SCHEMA_DELETE_TYPE_TEMPLATES_INPUT,
    DELETE_TYPE_TEMPLATES_OUTPUT as _SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT,
    DIMENSION_EXT as _SCHEMA_DIMENSION_EXT,
    DISCARD_EXPERIMENT as _SCHEMA_DISCARD_EXPERIMENT,
    DISCARD_EXPERIMENT_INPUT as _SCHEMA_DISCARD_EXPERIMENT_INPUT,
    DISCARD_EXPERIMENT_OUTPUT as _SCHEMA_DISCARD_EXPERIMENT_OUTPUT,
    EXPERIMENT_GROUP_RESPONSE as _SCHEMA_EXPERIMENT_GROUP_RESPONSE,
    EXPERIMENT_RESPONSE as _SCHEMA_EXPERIMENT_RESPONSE,
    FUNCTION_EXECUTION_REQUEST as _SCHEMA_FUNCTION_EXECUTION_REQUEST,
    FUNCTION_NOT_FOUND as _SCHEMA_FUNCTION_NOT_FOUND,
    FUNCTION_RESPONSE as _SCHEMA_FUNCTION_RESPONSE,
    GET_CONFIG as _SCHEMA_GET_CONFIG,
    GET_CONFIG_FAST as _SCHEMA_GET_CONFIG_FAST,
    GET_CONFIG_FAST_INPUT as _SCHEMA_GET_CONFIG_FAST_INPUT,
    GET_CONFIG_FAST_OUTPUT as _SCHEMA_GET_CONFIG_FAST_OUTPUT,
    GET_CONFIG_INPUT as _SCHEMA_GET_CONFIG_INPUT,
    GET_CONFIG_OUTPUT as _SCHEMA_GET_CONFIG_OUTPUT,
    GET_CONTEXT as _SCHEMA_GET_CONTEXT,
    GET_CONTEXT_FROM_CONDITION as _SCHEMA_GET_CONTEXT_FROM_CONDITION,
    GET_CONTEXT_FROM_CONDITION_INPUT as _SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT,
    GET_CONTEXT_FROM_CONDITION_OUTPUT as _SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT,
    GET_CONTEXT_INPUT as _SCHEMA_GET_CONTEXT_INPUT,
    GET_CONTEXT_OUTPUT as _SCHEMA_GET_CONTEXT_OUTPUT,
    GET_DIMENSION as _SCHEMA_GET_DIMENSION,
    GET_DIMENSION_INPUT as _SCHEMA_GET_DIMENSION_INPUT,
    GET_DIMENSION_OUTPUT as _SCHEMA_GET_DIMENSION_OUTPUT,
    GET_EXPERIMENT as _SCHEMA_GET_EXPERIMENT,
    GET_EXPERIMENT_GROUP as _SCHEMA_GET_EXPERIMENT_GROUP,
    GET_EXPERIMENT_GROUP_INPUT as _SCHEMA_GET_EXPERIMENT_GROUP_INPUT,
    GET_EXPERIMENT_GROUP_OUTPUT as _SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT,
    GET_EXPERIMENT_INPUT as _SCHEMA_GET_EXPERIMENT_INPUT,
    GET_EXPERIMENT_OUTPUT as _SCHEMA_GET_EXPERIMENT_OUTPUT,
    GET_FUNCTION as _SCHEMA_GET_FUNCTION,
    GET_FUNCTION_INPUT as _SCHEMA_GET_FUNCTION_INPUT,
    GET_FUNCTION_OUTPUT as _SCHEMA_GET_FUNCTION_OUTPUT,
    GET_ORGANISATION as _SCHEMA_GET_ORGANISATION,
    GET_ORGANISATION_INPUT as _SCHEMA_GET_ORGANISATION_INPUT,
    GET_ORGANISATION_OUTPUT as _SCHEMA_GET_ORGANISATION_OUTPUT,
    GET_RESOLVED_CONFIG as _SCHEMA_GET_RESOLVED_CONFIG,
    GET_RESOLVED_CONFIG_INPUT as _SCHEMA_GET_RESOLVED_CONFIG_INPUT,
    GET_RESOLVED_CONFIG_OUTPUT as _SCHEMA_GET_RESOLVED_CONFIG_OUTPUT,
    GET_TYPE_TEMPLATES_LIST as _SCHEMA_GET_TYPE_TEMPLATES_LIST,
    GET_TYPE_TEMPLATES_LIST_INPUT as _SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT,
    GET_TYPE_TEMPLATES_LIST_OUTPUT as _SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT,
    GET_WEBHOOK as _SCHEMA_GET_WEBHOOK,
    GET_WEBHOOK_INPUT as _SCHEMA_GET_WEBHOOK_INPUT,
    GET_WEBHOOK_OUTPUT as _SCHEMA_GET_WEBHOOK_OUTPUT,
    INTERNAL_SERVER_ERROR as _SCHEMA_INTERNAL_SERVER_ERROR,
    LIST_AUDIT_LOGS as _SCHEMA_LIST_AUDIT_LOGS,
    LIST_AUDIT_LOGS_INPUT as _SCHEMA_LIST_AUDIT_LOGS_INPUT,
    LIST_AUDIT_LOGS_OUTPUT as _SCHEMA_LIST_AUDIT_LOGS_OUTPUT,
    LIST_CONTEXTS as _SCHEMA_LIST_CONTEXTS,
    LIST_CONTEXTS_INPUT as _SCHEMA_LIST_CONTEXTS_INPUT,
    LIST_CONTEXTS_OUTPUT as _SCHEMA_LIST_CONTEXTS_OUTPUT,
    LIST_DEFAULT_CONFIGS as _SCHEMA_LIST_DEFAULT_CONFIGS,
    LIST_DEFAULT_CONFIGS_INPUT as _SCHEMA_LIST_DEFAULT_CONFIGS_INPUT,
    LIST_DEFAULT_CONFIGS_OUTPUT as _SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT,
    LIST_DIMENSIONS as _SCHEMA_LIST_DIMENSIONS,
    LIST_DIMENSIONS_INPUT as _SCHEMA_LIST_DIMENSIONS_INPUT,
    LIST_DIMENSIONS_OUTPUT as _SCHEMA_LIST_DIMENSIONS_OUTPUT,
    LIST_EXPERIMENT as _SCHEMA_LIST_EXPERIMENT,
    LIST_EXPERIMENT_GROUPS as _SCHEMA_LIST_EXPERIMENT_GROUPS,
    LIST_EXPERIMENT_GROUPS_INPUT as _SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT,
    LIST_EXPERIMENT_GROUPS_OUTPUT as _SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT,
    LIST_EXPERIMENT_INPUT as _SCHEMA_LIST_EXPERIMENT_INPUT,
    LIST_EXPERIMENT_OUTPUT as _SCHEMA_LIST_EXPERIMENT_OUTPUT,
    LIST_FUNCTION as _SCHEMA_LIST_FUNCTION,
    LIST_FUNCTION_INPUT as _SCHEMA_LIST_FUNCTION_INPUT,
    LIST_FUNCTION_OUTPUT as _SCHEMA_LIST_FUNCTION_OUTPUT,
    LIST_ORGANISATION as _SCHEMA_LIST_ORGANISATION,
    LIST_ORGANISATION_INPUT as _SCHEMA_LIST_ORGANISATION_INPUT,
    LIST_ORGANISATION_OUTPUT as _SCHEMA_LIST_ORGANISATION_OUTPUT,
    LIST_VERSIONS as _SCHEMA_LIST_VERSIONS,
    LIST_VERSIONS_INPUT as _SCHEMA_LIST_VERSIONS_INPUT,
    LIST_VERSIONS_MEMBER as _SCHEMA_LIST_VERSIONS_MEMBER,
    LIST_VERSIONS_OUTPUT as _SCHEMA_LIST_VERSIONS_OUTPUT,
    LIST_WEBHOOK as _SCHEMA_LIST_WEBHOOK,
    LIST_WEBHOOK_INPUT as _SCHEMA_LIST_WEBHOOK_INPUT,
    LIST_WEBHOOK_OUTPUT as _SCHEMA_LIST_WEBHOOK_OUTPUT,
    LIST_WORKSPACE as _SCHEMA_LIST_WORKSPACE,
    LIST_WORKSPACE_INPUT as _SCHEMA_LIST_WORKSPACE_INPUT,
    LIST_WORKSPACE_OUTPUT as _SCHEMA_LIST_WORKSPACE_OUTPUT,
    MOVE_CONTEXT as _SCHEMA_MOVE_CONTEXT,
    MOVE_CONTEXT_INPUT as _SCHEMA_MOVE_CONTEXT_INPUT,
    MOVE_CONTEXT_OUTPUT as _SCHEMA_MOVE_CONTEXT_OUTPUT,
    ORGANISATION_NOT_FOUND as _SCHEMA_ORGANISATION_NOT_FOUND,
    ORGANISATION_RESPONSE as _SCHEMA_ORGANISATION_RESPONSE,
    PAUSE_EXPERIMENT as _SCHEMA_PAUSE_EXPERIMENT,
    PAUSE_EXPERIMENT_INPUT as _SCHEMA_PAUSE_EXPERIMENT_INPUT,
    PAUSE_EXPERIMENT_OUTPUT as _SCHEMA_PAUSE_EXPERIMENT_OUTPUT,
    PUBLISH as _SCHEMA_PUBLISH,
    PUBLISH_INPUT as _SCHEMA_PUBLISH_INPUT,
    PUBLISH_OUTPUT as _SCHEMA_PUBLISH_OUTPUT,
    RAMP_EXPERIMENT as _SCHEMA_RAMP_EXPERIMENT,
    RAMP_EXPERIMENT_INPUT as _SCHEMA_RAMP_EXPERIMENT_INPUT,
    RAMP_EXPERIMENT_OUTPUT as _SCHEMA_RAMP_EXPERIMENT_OUTPUT,
    REMOVE_MEMBERS_FROM_GROUP as _SCHEMA_REMOVE_MEMBERS_FROM_GROUP,
    REMOVE_MEMBERS_FROM_GROUP_INPUT as _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT,
    REMOVE_MEMBERS_FROM_GROUP_OUTPUT as _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT,
    RESOURCE_NOT_FOUND as _SCHEMA_RESOURCE_NOT_FOUND,
    RESUME_EXPERIMENT as _SCHEMA_RESUME_EXPERIMENT,
    RESUME_EXPERIMENT_INPUT as _SCHEMA_RESUME_EXPERIMENT_INPUT,
    RESUME_EXPERIMENT_OUTPUT as _SCHEMA_RESUME_EXPERIMENT_OUTPUT,
    TEST as _SCHEMA_TEST,
    TEST_INPUT as _SCHEMA_TEST_INPUT,
    TEST_OUTPUT as _SCHEMA_TEST_OUTPUT,
    TYPE_TEMPLATES_NOT_FOUND as _SCHEMA_TYPE_TEMPLATES_NOT_FOUND,
    TYPE_TEMPLATES_RESPONSE as _SCHEMA_TYPE_TEMPLATES_RESPONSE,
    UPDATE_CONTEXT_OVERRIDE_REQUEST as _SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST,
    UPDATE_DEFAULT_CONFIG as _SCHEMA_UPDATE_DEFAULT_CONFIG,
    UPDATE_DEFAULT_CONFIG_INPUT as _SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT,
    UPDATE_DEFAULT_CONFIG_OUTPUT as _SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT,
    UPDATE_DIMENSION as _SCHEMA_UPDATE_DIMENSION,
    UPDATE_DIMENSION_INPUT as _SCHEMA_UPDATE_DIMENSION_INPUT,
    UPDATE_DIMENSION_OUTPUT as _SCHEMA_UPDATE_DIMENSION_OUTPUT,
    UPDATE_EXPERIMENT_GROUP as _SCHEMA_UPDATE_EXPERIMENT_GROUP,
    UPDATE_EXPERIMENT_GROUP_INPUT as _SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT,
    UPDATE_EXPERIMENT_GROUP_OUTPUT as _SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT,
    UPDATE_FUNCTION as _SCHEMA_UPDATE_FUNCTION,
    UPDATE_FUNCTION_INPUT as _SCHEMA_UPDATE_FUNCTION_INPUT,
    UPDATE_FUNCTION_OUTPUT as _SCHEMA_UPDATE_FUNCTION_OUTPUT,
    UPDATE_ORGANISATION as _SCHEMA_UPDATE_ORGANISATION,
    UPDATE_ORGANISATION_INPUT as _SCHEMA_UPDATE_ORGANISATION_INPUT,
    UPDATE_ORGANISATION_OUTPUT as _SCHEMA_UPDATE_ORGANISATION_OUTPUT,
    UPDATE_OVERRIDE as _SCHEMA_UPDATE_OVERRIDE,
    UPDATE_OVERRIDES_EXPERIMENT as _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT,
    UPDATE_OVERRIDES_EXPERIMENT_INPUT as _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT,
    UPDATE_OVERRIDES_EXPERIMENT_OUTPUT as _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT,
    UPDATE_OVERRIDE_INPUT as _SCHEMA_UPDATE_OVERRIDE_INPUT,
    UPDATE_OVERRIDE_OUTPUT as _SCHEMA_UPDATE_OVERRIDE_OUTPUT,
    UPDATE_TYPE_TEMPLATES as _SCHEMA_UPDATE_TYPE_TEMPLATES,
    UPDATE_TYPE_TEMPLATES_INPUT as _SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT,
    UPDATE_TYPE_TEMPLATES_OUTPUT as _SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT,
    UPDATE_WEBHOOK as _SCHEMA_UPDATE_WEBHOOK,
    UPDATE_WEBHOOK_INPUT as _SCHEMA_UPDATE_WEBHOOK_INPUT,
    UPDATE_WEBHOOK_OUTPUT as _SCHEMA_UPDATE_WEBHOOK_OUTPUT,
    UPDATE_WORKSPACE as _SCHEMA_UPDATE_WORKSPACE,
    UPDATE_WORKSPACE_INPUT as _SCHEMA_UPDATE_WORKSPACE_INPUT,
    UPDATE_WORKSPACE_OUTPUT as _SCHEMA_UPDATE_WORKSPACE_OUTPUT,
    VALIDATE_FUNCTION_REQUEST as _SCHEMA_VALIDATE_FUNCTION_REQUEST,
    VARIANT as _SCHEMA_VARIANT,
    VARIANT_UPDATE_REQUEST as _SCHEMA_VARIANT_UPDATE_REQUEST,
    WEBHOOK_NOT_FOUND as _SCHEMA_WEBHOOK_NOT_FOUND,
    WEBHOOK_RESPONSE as _SCHEMA_WEBHOOK_RESPONSE,
    WEIGHT_RECOMPUTE as _SCHEMA_WEIGHT_RECOMPUTE,
    WEIGHT_RECOMPUTE_INPUT as _SCHEMA_WEIGHT_RECOMPUTE_INPUT,
    WEIGHT_RECOMPUTE_OUTPUT as _SCHEMA_WEIGHT_RECOMPUTE_OUTPUT,
    WEIGHT_RECOMPUTE_RESPONSE as _SCHEMA_WEIGHT_RECOMPUTE_RESPONSE,
    WORKSPACE_NOT_FOUND as _SCHEMA_WORKSPACE_NOT_FOUND,
    WORKSPACE_RESPONSE as _SCHEMA_WORKSPACE_RESPONSE,
)



logger = logging.getLogger(__name__)

class ServiceError(SmithyException):
    """Base error for all errors in the service."""
    pass

@dataclass
class ApiError(ServiceError):
    """Base error for all API errors in the service."""
    code: ClassVar[str]
    fault: ClassVar[Literal["client", "server"]]

    message: str

    def __post_init__(self) -> None:
        super().__init__(self.message)

@dataclass
class UnknownApiError(ApiError):
    """Error representing any unknown api errors."""
    code: ClassVar[str] = 'Unknown'
    fault: ClassVar[Literal["client", "server"]] = "client"

def _serialize_string_list(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_string_list(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class AddMembersToGroupInput:
    """
    Input structure for adding members to an experiment group.

    :param change_reason:
        **[Required]** - Reason for adding these members.

    :param member_experiment_ids:
        **[Required]** - List of experiment IDs to add to this group.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None
    member_experiment_ids: list[str] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["change_reason"], self.change_reason)

        if self.member_experiment_ids is not None:
            _serialize_string_list(serializer, _SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["member_experiment_ids"], self.member_experiment_ids)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["change_reason"])

                case 4:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT.members["member_experiment_ids"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT, consumer=_consumer)
        return kwargs

def _serialize_condition(serializer: ShapeSerializer, schema: Schema, value: dict[str, Document]) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: vs.write_document(value_schema, v))

def _deserialize_condition(deserializer: ShapeDeserializer, schema: Schema) -> dict[str, Document]:
    result: dict[str, Document] = {}
    value_schema = schema.members["value"]
    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = d.read_document(value_schema)
    deserializer.read_map(schema, _read_value)
    return result

@dataclass(kw_only=True)
class AddMembersToGroupOutput:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["context"], self.context)
        serializer.write_integer(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class InternalServerError(ApiError):

    code: ClassVar[str] = "InternalServerError"
    fault: ClassVar[Literal["client", "server"]] = "server"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_INTERNAL_SERVER_ERROR, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.message is not None:
            serializer.write_string(_SCHEMA_INTERNAL_SERVER_ERROR.members["message"], self.message)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["message"] = de.read_string(_SCHEMA_INTERNAL_SERVER_ERROR.members["message"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_INTERNAL_SERVER_ERROR, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ResourceNotFound(ApiError):

    code: ClassVar[str] = "ResourceNotFound"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RESOURCE_NOT_FOUND, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_RESOURCE_NOT_FOUND, consumer=_consumer)
        return kwargs

ADD_MEMBERS_TO_GROUP = APIOperation(
        input = AddMembersToGroupInput,
        output = AddMembersToGroupOutput,
        schema = _SCHEMA_ADD_MEMBERS_TO_GROUP,
        input_schema = _SCHEMA_ADD_MEMBERS_TO_GROUP_INPUT,
        output_schema = _SCHEMA_ADD_MEMBERS_TO_GROUP_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ApplicableVariantsInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    context: dict[str, Document] | None = None
    toss: int | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_APPLICABLE_VARIANTS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context is not None:
            _serialize_condition(serializer, _SCHEMA_APPLICABLE_VARIANTS_INPUT.members["context"], self.context)

        if self.toss is not None:
            serializer.write_integer(_SCHEMA_APPLICABLE_VARIANTS_INPUT.members["toss"], self.toss)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_APPLICABLE_VARIANTS_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_APPLICABLE_VARIANTS_INPUT.members["org_id"])

                case 2:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_APPLICABLE_VARIANTS_INPUT.members["context"])

                case 3:
                    kwargs["toss"] = de.read_integer(_SCHEMA_APPLICABLE_VARIANTS_INPUT.members["toss"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_APPLICABLE_VARIANTS_INPUT, consumer=_consumer)
        return kwargs

class VariantType(StrEnum):
    CONTROL = "CONTROL"
    EXPERIMENTAL = "EXPERIMENTAL"

@dataclass(kw_only=True)
class Variant:

    id: str

    variant_type: str

    overrides: Document

    context_id: str | None = None
    override_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_VARIANT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_VARIANT.members["id"], self.id)
        serializer.write_string(_SCHEMA_VARIANT.members["variant_type"], self.variant_type)
        if self.context_id is not None:
            serializer.write_string(_SCHEMA_VARIANT.members["context_id"], self.context_id)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_VARIANT.members["override_id"], self.override_id)

        serializer.write_document(_SCHEMA_VARIANT.members["overrides"], self.overrides)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_VARIANT.members["id"])

                case 1:
                    kwargs["variant_type"] = de.read_string(_SCHEMA_VARIANT.members["variant_type"])

                case 2:
                    kwargs["context_id"] = de.read_string(_SCHEMA_VARIANT.members["context_id"])

                case 3:
                    kwargs["override_id"] = de.read_string(_SCHEMA_VARIANT.members["override_id"])

                case 4:
                    kwargs["overrides"] = de.read_document(_SCHEMA_VARIANT.members["overrides"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_VARIANT, consumer=_consumer)
        return kwargs

def _serialize_list_variant(serializer: ShapeSerializer, schema: Schema, value: list[Variant]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_list_variant(deserializer: ShapeDeserializer, schema: Schema) -> list[Variant]:
    result: list[Variant] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(Variant.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ApplicableVariantsOutput:

    data: list[Variant]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_APPLICABLE_VARIANTS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        _serialize_list_variant(serializer, _SCHEMA_APPLICABLE_VARIANTS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["data"] = _deserialize_list_variant(de, _SCHEMA_APPLICABLE_VARIANTS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_APPLICABLE_VARIANTS_OUTPUT, consumer=_consumer)
        return kwargs

APPLICABLE_VARIANTS = APIOperation(
        input = ApplicableVariantsInput,
        output = ApplicableVariantsOutput,
        schema = _SCHEMA_APPLICABLE_VARIANTS,
        input_schema = _SCHEMA_APPLICABLE_VARIANTS_INPUT,
        output_schema = _SCHEMA_APPLICABLE_VARIANTS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListAuditLogsInput:
    """

    :param tables:
         Comma serparated list of tables.

    :param action:
         Comma serparated list of actions.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    count: int | None = None
    page: int | None = None
    all: bool | None = None
    from_date: datetime | None = None
    to_date: datetime | None = None
    tables: str | None = None
    action: str | None = None
    username: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_AUDIT_LOGS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["org_id"])

                case 2:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["count"])

                case 3:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["page"])

                case 4:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["all"])

                case 5:
                    kwargs["from_date"] = de.read_timestamp(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["from_date"])

                case 6:
                    kwargs["to_date"] = de.read_timestamp(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["to_date"])

                case 7:
                    kwargs["tables"] = de.read_string(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["tables"])

                case 8:
                    kwargs["action"] = de.read_string(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["action"])

                case 9:
                    kwargs["username"] = de.read_string(_SCHEMA_LIST_AUDIT_LOGS_INPUT.members["username"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_AUDIT_LOGS_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class AuditLogFull:

    table_name: str | None = None
    user_name: str | None = None
    timestamp: datetime | None = None
    action: str | None = None
    original_data: Document | None = None
    new_data: Document | None = None
    query: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_AUDIT_LOG_FULL, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.table_name is not None:
            serializer.write_string(_SCHEMA_AUDIT_LOG_FULL.members["table_name"], self.table_name)

        if self.user_name is not None:
            serializer.write_string(_SCHEMA_AUDIT_LOG_FULL.members["user_name"], self.user_name)

        if self.timestamp is not None:
            serializer.write_timestamp(_SCHEMA_AUDIT_LOG_FULL.members["timestamp"], self.timestamp)

        if self.action is not None:
            serializer.write_string(_SCHEMA_AUDIT_LOG_FULL.members["action"], self.action)

        if self.original_data is not None:
            serializer.write_document(_SCHEMA_AUDIT_LOG_FULL.members["original_data"], self.original_data)

        if self.new_data is not None:
            serializer.write_document(_SCHEMA_AUDIT_LOG_FULL.members["new_data"], self.new_data)

        if self.query is not None:
            serializer.write_string(_SCHEMA_AUDIT_LOG_FULL.members["query"], self.query)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["table_name"] = de.read_string(_SCHEMA_AUDIT_LOG_FULL.members["table_name"])

                case 1:
                    kwargs["user_name"] = de.read_string(_SCHEMA_AUDIT_LOG_FULL.members["user_name"])

                case 2:
                    kwargs["timestamp"] = de.read_timestamp(_SCHEMA_AUDIT_LOG_FULL.members["timestamp"])

                case 3:
                    kwargs["action"] = de.read_string(_SCHEMA_AUDIT_LOG_FULL.members["action"])

                case 4:
                    kwargs["original_data"] = de.read_document(_SCHEMA_AUDIT_LOG_FULL.members["original_data"])

                case 5:
                    kwargs["new_data"] = de.read_document(_SCHEMA_AUDIT_LOG_FULL.members["new_data"])

                case 6:
                    kwargs["query"] = de.read_string(_SCHEMA_AUDIT_LOG_FULL.members["query"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_AUDIT_LOG_FULL, consumer=_consumer)
        return kwargs

def _serialize_audit_log_list(serializer: ShapeSerializer, schema: Schema, value: list[AuditLogFull]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_audit_log_list(deserializer: ShapeDeserializer, schema: Schema) -> list[AuditLogFull]:
    result: list[AuditLogFull] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(AuditLogFull.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListAuditLogsOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[AuditLogFull] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_AUDIT_LOGS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_LIST_AUDIT_LOGS_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_LIST_AUDIT_LOGS_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_audit_log_list(serializer, _SCHEMA_LIST_AUDIT_LOGS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_AUDIT_LOGS_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_AUDIT_LOGS_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_audit_log_list(de, _SCHEMA_LIST_AUDIT_LOGS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_AUDIT_LOGS_OUTPUT, consumer=_consumer)
        return kwargs

LIST_AUDIT_LOGS = APIOperation(
        input = ListAuditLogsInput,
        output = ListAuditLogsOutput,
        schema = _SCHEMA_LIST_AUDIT_LOGS,
        input_schema = _SCHEMA_LIST_AUDIT_LOGS_INPUT,
        output_schema = _SCHEMA_LIST_AUDIT_LOGS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class AutocompleteFunctionRequest:

    name: str | None = None
    prefix: str | None = None
    environment: Document | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.name is not None:
            serializer.write_string(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST.members["name"], self.name)

        if self.prefix is not None:
            serializer.write_string(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST.members["prefix"], self.prefix)

        if self.environment is not None:
            serializer.write_document(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST.members["environment"], self.environment)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["name"] = de.read_string(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST.members["name"])

                case 1:
                    kwargs["prefix"] = de.read_string(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST.members["prefix"])

                case 2:
                    kwargs["environment"] = de.read_document(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST.members["environment"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_AUTOCOMPLETE_FUNCTION_REQUEST, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ContextMove:

    context: dict[str, Document]

    change_reason: str

    id: str | None = None
    description: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_MOVE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE.members["id"], self.id)

        _serialize_condition(serializer, _SCHEMA_CONTEXT_MOVE.members["context"], self.context)
        if self.description is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE.members["description"], self.description)

        serializer.write_string(_SCHEMA_CONTEXT_MOVE.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CONTEXT_MOVE.members["id"])

                case 1:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CONTEXT_MOVE.members["context"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_CONTEXT_MOVE.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONTEXT_MOVE.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONTEXT_MOVE, consumer=_consumer)
        return kwargs

def _serialize_overrides(serializer: ShapeSerializer, schema: Schema, value: dict[str, Document]) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: vs.write_document(value_schema, v))

def _deserialize_overrides(deserializer: ShapeDeserializer, schema: Schema) -> dict[str, Document]:
    result: dict[str, Document] = {}
    value_schema = schema.members["value"]
    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = d.read_document(value_schema)
    deserializer.read_map(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ContextPut:

    context: dict[str, Document]

    override: dict[str, Document]

    change_reason: str

    description: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_PUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        _serialize_condition(serializer, _SCHEMA_CONTEXT_PUT.members["context"], self.context)
        _serialize_overrides(serializer, _SCHEMA_CONTEXT_PUT.members["override"], self.override)
        if self.description is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PUT.members["description"], self.description)

        serializer.write_string(_SCHEMA_CONTEXT_PUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CONTEXT_PUT.members["context"])

                case 1:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_CONTEXT_PUT.members["override"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_CONTEXT_PUT.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONTEXT_PUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONTEXT_PUT, consumer=_consumer)
        return kwargs

@dataclass
class ContextIdentifierId:

    value: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_IDENTIFIER, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CONTEXT_IDENTIFIER.members["id"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=deserializer.read_string(_SCHEMA_CONTEXT_IDENTIFIER.members["id"]))

@dataclass
class ContextIdentifierContext:

    value: dict[str, Document]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_IDENTIFIER, self)

    def serialize_members(self, serializer: ShapeSerializer):
        _serialize_condition(serializer, _SCHEMA_CONTEXT_IDENTIFIER.members["context"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=_deserialize_condition(deserializer, _SCHEMA_CONTEXT_IDENTIFIER.members["context"]))

@dataclass
class ContextIdentifierUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()

ContextIdentifier = Union[ContextIdentifierId | ContextIdentifierContext | ContextIdentifierUnknown]

class _ContextIdentifierDeserializer:
    _result: ContextIdentifier | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> ContextIdentifier:
        self._result = None
        deserializer.read_struct(_SCHEMA_CONTEXT_IDENTIFIER, self._consumer)

        if self._result is None:
            raise SmithyException("Unions must have exactly one value, but found none.")

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(ContextIdentifierId.deserialize(de))

            case 1:
                self._set_result(ContextIdentifierContext.deserialize(de))

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: ContextIdentifier) -> None:
        if self._result is not None:
            raise SmithyException("Unions must have exactly one value, but found more than one.")
        self._result = value

@dataclass(kw_only=True)
class UpdateContextOverrideRequest:

    context: ContextIdentifier

    override: dict[str, Document]

    change_reason: str

    description: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["context"], self.context)
        _serialize_overrides(serializer, _SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["override"], self.override)
        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["description"], self.description)

        serializer.write_string(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["context"] = _ContextIdentifierDeserializer().deserialize(de)

                case 1:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["override"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_CONTEXT_OVERRIDE_REQUEST, consumer=_consumer)
        return kwargs

@dataclass
class ContextActionPUT:

    value: ContextPut

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION.members["PUT"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ContextPut.deserialize(deserializer))

@dataclass
class ContextActionREPLACE:

    value: UpdateContextOverrideRequest

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION.members["REPLACE"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=UpdateContextOverrideRequest.deserialize(deserializer))

@dataclass
class ContextActionDELETE:

    value: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CONTEXT_ACTION.members["DELETE"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=deserializer.read_string(_SCHEMA_CONTEXT_ACTION.members["DELETE"]))

@dataclass
class ContextActionMOVE:

    value: ContextMove

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION.members["MOVE"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ContextMove.deserialize(deserializer))

@dataclass
class ContextActionUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()

ContextAction = Union[ContextActionPUT | ContextActionREPLACE | ContextActionDELETE | ContextActionMOVE | ContextActionUnknown]

class _ContextActionDeserializer:
    _result: ContextAction | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> ContextAction:
        self._result = None
        deserializer.read_struct(_SCHEMA_CONTEXT_ACTION, self._consumer)

        if self._result is None:
            raise SmithyException("Unions must have exactly one value, but found none.")

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(ContextActionPUT.deserialize(de))

            case 1:
                self._set_result(ContextActionREPLACE.deserialize(de))

            case 2:
                self._set_result(ContextActionDELETE.deserialize(de))

            case 3:
                self._set_result(ContextActionMOVE.deserialize(de))

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: ContextAction) -> None:
        if self._result is not None:
            raise SmithyException("Unions must have exactly one value, but found more than one.")
        self._result = value

def _serialize_bulk_operation_list(serializer: ShapeSerializer, schema: Schema, value: list[ContextAction]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_bulk_operation_list(deserializer: ShapeDeserializer, schema: Schema) -> list[ContextAction]:
    result: list[ContextAction] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(_ContextActionDeserializer().deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class BulkOperationReq:

    operations: list[ContextAction] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_BULK_OPERATION_REQ, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.operations is not None:
            _serialize_bulk_operation_list(serializer, _SCHEMA_BULK_OPERATION_REQ.members["operations"], self.operations)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["operations"] = _deserialize_bulk_operation_list(de, _SCHEMA_BULK_OPERATION_REQ.members["operations"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_BULK_OPERATION_REQ, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class BulkOperationInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    config_tags: str | None = None
    bulk_operation: BulkOperationReq | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_BULK_OPERATION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_BULK_OPERATION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_BULK_OPERATION_INPUT.members["org_id"])

                case 2:
                    kwargs["config_tags"] = de.read_string(_SCHEMA_BULK_OPERATION_INPUT.members["config_tags"])

                case 3:
                    kwargs["bulk_operation"] = BulkOperationReq.deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_BULK_OPERATION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ContextMoveOut:

    context_id: str | None = None
    override_id: str | None = None
    weight: str | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_MOVE_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context_id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE_OUT.members["context_id"], self.context_id)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE_OUT.members["override_id"], self.override_id)

        if self.weight is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE_OUT.members["weight"], self.weight)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE_OUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CONTEXT_MOVE_OUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["context_id"] = de.read_string(_SCHEMA_CONTEXT_MOVE_OUT.members["context_id"])

                case 1:
                    kwargs["override_id"] = de.read_string(_SCHEMA_CONTEXT_MOVE_OUT.members["override_id"])

                case 2:
                    kwargs["weight"] = de.read_string(_SCHEMA_CONTEXT_MOVE_OUT.members["weight"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CONTEXT_MOVE_OUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONTEXT_MOVE_OUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONTEXT_MOVE_OUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ContextPutOut:

    context_id: str | None = None
    override_id: str | None = None
    weight: str | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_PUT_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context_id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PUT_OUT.members["context_id"], self.context_id)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PUT_OUT.members["override_id"], self.override_id)

        if self.weight is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PUT_OUT.members["weight"], self.weight)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PUT_OUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PUT_OUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["context_id"] = de.read_string(_SCHEMA_CONTEXT_PUT_OUT.members["context_id"])

                case 1:
                    kwargs["override_id"] = de.read_string(_SCHEMA_CONTEXT_PUT_OUT.members["override_id"])

                case 2:
                    kwargs["weight"] = de.read_string(_SCHEMA_CONTEXT_PUT_OUT.members["weight"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CONTEXT_PUT_OUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONTEXT_PUT_OUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONTEXT_PUT_OUT, consumer=_consumer)
        return kwargs

@dataclass
class ContextActionOutPUT:

    value: ContextPutOut

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT.members["PUT"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ContextPutOut.deserialize(deserializer))

@dataclass
class ContextActionOutREPLACE:

    value: ContextPutOut

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT.members["REPLACE"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ContextPutOut.deserialize(deserializer))

@dataclass
class ContextActionOutDELETE:

    value: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CONTEXT_ACTION_OUT.members["DELETE"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=deserializer.read_string(_SCHEMA_CONTEXT_ACTION_OUT.members["DELETE"]))

@dataclass
class ContextActionOutMOVE:

    value: ContextMoveOut

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_ACTION_OUT.members["MOVE"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ContextMoveOut.deserialize(deserializer))

@dataclass
class ContextActionOutUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()

ContextActionOut = Union[ContextActionOutPUT | ContextActionOutREPLACE | ContextActionOutDELETE | ContextActionOutMOVE | ContextActionOutUnknown]

class _ContextActionOutDeserializer:
    _result: ContextActionOut | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> ContextActionOut:
        self._result = None
        deserializer.read_struct(_SCHEMA_CONTEXT_ACTION_OUT, self._consumer)

        if self._result is None:
            raise SmithyException("Unions must have exactly one value, but found none.")

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(ContextActionOutPUT.deserialize(de))

            case 1:
                self._set_result(ContextActionOutREPLACE.deserialize(de))

            case 2:
                self._set_result(ContextActionOutDELETE.deserialize(de))

            case 3:
                self._set_result(ContextActionOutMOVE.deserialize(de))

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: ContextActionOut) -> None:
        if self._result is not None:
            raise SmithyException("Unions must have exactly one value, but found more than one.")
        self._result = value

def _serialize_bulk_operation_out_list(serializer: ShapeSerializer, schema: Schema, value: list[ContextActionOut]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_bulk_operation_out_list(deserializer: ShapeDeserializer, schema: Schema) -> list[ContextActionOut]:
    result: list[ContextActionOut] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(_ContextActionOutDeserializer().deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class BulkOperationOut:

    output: list[ContextActionOut] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_BULK_OPERATION_OUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.output is not None:
            _serialize_bulk_operation_out_list(serializer, _SCHEMA_BULK_OPERATION_OUT.members["output"], self.output)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["output"] = _deserialize_bulk_operation_out_list(de, _SCHEMA_BULK_OPERATION_OUT.members["output"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_BULK_OPERATION_OUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class BulkOperationOutput:

    bulk_operation_output: BulkOperationOut | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_BULK_OPERATION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["bulk_operation_output"] = BulkOperationOut.deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_BULK_OPERATION_OUTPUT, consumer=_consumer)
        return kwargs

BULK_OPERATION = APIOperation(
        input = BulkOperationInput,
        output = BulkOperationOutput,
        schema = _SCHEMA_BULK_OPERATION,
        input_schema = _SCHEMA_BULK_OPERATION_INPUT,
        output_schema = _SCHEMA_BULK_OPERATION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ConcludeExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    chosen_variant: str | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["chosen_variant"], self.chosen_variant)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["id"])

                case 3:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["chosen_variant"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONCLUDE_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

class ExperimentType(StrEnum):
    DEFAULT = "DEFAULT"
    DELETE_OVERRIDES = "DELETE_OVERRIDES"

def _serialize_list_override_keys(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_list_override_keys(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

class ExperimentStatusType(StrEnum):
    CREATED = "CREATED"
    CONCLUDED = "CONCLUDED"
    INPROGRESS = "INPROGRESS"
    DISCARDED = "DISCARDED"
    PAUSED = "PAUSED"

@dataclass(kw_only=True)
class ConcludeExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

CONCLUDE_EXPERIMENT = APIOperation(
        input = ConcludeExperimentInput,
        output = ConcludeExperimentOutput,
        schema = _SCHEMA_CONCLUDE_EXPERIMENT,
        input_schema = _SCHEMA_CONCLUDE_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_CONCLUDE_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

def _serialize_context_map(serializer: ShapeSerializer, schema: Schema, value: dict[str, Document]) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: vs.write_document(value_schema, v))

def _deserialize_context_map(deserializer: ShapeDeserializer, schema: Schema) -> dict[str, Document]:
    result: dict[str, Document] = {}
    value_schema = schema.members["value"]
    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = d.read_document(value_schema)
    deserializer.read_map(schema, _read_value)
    return result

@dataclass(kw_only=True)
class GetConfigInput:
    """

    :param context:
         Map representing the context. Keys correspond to the names of the dimensions.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    prefix: str | None = None
    version: str | None = None
    context: dict[str, Document] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONFIG_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context is not None:
            _serialize_context_map(serializer, _SCHEMA_GET_CONFIG_INPUT.members["context"], self.context)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_CONFIG_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_CONFIG_INPUT.members["org_id"])

                case 2:
                    kwargs["prefix"] = de.read_string(_SCHEMA_GET_CONFIG_INPUT.members["prefix"])

                case 3:
                    kwargs["version"] = de.read_string(_SCHEMA_GET_CONFIG_INPUT.members["version"])

                case 4:
                    kwargs["context"] = _deserialize_context_map(de, _SCHEMA_GET_CONFIG_INPUT.members["context"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONFIG_INPUT, consumer=_consumer)
        return kwargs

def _serialize_override_with_keys(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_override_with_keys(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ContextPartial:

    id: str | None = None
    condition: dict[str, Document] | None = None
    priority: int | None = None
    weight: int | None = None
    override_with_keys: list[str] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_PARTIAL, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_PARTIAL.members["id"], self.id)

        if self.condition is not None:
            _serialize_condition(serializer, _SCHEMA_CONTEXT_PARTIAL.members["condition"], self.condition)

        if self.priority is not None:
            serializer.write_integer(_SCHEMA_CONTEXT_PARTIAL.members["priority"], self.priority)

        if self.weight is not None:
            serializer.write_integer(_SCHEMA_CONTEXT_PARTIAL.members["weight"], self.weight)

        if self.override_with_keys is not None:
            _serialize_override_with_keys(serializer, _SCHEMA_CONTEXT_PARTIAL.members["override_with_keys"], self.override_with_keys)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CONTEXT_PARTIAL.members["id"])

                case 1:
                    kwargs["condition"] = _deserialize_condition(de, _SCHEMA_CONTEXT_PARTIAL.members["condition"])

                case 2:
                    kwargs["priority"] = de.read_integer(_SCHEMA_CONTEXT_PARTIAL.members["priority"])

                case 3:
                    kwargs["weight"] = de.read_integer(_SCHEMA_CONTEXT_PARTIAL.members["weight"])

                case 4:
                    kwargs["override_with_keys"] = _deserialize_override_with_keys(de, _SCHEMA_CONTEXT_PARTIAL.members["override_with_keys"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONTEXT_PARTIAL, consumer=_consumer)
        return kwargs

def _serialize_context_list(serializer: ShapeSerializer, schema: Schema, value: list[ContextPartial]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_context_list(deserializer: ShapeDeserializer, schema: Schema) -> list[ContextPartial]:
    result: list[ContextPartial] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(ContextPartial.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

def _serialize_object(serializer: ShapeSerializer, schema: Schema, value: dict[str, Document]) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: vs.write_document(value_schema, v))

def _deserialize_object(deserializer: ShapeDeserializer, schema: Schema) -> dict[str, Document]:
    result: dict[str, Document] = {}
    value_schema = schema.members["value"]
    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = d.read_document(value_schema)
    deserializer.read_map(schema, _read_value)
    return result

def _serialize_overrides_map(serializer: ShapeSerializer, schema: Schema, value: dict[str, dict[str, Document]]) -> None:
    with serializer.begin_map(schema, len(value)) as m:
        value_schema = schema.members["value"]
        for k, v in value.items():
            m.entry(k, lambda vs: _serialize_overrides(vs, value_schema, v))

def _deserialize_overrides_map(deserializer: ShapeDeserializer, schema: Schema) -> dict[str, dict[str, Document]]:
    result: dict[str, dict[str, Document]] = {}
    value_schema = schema.members["value"]
    def _read_value(k: str, d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result[k] = _deserialize_overrides(d, value_schema)
    deserializer.read_map(schema, _read_value)
    return result

@dataclass(kw_only=True)
class GetConfigOutput:

    contexts: list[ContextPartial] | None = None
    overrides: dict[str, dict[str, Document]] | None = None
    default_configs: dict[str, Document] | None = None
    version: str | None = None
    last_modified: datetime | None = None
    audit_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONFIG_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.contexts is not None:
            _serialize_context_list(serializer, _SCHEMA_GET_CONFIG_OUTPUT.members["contexts"], self.contexts)

        if self.overrides is not None:
            _serialize_overrides_map(serializer, _SCHEMA_GET_CONFIG_OUTPUT.members["overrides"], self.overrides)

        if self.default_configs is not None:
            _serialize_object(serializer, _SCHEMA_GET_CONFIG_OUTPUT.members["default_configs"], self.default_configs)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["contexts"] = _deserialize_context_list(de, _SCHEMA_GET_CONFIG_OUTPUT.members["contexts"])

                case 1:
                    kwargs["overrides"] = _deserialize_overrides_map(de, _SCHEMA_GET_CONFIG_OUTPUT.members["overrides"])

                case 2:
                    kwargs["default_configs"] = _deserialize_object(de, _SCHEMA_GET_CONFIG_OUTPUT.members["default_configs"])

                case 3:
                    kwargs["version"] = de.read_string(_SCHEMA_GET_CONFIG_OUTPUT.members["version"])

                case 4:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_GET_CONFIG_OUTPUT.members["last_modified"])

                case 5:
                    kwargs["audit_id"] = de.read_string(_SCHEMA_GET_CONFIG_OUTPUT.members["audit_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONFIG_OUTPUT, consumer=_consumer)
        return kwargs

GET_CONFIG = APIOperation(
        input = GetConfigInput,
        output = GetConfigOutput,
        schema = _SCHEMA_GET_CONFIG,
        input_schema = _SCHEMA_GET_CONFIG_INPUT,
        output_schema = _SCHEMA_GET_CONFIG_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetConfigFastInput:

    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONFIG_FAST_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_CONFIG_FAST_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_CONFIG_FAST_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONFIG_FAST_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetConfigFastOutput:

    config: Document | None = None
    version: str | None = None
    last_modified: datetime | None = None
    audit_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONFIG_FAST_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["config"] = de.read_document(_SCHEMA_GET_CONFIG_FAST_OUTPUT.members["config"])

                case 1:
                    kwargs["version"] = de.read_string(_SCHEMA_GET_CONFIG_FAST_OUTPUT.members["version"])

                case 2:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_GET_CONFIG_FAST_OUTPUT.members["last_modified"])

                case 3:
                    kwargs["audit_id"] = de.read_string(_SCHEMA_GET_CONFIG_FAST_OUTPUT.members["audit_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONFIG_FAST_OUTPUT, consumer=_consumer)
        return kwargs

GET_CONFIG_FAST = APIOperation(
        input = GetConfigFastInput,
        output = GetConfigFastOutput,
        schema = _SCHEMA_GET_CONFIG_FAST,
        input_schema = _SCHEMA_GET_CONFIG_FAST_INPUT,
        output_schema = _SCHEMA_GET_CONFIG_FAST_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

class MergeStrategy(StrEnum):
    MERGE = "MERGE"
    REPLACE = "REPLACE"

@dataclass(kw_only=True)
class GetResolvedConfigInput:
    """

    :param context:
         Map representing the context. Keys correspond to the names of the dimensions.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    prefix: str | None = None
    version: str | None = None
    show_reasoning: bool | None = None
    merge_strategy: str | None = None
    context_id: str | None = None
    context: dict[str, Document] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_RESOLVED_CONFIG_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context is not None:
            _serialize_context_map(serializer, _SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["context"], self.context)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["org_id"])

                case 2:
                    kwargs["prefix"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["prefix"])

                case 3:
                    kwargs["version"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["version"])

                case 4:
                    kwargs["show_reasoning"] = de.read_boolean(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["show_reasoning"])

                case 5:
                    kwargs["merge_strategy"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["merge_strategy"])

                case 6:
                    kwargs["context_id"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["context_id"])

                case 7:
                    kwargs["context"] = _deserialize_context_map(de, _SCHEMA_GET_RESOLVED_CONFIG_INPUT.members["context"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_RESOLVED_CONFIG_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetResolvedConfigOutput:

    config: Document | None = None
    version: str | None = None
    last_modified: datetime | None = None
    audit_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_RESOLVED_CONFIG_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["config"] = de.read_document(_SCHEMA_GET_RESOLVED_CONFIG_OUTPUT.members["config"])

                case 1:
                    kwargs["version"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_OUTPUT.members["version"])

                case 2:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_GET_RESOLVED_CONFIG_OUTPUT.members["last_modified"])

                case 3:
                    kwargs["audit_id"] = de.read_string(_SCHEMA_GET_RESOLVED_CONFIG_OUTPUT.members["audit_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_RESOLVED_CONFIG_OUTPUT, consumer=_consumer)
        return kwargs

GET_RESOLVED_CONFIG = APIOperation(
        input = GetResolvedConfigInput,
        output = GetResolvedConfigOutput,
        schema = _SCHEMA_GET_RESOLVED_CONFIG,
        input_schema = _SCHEMA_GET_RESOLVED_CONFIG_INPUT,
        output_schema = _SCHEMA_GET_RESOLVED_CONFIG_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListVersionsInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    count: int | None = None
    page: int | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_VERSIONS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_VERSIONS_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_VERSIONS_INPUT.members["org_id"])

                case 2:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_VERSIONS_INPUT.members["count"])

                case 3:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_VERSIONS_INPUT.members["page"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_VERSIONS_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ListVersionsMember:

    id: str

    config: Document

    config_hash: str

    created_at: datetime

    description: str

    tags: list[str] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_VERSIONS_MEMBER, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_LIST_VERSIONS_MEMBER.members["id"], self.id)
        serializer.write_document(_SCHEMA_LIST_VERSIONS_MEMBER.members["config"], self.config)
        serializer.write_string(_SCHEMA_LIST_VERSIONS_MEMBER.members["config_hash"], self.config_hash)
        serializer.write_timestamp(_SCHEMA_LIST_VERSIONS_MEMBER.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_LIST_VERSIONS_MEMBER.members["description"], self.description)
        if self.tags is not None:
            _serialize_string_list(serializer, _SCHEMA_LIST_VERSIONS_MEMBER.members["tags"], self.tags)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_LIST_VERSIONS_MEMBER.members["id"])

                case 1:
                    kwargs["config"] = de.read_document(_SCHEMA_LIST_VERSIONS_MEMBER.members["config"])

                case 2:
                    kwargs["config_hash"] = de.read_string(_SCHEMA_LIST_VERSIONS_MEMBER.members["config_hash"])

                case 3:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_LIST_VERSIONS_MEMBER.members["created_at"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_LIST_VERSIONS_MEMBER.members["description"])

                case 5:
                    kwargs["tags"] = _deserialize_string_list(de, _SCHEMA_LIST_VERSIONS_MEMBER.members["tags"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_VERSIONS_MEMBER, consumer=_consumer)
        return kwargs

def _serialize_list_versions_out(serializer: ShapeSerializer, schema: Schema, value: list[ListVersionsMember]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_list_versions_out(deserializer: ShapeDeserializer, schema: Schema) -> list[ListVersionsMember]:
    result: list[ListVersionsMember] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(ListVersionsMember.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListVersionsOutput:

    total_pages: int

    total_items: int

    data: list[ListVersionsMember]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_VERSIONS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_integer(_SCHEMA_LIST_VERSIONS_OUTPUT.members["total_pages"], self.total_pages)
        serializer.write_integer(_SCHEMA_LIST_VERSIONS_OUTPUT.members["total_items"], self.total_items)
        _serialize_list_versions_out(serializer, _SCHEMA_LIST_VERSIONS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_VERSIONS_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_VERSIONS_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_list_versions_out(de, _SCHEMA_LIST_VERSIONS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_VERSIONS_OUTPUT, consumer=_consumer)
        return kwargs

LIST_VERSIONS = APIOperation(
        input = ListVersionsInput,
        output = ListVersionsOutput,
        schema = _SCHEMA_LIST_VERSIONS,
        input_schema = _SCHEMA_LIST_VERSIONS_INPUT,
        output_schema = _SCHEMA_LIST_VERSIONS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class CreateContextInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    context: dict[str, Document] | None = None
    config_tags: str | None = None
    override: dict[str, Document] | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_CONTEXT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context is not None:
            _serialize_condition(serializer, _SCHEMA_CREATE_CONTEXT_INPUT.members["context"], self.context)

        if self.override is not None:
            _serialize_overrides(serializer, _SCHEMA_CREATE_CONTEXT_INPUT.members["override"], self.override)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["org_id"])

                case 2:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CREATE_CONTEXT_INPUT.members["context"])

                case 3:
                    kwargs["config_tags"] = de.read_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["config_tags"])

                case 4:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_CREATE_CONTEXT_INPUT.members["override"])

                case 5:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["description"])

                case 6:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_CONTEXT_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_CONTEXT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateContextOutput:

    context_id: str

    override_id: str

    weight: str

    description: str

    change_reason: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_CONTEXT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["context_id"], self.context_id)
        serializer.write_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["override_id"], self.override_id)
        serializer.write_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["weight"], self.weight)
        serializer.write_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["context_id"] = de.read_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["context_id"])

                case 1:
                    kwargs["override_id"] = de.read_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["override_id"])

                case 2:
                    kwargs["weight"] = de.read_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["weight"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_CONTEXT_OUTPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_CONTEXT_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_CONTEXT = APIOperation(
        input = CreateContextInput,
        output = CreateContextOutput,
        schema = _SCHEMA_CREATE_CONTEXT,
        input_schema = _SCHEMA_CREATE_CONTEXT_INPUT,
        output_schema = _SCHEMA_CREATE_CONTEXT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DeleteContextInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    config_tags: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_CONTEXT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DELETE_CONTEXT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DELETE_CONTEXT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_DELETE_CONTEXT_INPUT.members["id"])

                case 3:
                    kwargs["config_tags"] = de.read_string(_SCHEMA_DELETE_CONTEXT_INPUT.members["config_tags"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_CONTEXT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DeleteContextOutput:

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_CONTEXT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_CONTEXT_OUTPUT, consumer=_consumer)
        return kwargs

DELETE_CONTEXT = APIOperation(
        input = DeleteContextInput,
        output = DeleteContextOutput,
        schema = _SCHEMA_DELETE_CONTEXT,
        input_schema = _SCHEMA_DELETE_CONTEXT_INPUT,
        output_schema = _SCHEMA_DELETE_CONTEXT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetContextInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONTEXT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_CONTEXT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_CONTEXT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_CONTEXT_INPUT.members["id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONTEXT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetContextOutput:

    id: str

    value: dict[str, Document] | None = None
    override: dict[str, Document] | None = None
    override_id: str | None = None
    weight: str | None = None
    description: str | None = None
    change_reason: str | None = None
    created_at: datetime | None = None
    created_by: str | None = None
    last_modified_at: datetime | None = None
    last_modified_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONTEXT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["id"], self.id)
        if self.value is not None:
            _serialize_condition(serializer, _SCHEMA_GET_CONTEXT_OUTPUT.members["value"], self.value)

        if self.override is not None:
            _serialize_overrides(serializer, _SCHEMA_GET_CONTEXT_OUTPUT.members["override"], self.override)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["override_id"], self.override_id)

        if self.weight is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["weight"], self.weight)

        if self.description is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["change_reason"], self.change_reason)

        if self.created_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_CONTEXT_OUTPUT.members["created_at"], self.created_at)

        if self.created_by is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["created_by"], self.created_by)

        if self.last_modified_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_CONTEXT_OUTPUT.members["last_modified_at"], self.last_modified_at)

        if self.last_modified_by is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["id"])

                case 1:
                    kwargs["value"] = _deserialize_condition(de, _SCHEMA_GET_CONTEXT_OUTPUT.members["value"])

                case 2:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_GET_CONTEXT_OUTPUT.members["override"])

                case 3:
                    kwargs["override_id"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["override_id"])

                case 4:
                    kwargs["weight"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["weight"])

                case 5:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["description"])

                case 6:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["change_reason"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_CONTEXT_OUTPUT.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_GET_CONTEXT_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_CONTEXT_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONTEXT_OUTPUT, consumer=_consumer)
        return kwargs

GET_CONTEXT = APIOperation(
        input = GetContextInput,
        output = GetContextOutput,
        schema = _SCHEMA_GET_CONTEXT,
        input_schema = _SCHEMA_GET_CONTEXT_INPUT,
        output_schema = _SCHEMA_GET_CONTEXT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetContextFromConditionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    context: Document | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT.members["org_id"])

                case 2:
                    kwargs["context"] = de.read_document(_SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT.members["context"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetContextFromConditionOutput:

    id: str

    value: dict[str, Document] | None = None
    override: dict[str, Document] | None = None
    override_id: str | None = None
    weight: str | None = None
    description: str | None = None
    change_reason: str | None = None
    created_at: datetime | None = None
    created_by: str | None = None
    last_modified_at: datetime | None = None
    last_modified_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["id"], self.id)
        if self.value is not None:
            _serialize_condition(serializer, _SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["value"], self.value)

        if self.override is not None:
            _serialize_overrides(serializer, _SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["override"], self.override)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["override_id"], self.override_id)

        if self.weight is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["weight"], self.weight)

        if self.description is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["change_reason"], self.change_reason)

        if self.created_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["created_at"], self.created_at)

        if self.created_by is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["created_by"], self.created_by)

        if self.last_modified_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["last_modified_at"], self.last_modified_at)

        if self.last_modified_by is not None:
            serializer.write_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["id"])

                case 1:
                    kwargs["value"] = _deserialize_condition(de, _SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["value"])

                case 2:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["override"])

                case 3:
                    kwargs["override_id"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["override_id"])

                case 4:
                    kwargs["weight"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["weight"])

                case 5:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["description"])

                case 6:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["change_reason"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT, consumer=_consumer)
        return kwargs

GET_CONTEXT_FROM_CONDITION = APIOperation(
        input = GetContextFromConditionInput,
        output = GetContextFromConditionOutput,
        schema = _SCHEMA_GET_CONTEXT_FROM_CONDITION,
        input_schema = _SCHEMA_GET_CONTEXT_FROM_CONDITION_INPUT,
        output_schema = _SCHEMA_GET_CONTEXT_FROM_CONDITION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

class SortBy(StrEnum):
    DESC = "desc"
    ASC = "asc"

class ContextFilterSortOn(StrEnum):
    LAST_MODIFIED_AT = "last_modified_at"
    CREATED_AT = "created_at"
    WEIGHT = "weight"

@dataclass(kw_only=True)
class ListContextsInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    page: int | None = None
    count: int | None = None
    prefix: str | None = None
    sort_on: str | None = None
    sort_by: str | None = None
    created_by: str | None = None
    last_modified_by: str | None = None
    plaintext: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_CONTEXTS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["org_id"])

                case 2:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_CONTEXTS_INPUT.members["page"])

                case 3:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_CONTEXTS_INPUT.members["count"])

                case 4:
                    kwargs["prefix"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["prefix"])

                case 5:
                    kwargs["sort_on"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["sort_on"])

                case 6:
                    kwargs["sort_by"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["sort_by"])

                case 7:
                    kwargs["created_by"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["created_by"])

                case 8:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["last_modified_by"])

                case 9:
                    kwargs["plaintext"] = de.read_string(_SCHEMA_LIST_CONTEXTS_INPUT.members["plaintext"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_CONTEXTS_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ContextFull:

    id: str

    value: dict[str, Document] | None = None
    override: dict[str, Document] | None = None
    override_id: str | None = None
    weight: str | None = None
    description: str | None = None
    change_reason: str | None = None
    created_at: datetime | None = None
    created_by: str | None = None
    last_modified_at: datetime | None = None
    last_modified_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CONTEXT_FULL, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CONTEXT_FULL.members["id"], self.id)
        if self.value is not None:
            _serialize_condition(serializer, _SCHEMA_CONTEXT_FULL.members["value"], self.value)

        if self.override is not None:
            _serialize_overrides(serializer, _SCHEMA_CONTEXT_FULL.members["override"], self.override)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_CONTEXT_FULL.members["override_id"], self.override_id)

        if self.weight is not None:
            serializer.write_string(_SCHEMA_CONTEXT_FULL.members["weight"], self.weight)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CONTEXT_FULL.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CONTEXT_FULL.members["change_reason"], self.change_reason)

        if self.created_at is not None:
            serializer.write_timestamp(_SCHEMA_CONTEXT_FULL.members["created_at"], self.created_at)

        if self.created_by is not None:
            serializer.write_string(_SCHEMA_CONTEXT_FULL.members["created_by"], self.created_by)

        if self.last_modified_at is not None:
            serializer.write_timestamp(_SCHEMA_CONTEXT_FULL.members["last_modified_at"], self.last_modified_at)

        if self.last_modified_by is not None:
            serializer.write_string(_SCHEMA_CONTEXT_FULL.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["id"])

                case 1:
                    kwargs["value"] = _deserialize_condition(de, _SCHEMA_CONTEXT_FULL.members["value"])

                case 2:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_CONTEXT_FULL.members["override"])

                case 3:
                    kwargs["override_id"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["override_id"])

                case 4:
                    kwargs["weight"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["weight"])

                case 5:
                    kwargs["description"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["description"])

                case 6:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["change_reason"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CONTEXT_FULL.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CONTEXT_FULL.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CONTEXT_FULL.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CONTEXT_FULL, consumer=_consumer)
        return kwargs

def _serialize_list_context_out(serializer: ShapeSerializer, schema: Schema, value: list[ContextFull]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_list_context_out(deserializer: ShapeDeserializer, schema: Schema) -> list[ContextFull]:
    result: list[ContextFull] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(ContextFull.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListContextsOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[ContextFull] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_CONTEXTS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_LIST_CONTEXTS_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_LIST_CONTEXTS_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_list_context_out(serializer, _SCHEMA_LIST_CONTEXTS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_CONTEXTS_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_CONTEXTS_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_list_context_out(de, _SCHEMA_LIST_CONTEXTS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_CONTEXTS_OUTPUT, consumer=_consumer)
        return kwargs

LIST_CONTEXTS = APIOperation(
        input = ListContextsInput,
        output = ListContextsOutput,
        schema = _SCHEMA_LIST_CONTEXTS,
        input_schema = _SCHEMA_LIST_CONTEXTS_INPUT,
        output_schema = _SCHEMA_LIST_CONTEXTS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class MoveContextInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    context: dict[str, Document] | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MOVE_CONTEXT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.context is not None:
            _serialize_condition(serializer, _SCHEMA_MOVE_CONTEXT_INPUT.members["context"], self.context)

        if self.description is not None:
            serializer.write_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["id"])

                case 3:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_MOVE_CONTEXT_INPUT.members["context"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_MOVE_CONTEXT_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MOVE_CONTEXT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class MoveContextOutput:

    context_id: str

    override_id: str

    weight: str

    description: str

    change_reason: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_MOVE_CONTEXT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["context_id"], self.context_id)
        serializer.write_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["override_id"], self.override_id)
        serializer.write_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["weight"], self.weight)
        serializer.write_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["context_id"] = de.read_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["context_id"])

                case 1:
                    kwargs["override_id"] = de.read_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["override_id"])

                case 2:
                    kwargs["weight"] = de.read_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["weight"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_MOVE_CONTEXT_OUTPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_MOVE_CONTEXT_OUTPUT, consumer=_consumer)
        return kwargs

MOVE_CONTEXT = APIOperation(
        input = MoveContextInput,
        output = MoveContextOutput,
        schema = _SCHEMA_MOVE_CONTEXT,
        input_schema = _SCHEMA_MOVE_CONTEXT_INPUT,
        output_schema = _SCHEMA_MOVE_CONTEXT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateOverrideInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    config_tags: str | None = None
    request: UpdateContextOverrideRequest | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_OVERRIDE_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_INPUT.members["org_id"])

                case 2:
                    kwargs["config_tags"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_INPUT.members["config_tags"])

                case 3:
                    kwargs["request"] = UpdateContextOverrideRequest.deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_OVERRIDE_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateOverrideOutput:

    id: str

    value: dict[str, Document] | None = None
    override: dict[str, Document] | None = None
    override_id: str | None = None
    weight: str | None = None
    description: str | None = None
    change_reason: str | None = None
    created_at: datetime | None = None
    created_by: str | None = None
    last_modified_at: datetime | None = None
    last_modified_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_OVERRIDE_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["id"], self.id)
        if self.value is not None:
            _serialize_condition(serializer, _SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["value"], self.value)

        if self.override is not None:
            _serialize_overrides(serializer, _SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["override"], self.override)

        if self.override_id is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["override_id"], self.override_id)

        if self.weight is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["weight"], self.weight)

        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["change_reason"], self.change_reason)

        if self.created_at is not None:
            serializer.write_timestamp(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["created_at"], self.created_at)

        if self.created_by is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["created_by"], self.created_by)

        if self.last_modified_at is not None:
            serializer.write_timestamp(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["last_modified_at"], self.last_modified_at)

        if self.last_modified_by is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["id"])

                case 1:
                    kwargs["value"] = _deserialize_condition(de, _SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["value"])

                case 2:
                    kwargs["override"] = _deserialize_overrides(de, _SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["override"])

                case 3:
                    kwargs["override_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["override_id"])

                case 4:
                    kwargs["weight"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["weight"])

                case 5:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["description"])

                case 6:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["change_reason"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_OVERRIDE_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_OVERRIDE_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_OVERRIDE = APIOperation(
        input = UpdateOverrideInput,
        output = UpdateOverrideOutput,
        schema = _SCHEMA_UPDATE_OVERRIDE,
        input_schema = _SCHEMA_UPDATE_OVERRIDE_INPUT,
        output_schema = _SCHEMA_UPDATE_OVERRIDE_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class WeightRecomputeInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    config_tags: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WEIGHT_RECOMPUTE_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_WEIGHT_RECOMPUTE_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_WEIGHT_RECOMPUTE_INPUT.members["org_id"])

                case 2:
                    kwargs["config_tags"] = de.read_string(_SCHEMA_WEIGHT_RECOMPUTE_INPUT.members["config_tags"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WEIGHT_RECOMPUTE_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class WeightRecomputeResponse:

    id: str | None = None
    condition: dict[str, Document] | None = None
    old_weight: str | None = None
    new_weight: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.id is not None:
            serializer.write_string(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["id"], self.id)

        if self.condition is not None:
            _serialize_condition(serializer, _SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["condition"], self.condition)

        if self.old_weight is not None:
            serializer.write_string(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["old_weight"], self.old_weight)

        if self.new_weight is not None:
            serializer.write_string(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["new_weight"], self.new_weight)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["id"])

                case 1:
                    kwargs["condition"] = _deserialize_condition(de, _SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["condition"])

                case 2:
                    kwargs["old_weight"] = de.read_string(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["old_weight"])

                case 3:
                    kwargs["new_weight"] = de.read_string(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE.members["new_weight"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WEIGHT_RECOMPUTE_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_weight_recompute_responses(serializer: ShapeSerializer, schema: Schema, value: list[WeightRecomputeResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_weight_recompute_responses(deserializer: ShapeDeserializer, schema: Schema) -> list[WeightRecomputeResponse]:
    result: list[WeightRecomputeResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(WeightRecomputeResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class WeightRecomputeOutput:

    data: list[WeightRecomputeResponse] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WEIGHT_RECOMPUTE_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.data is not None:
            _serialize_weight_recompute_responses(serializer, _SCHEMA_WEIGHT_RECOMPUTE_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["data"] = _deserialize_weight_recompute_responses(de, _SCHEMA_WEIGHT_RECOMPUTE_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WEIGHT_RECOMPUTE_OUTPUT, consumer=_consumer)
        return kwargs

WEIGHT_RECOMPUTE = APIOperation(
        input = WeightRecomputeInput,
        output = WeightRecomputeOutput,
        schema = _SCHEMA_WEIGHT_RECOMPUTE,
        input_schema = _SCHEMA_WEIGHT_RECOMPUTE_INPUT,
        output_schema = _SCHEMA_WEIGHT_RECOMPUTE_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class CreateDefaultConfigInput:
    """

    :param function_name:
         Optional

    """

    key: str | None = None
    value: Document | None = None
    schema: Document | None = None
    description: str | None = None
    change_reason: str | None = None
    function_name: str | None = None
    autocomplete_function_name: str | None = None
    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.key is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["key"], self.key)

        if self.value is not None:
            serializer.write_document(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["value"], self.value)

        if self.schema is not None:
            serializer.write_document(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["schema"], self.schema)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["change_reason"], self.change_reason)

        if self.function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["function_name"], self.function_name)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["key"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["key"])

                case 1:
                    kwargs["value"] = de.read_document(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["value"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["schema"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["change_reason"])

                case 5:
                    kwargs["function_name"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["function_name"])

                case 6:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["autocomplete_function_name"])

                case 7:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["workspace_id"])

                case 8:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_DEFAULT_CONFIG_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateDefaultConfigOutput:
    """

    :param function_name:
         Optional

    """

    key: str

    value: Document

    schema: Document

    description: str

    change_reason: str

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    function_name: str | None = None
    autocomplete_function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["key"], self.key)
        serializer.write_document(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["value"], self.value)
        serializer.write_document(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["schema"], self.schema)
        serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["change_reason"], self.change_reason)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["function_name"], self.function_name)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

        serializer.write_timestamp(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["key"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["key"])

                case 1:
                    kwargs["value"] = de.read_document(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["value"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["schema"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["function_name"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["function_name"])

                case 6:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["autocomplete_function_name"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_DEFAULT_CONFIG = APIOperation(
        input = CreateDefaultConfigInput,
        output = CreateDefaultConfigOutput,
        schema = _SCHEMA_CREATE_DEFAULT_CONFIG,
        input_schema = _SCHEMA_CREATE_DEFAULT_CONFIG_INPUT,
        output_schema = _SCHEMA_CREATE_DEFAULT_CONFIG_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

def _serialize_dependencies(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_dependencies(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class CreateDimensionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    dimension: str | None = None
    position: int | None = None
    schema: Document | None = None
    function_name: str | None = None
    dependencies: list[str] | None = None
    description: str | None = None
    change_reason: str | None = None
    autocomplete_function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_DIMENSION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.dimension is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["dimension"], self.dimension)

        if self.position is not None:
            serializer.write_integer(_SCHEMA_CREATE_DIMENSION_INPUT.members["position"], self.position)

        if self.schema is not None:
            serializer.write_document(_SCHEMA_CREATE_DIMENSION_INPUT.members["schema"], self.schema)

        if self.function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["function_name"], self.function_name)

        if self.dependencies is not None:
            _serialize_dependencies(serializer, _SCHEMA_CREATE_DIMENSION_INPUT.members["dependencies"], self.dependencies)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["change_reason"], self.change_reason)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["org_id"])

                case 2:
                    kwargs["dimension"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["dimension"])

                case 3:
                    kwargs["position"] = de.read_integer(_SCHEMA_CREATE_DIMENSION_INPUT.members["position"])

                case 4:
                    kwargs["schema"] = de.read_document(_SCHEMA_CREATE_DIMENSION_INPUT.members["schema"])

                case 5:
                    kwargs["function_name"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["function_name"])

                case 6:
                    kwargs["dependencies"] = _deserialize_dependencies(de, _SCHEMA_CREATE_DIMENSION_INPUT.members["dependencies"])

                case 7:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["description"])

                case 8:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["change_reason"])

                case 9:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_CREATE_DIMENSION_INPUT.members["autocomplete_function_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_DIMENSION_INPUT, consumer=_consumer)
        return kwargs

def _serialize_dependents(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_dependents(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class CreateDimensionOutput:

    dimension: str

    position: int

    schema: Document

    description: str

    change_reason: str

    last_modified_at: datetime

    last_modified_by: str

    created_at: datetime

    created_by: str

    dependencies: list[str]

    dependents: list[str]

    dependency_graph: dict[str, Document]

    function_name: str | None = None
    autocomplete_function_name: str | None = None
    mandatory: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_DIMENSION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["dimension"], self.dimension)
        serializer.write_integer(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["position"], self.position)
        serializer.write_document(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["schema"], self.schema)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["function_name"], self.function_name)

        serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_timestamp(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["created_by"], self.created_by)
        _serialize_dependencies(serializer, _SCHEMA_CREATE_DIMENSION_OUTPUT.members["dependencies"], self.dependencies)
        _serialize_dependents(serializer, _SCHEMA_CREATE_DIMENSION_OUTPUT.members["dependents"], self.dependents)
        _serialize_object(serializer, _SCHEMA_CREATE_DIMENSION_OUTPUT.members["dependency_graph"], self.dependency_graph)
        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

        if self.mandatory is not None:
            serializer.write_boolean(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["mandatory"], self.mandatory)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["dimension"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["dimension"])

                case 1:
                    kwargs["position"] = de.read_integer(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["position"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["schema"])

                case 3:
                    kwargs["function_name"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["function_name"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["change_reason"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["last_modified_by"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["created_by"])

                case 10:
                    kwargs["dependencies"] = _deserialize_dependencies(de, _SCHEMA_CREATE_DIMENSION_OUTPUT.members["dependencies"])

                case 11:
                    kwargs["dependents"] = _deserialize_dependents(de, _SCHEMA_CREATE_DIMENSION_OUTPUT.members["dependents"])

                case 12:
                    kwargs["dependency_graph"] = _deserialize_object(de, _SCHEMA_CREATE_DIMENSION_OUTPUT.members["dependency_graph"])

                case 13:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["autocomplete_function_name"])

                case 14:
                    kwargs["mandatory"] = de.read_boolean(_SCHEMA_CREATE_DIMENSION_OUTPUT.members["mandatory"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_DIMENSION_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_DIMENSION = APIOperation(
        input = CreateDimensionInput,
        output = CreateDimensionOutput,
        schema = _SCHEMA_CREATE_DIMENSION,
        input_schema = _SCHEMA_CREATE_DIMENSION_INPUT,
        output_schema = _SCHEMA_CREATE_DIMENSION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class CreateExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    name: str | None = None
    experiment_type: str | None = None
    context: dict[str, Document] | None = None
    variants: list[Variant] | None = None
    description: str | None = None
    change_reason: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.name is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["name"], self.name)

        if self.experiment_type is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["experiment_type"], self.experiment_type)

        if self.context is not None:
            _serialize_condition(serializer, _SCHEMA_CREATE_EXPERIMENT_INPUT.members["context"], self.context)

        if self.variants is not None:
            _serialize_list_variant(serializer, _SCHEMA_CREATE_EXPERIMENT_INPUT.members["variants"], self.variants)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["name"])

                case 3:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["experiment_type"])

                case 4:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CREATE_EXPERIMENT_INPUT.members["context"])

                case 5:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_CREATE_EXPERIMENT_INPUT.members["variants"])

                case 6:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["description"])

                case 7:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["change_reason"])

                case 8:
                    kwargs["metrics"] = de.read_document(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["metrics"])

                case 9:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_INPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_EXPERIMENT = APIOperation(
        input = CreateExperimentInput,
        output = CreateExperimentOutput,
        schema = _SCHEMA_CREATE_EXPERIMENT,
        input_schema = _SCHEMA_CREATE_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_CREATE_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class CreateExperimentGroupInput:
    """
    Input structure for creating a new experiment group.

    :param change_reason:
        **[Required]** - Reason for creating this experiment group.

    :param member_experiment_ids:
         List of experiment IDs that are members of this group.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    name: str | None = None
    description: str | None = None
    change_reason: str | None = None
    context: dict[str, Document] | None = None
    traffic_percentage: int | None = None
    member_experiment_ids: list[str] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.name is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["name"], self.name)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["change_reason"], self.change_reason)

        if self.context is not None:
            _serialize_condition(serializer, _SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["context"], self.context)

        if self.traffic_percentage is not None:
            serializer.write_integer(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["traffic_percentage"], self.traffic_percentage)

        if self.member_experiment_ids is not None:
            _serialize_string_list(serializer, _SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["member_experiment_ids"], self.member_experiment_ids)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["org_id"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT.members["member_experiment_ids"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateExperimentGroupOutput:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["context"], self.context)
        serializer.write_integer(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_EXPERIMENT_GROUP = APIOperation(
        input = CreateExperimentGroupInput,
        output = CreateExperimentGroupOutput,
        schema = _SCHEMA_CREATE_EXPERIMENT_GROUP,
        input_schema = _SCHEMA_CREATE_EXPERIMENT_GROUP_INPUT,
        output_schema = _SCHEMA_CREATE_EXPERIMENT_GROUP_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

class FunctionTypes(StrEnum):
    VALIDATION = "VALIDATION"
    AUTOCOMPLETE = "AUTOCOMPLETE"

@dataclass(kw_only=True)
class CreateFunctionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    function_name: str | None = None
    description: str | None = None
    change_reason: str | None = None
    function: str | None = None
    runtime_version: str | None = None
    function_type: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_FUNCTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["function_name"], self.function_name)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["change_reason"], self.change_reason)

        if self.function is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["function"], self.function)

        if self.runtime_version is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["runtime_version"], self.runtime_version)

        if self.function_type is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["org_id"])

                case 2:
                    kwargs["function_name"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["function_name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["change_reason"])

                case 5:
                    kwargs["function"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["function"])

                case 6:
                    kwargs["runtime_version"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["runtime_version"])

                case 7:
                    kwargs["function_type"] = de.read_string(_SCHEMA_CREATE_FUNCTION_INPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_FUNCTION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateFunctionOutput:

    function_name: str

    draft_code: str

    draft_runtime_version: str

    draft_edited_at: datetime

    draft_edited_by: str

    last_modified_at: datetime

    last_modified_by: str

    change_reason: str

    description: str

    function_type: str

    published_code: str | None = None
    published_runtime_version: str | None = None
    published_at: datetime | None = None
    published_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_FUNCTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["function_name"], self.function_name)
        if self.published_code is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_code"], self.published_code)

        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_code"], self.draft_code)
        if self.published_runtime_version is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_runtime_version"], self.published_runtime_version)

        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_runtime_version"], self.draft_runtime_version)
        if self.published_at is not None:
            serializer.write_timestamp(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_at"], self.published_at)

        serializer.write_timestamp(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_edited_at"], self.draft_edited_at)
        if self.published_by is not None:
            serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_by"], self.published_by)

        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_edited_by"], self.draft_edited_by)
        serializer.write_timestamp(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["function_name"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["function_name"])

                case 1:
                    kwargs["published_code"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_code"])

                case 2:
                    kwargs["draft_code"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_code"])

                case 3:
                    kwargs["published_runtime_version"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_runtime_version"])

                case 4:
                    kwargs["draft_runtime_version"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_runtime_version"])

                case 5:
                    kwargs["published_at"] = de.read_timestamp(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_at"])

                case 6:
                    kwargs["draft_edited_at"] = de.read_timestamp(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_edited_at"])

                case 7:
                    kwargs["published_by"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["published_by"])

                case 8:
                    kwargs["draft_edited_by"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["draft_edited_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["last_modified_by"])

                case 11:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["change_reason"])

                case 12:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["description"])

                case 13:
                    kwargs["function_type"] = de.read_string(_SCHEMA_CREATE_FUNCTION_OUTPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_FUNCTION_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_FUNCTION = APIOperation(
        input = CreateFunctionInput,
        output = CreateFunctionOutput,
        schema = _SCHEMA_CREATE_FUNCTION,
        input_schema = _SCHEMA_CREATE_FUNCTION_INPUT,
        output_schema = _SCHEMA_CREATE_FUNCTION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class CreateOrganisationInput:

    country_code: str | None = None
    contact_email: str | None = None
    contact_phone: str | None = None
    admin_email: str | None = None
    sector: str | None = None
    name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_ORGANISATION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.country_code is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["country_code"], self.country_code)

        if self.contact_email is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["contact_email"], self.contact_email)

        if self.contact_phone is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["contact_phone"], self.contact_phone)

        if self.admin_email is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["admin_email"], self.admin_email)

        if self.sector is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["sector"], self.sector)

        if self.name is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["name"], self.name)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["country_code"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["country_code"])

                case 1:
                    kwargs["contact_email"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["contact_email"])

                case 2:
                    kwargs["contact_phone"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["contact_phone"])

                case 3:
                    kwargs["admin_email"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["admin_email"])

                case 4:
                    kwargs["sector"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["sector"])

                case 5:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_INPUT.members["name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_ORGANISATION_INPUT, consumer=_consumer)
        return kwargs

class OrgStatus(StrEnum):
    ACTIVE = "Active"
    INACTIVE = "Inactive"
    PENDING_KYB = "PendingKyb"

@dataclass(kw_only=True)
class CreateOrganisationOutput:

    id: str

    name: str

    created_by: str

    admin_email: str

    status: str

    created_at: datetime

    updated_at: datetime

    updated_by: str

    country_code: str | None = None
    contact_email: str | None = None
    contact_phone: str | None = None
    sector: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_ORGANISATION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["name"], self.name)
        if self.country_code is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["country_code"], self.country_code)

        if self.contact_email is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["contact_email"], self.contact_email)

        if self.contact_phone is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["contact_phone"], self.contact_phone)

        serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["admin_email"], self.admin_email)
        serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["status"], self.status)
        if self.sector is not None:
            serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["sector"], self.sector)

        serializer.write_timestamp(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["updated_at"], self.updated_at)
        serializer.write_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["updated_by"], self.updated_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["id"])

                case 1:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["name"])

                case 2:
                    kwargs["country_code"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["country_code"])

                case 3:
                    kwargs["contact_email"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["contact_email"])

                case 4:
                    kwargs["contact_phone"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["contact_phone"])

                case 5:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["created_by"])

                case 6:
                    kwargs["admin_email"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["admin_email"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["status"])

                case 8:
                    kwargs["sector"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["sector"])

                case 9:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["created_at"])

                case 10:
                    kwargs["updated_at"] = de.read_timestamp(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["updated_at"])

                case 11:
                    kwargs["updated_by"] = de.read_string(_SCHEMA_CREATE_ORGANISATION_OUTPUT.members["updated_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_ORGANISATION_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_ORGANISATION = APIOperation(
        input = CreateOrganisationInput,
        output = CreateOrganisationOutput,
        schema = _SCHEMA_CREATE_ORGANISATION,
        input_schema = _SCHEMA_CREATE_ORGANISATION_INPUT,
        output_schema = _SCHEMA_CREATE_ORGANISATION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class CreateTypeTemplatesInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    type_name: str | None = None
    type_schema: Document | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.type_name is not None:
            serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["type_name"], self.type_name)

        if self.type_schema is not None:
            serializer.write_document(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["type_schema"], self.type_schema)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["org_id"])

                case 2:
                    kwargs["type_name"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["type_name"])

                case 3:
                    kwargs["type_schema"] = de.read_document(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["type_schema"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_TYPE_TEMPLATES_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateTypeTemplatesOutput:

    type_name: str

    type_schema: Document

    description: str

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["type_name"], self.type_name)
        serializer.write_document(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["type_schema"], self.type_schema)
        serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["type_name"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["type_name"])

                case 1:
                    kwargs["type_schema"] = de.read_document(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["type_schema"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["change_reason"])

                case 4:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["created_by"])

                case 5:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["created_at"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_TYPE_TEMPLATES = APIOperation(
        input = CreateTypeTemplatesInput,
        output = CreateTypeTemplatesOutput,
        schema = _SCHEMA_CREATE_TYPE_TEMPLATES,
        input_schema = _SCHEMA_CREATE_TYPE_TEMPLATES_INPUT,
        output_schema = _SCHEMA_CREATE_TYPE_TEMPLATES_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

def _serialize_events(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_events(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

class HttpMethod(StrEnum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"
    HEAD = "HEAD"

class Version(StrEnum):
    V1 = "V1"

@dataclass(kw_only=True)
class CreateWebhookInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    url: str | None = None
    method: str | None = None
    version: str | None = None
    custom_headers: dict[str, Document] | None = None
    events: list[str] | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_WEBHOOK_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.name is not None:
            serializer.write_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["name"], self.name)

        if self.description is not None:
            serializer.write_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["description"], self.description)

        if self.enabled is not None:
            serializer.write_boolean(_SCHEMA_CREATE_WEBHOOK_INPUT.members["enabled"], self.enabled)

        if self.url is not None:
            serializer.write_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["url"], self.url)

        if self.method is not None:
            serializer.write_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["method"], self.method)

        if self.version is not None:
            serializer.write_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["version"], self.version)

        if self.custom_headers is not None:
            _serialize_object(serializer, _SCHEMA_CREATE_WEBHOOK_INPUT.members["custom_headers"], self.custom_headers)

        if self.events is not None:
            _serialize_events(serializer, _SCHEMA_CREATE_WEBHOOK_INPUT.members["events"], self.events)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["org_id"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["description"])

                case 4:
                    kwargs["enabled"] = de.read_boolean(_SCHEMA_CREATE_WEBHOOK_INPUT.members["enabled"])

                case 5:
                    kwargs["url"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["url"])

                case 6:
                    kwargs["method"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["method"])

                case 7:
                    kwargs["version"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["version"])

                case 8:
                    kwargs["custom_headers"] = _deserialize_object(de, _SCHEMA_CREATE_WEBHOOK_INPUT.members["custom_headers"])

                case 9:
                    kwargs["events"] = _deserialize_events(de, _SCHEMA_CREATE_WEBHOOK_INPUT.members["events"])

                case 10:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_WEBHOOK_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class CreateWebhookOutput:

    name: str

    description: str

    enabled: bool

    url: str

    method: str

    version: str

    events: list[str]

    max_retries: int

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_by: str

    last_modified_at: datetime

    custom_headers: dict[str, Document] | None = None
    last_triggered_at: datetime | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_WEBHOOK_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["description"], self.description)
        serializer.write_boolean(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["enabled"], self.enabled)
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["url"], self.url)
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["method"], self.method)
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["version"], self.version)
        if self.custom_headers is not None:
            _serialize_object(serializer, _SCHEMA_CREATE_WEBHOOK_OUTPUT.members["custom_headers"], self.custom_headers)

        _serialize_events(serializer, _SCHEMA_CREATE_WEBHOOK_OUTPUT.members["events"], self.events)
        serializer.write_integer(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["max_retries"], self.max_retries)
        if self.last_triggered_at is not None:
            serializer.write_timestamp(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["last_triggered_at"], self.last_triggered_at)

        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["last_modified_at"], self.last_modified_at)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["name"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["name"])

                case 1:
                    kwargs["description"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["description"])

                case 2:
                    kwargs["enabled"] = de.read_boolean(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["enabled"])

                case 3:
                    kwargs["url"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["url"])

                case 4:
                    kwargs["method"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["method"])

                case 5:
                    kwargs["version"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["version"])

                case 6:
                    kwargs["custom_headers"] = _deserialize_object(de, _SCHEMA_CREATE_WEBHOOK_OUTPUT.members["custom_headers"])

                case 7:
                    kwargs["events"] = _deserialize_events(de, _SCHEMA_CREATE_WEBHOOK_OUTPUT.members["events"])

                case 8:
                    kwargs["max_retries"] = de.read_integer(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["max_retries"])

                case 9:
                    kwargs["last_triggered_at"] = de.read_timestamp(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["last_triggered_at"])

                case 10:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["change_reason"])

                case 11:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["created_by"])

                case 12:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["created_at"])

                case 13:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["last_modified_by"])

                case 14:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_WEBHOOK_OUTPUT.members["last_modified_at"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_WEBHOOK_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_WEBHOOK = APIOperation(
        input = CreateWebhookInput,
        output = CreateWebhookOutput,
        schema = _SCHEMA_CREATE_WEBHOOK,
        input_schema = _SCHEMA_CREATE_WEBHOOK_INPUT,
        output_schema = _SCHEMA_CREATE_WEBHOOK_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

class WorkspaceStatus(StrEnum):
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"

@dataclass(kw_only=True)
class CreateWorkspaceInput:

    org_id: str = "juspay"
    workspace_admin_email: str | None = None
    workspace_name: str | None = None
    workspace_status: str | None = None
    strict_mode: bool | None = None
    metrics: Document | None = None
    allow_experiment_self_approval: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_WORKSPACE_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.workspace_admin_email is not None:
            serializer.write_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["workspace_admin_email"], self.workspace_admin_email)

        if self.workspace_name is not None:
            serializer.write_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["workspace_name"], self.workspace_name)

        if self.workspace_status is not None:
            serializer.write_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["workspace_status"], self.workspace_status)

        if self.strict_mode is not None:
            serializer.write_boolean(_SCHEMA_CREATE_WORKSPACE_INPUT.members["strict_mode"], self.strict_mode)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_CREATE_WORKSPACE_INPUT.members["metrics"], self.metrics)

        if self.allow_experiment_self_approval is not None:
            serializer.write_boolean(_SCHEMA_CREATE_WORKSPACE_INPUT.members["allow_experiment_self_approval"], self.allow_experiment_self_approval)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["org_id"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["org_id"])

                case 1:
                    kwargs["workspace_admin_email"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["workspace_admin_email"])

                case 2:
                    kwargs["workspace_name"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["workspace_name"])

                case 3:
                    kwargs["workspace_status"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_INPUT.members["workspace_status"])

                case 4:
                    kwargs["strict_mode"] = de.read_boolean(_SCHEMA_CREATE_WORKSPACE_INPUT.members["strict_mode"])

                case 5:
                    kwargs["metrics"] = de.read_document(_SCHEMA_CREATE_WORKSPACE_INPUT.members["metrics"])

                case 6:
                    kwargs["allow_experiment_self_approval"] = de.read_boolean(_SCHEMA_CREATE_WORKSPACE_INPUT.members["allow_experiment_self_approval"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_WORKSPACE_INPUT, consumer=_consumer)
        return kwargs

def _serialize_list_mandatory_dimensions(serializer: ShapeSerializer, schema: Schema, value: list[str]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_string(member_schema, e)

def _deserialize_list_mandatory_dimensions(deserializer: ShapeDeserializer, schema: Schema) -> list[str]:
    result: list[str] = []
    member_schema = schema.members["member"]
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(d.read_string(member_schema))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class CreateWorkspaceOutput:

    workspace_name: str

    organisation_id: str

    organisation_name: str

    workspace_schema_name: str

    workspace_status: str

    workspace_admin_email: str

    created_by: str

    last_modified_by: str

    last_modified_at: datetime

    created_at: datetime

    strict_mode: bool

    allow_experiment_self_approval: bool

    config_version: str | None = None
    mandatory_dimensions: list[str] | None = None
    metrics: Document | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_CREATE_WORKSPACE_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_name"], self.workspace_name)
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["organisation_id"], self.organisation_id)
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["organisation_name"], self.organisation_name)
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_schema_name"], self.workspace_schema_name)
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_status"], self.workspace_status)
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_admin_email"], self.workspace_admin_email)
        if self.config_version is not None:
            serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["config_version"], self.config_version)

        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_timestamp(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["created_at"], self.created_at)
        if self.mandatory_dimensions is not None:
            _serialize_list_mandatory_dimensions(serializer, _SCHEMA_CREATE_WORKSPACE_OUTPUT.members["mandatory_dimensions"], self.mandatory_dimensions)

        serializer.write_boolean(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["strict_mode"], self.strict_mode)
        if self.metrics is not None:
            serializer.write_document(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["metrics"], self.metrics)

        serializer.write_boolean(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["allow_experiment_self_approval"], self.allow_experiment_self_approval)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_name"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_name"])

                case 1:
                    kwargs["organisation_id"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["organisation_id"])

                case 2:
                    kwargs["organisation_name"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["organisation_name"])

                case 3:
                    kwargs["workspace_schema_name"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_schema_name"])

                case 4:
                    kwargs["workspace_status"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_status"])

                case 5:
                    kwargs["workspace_admin_email"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["workspace_admin_email"])

                case 6:
                    kwargs["config_version"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["config_version"])

                case 7:
                    kwargs["created_by"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["created_by"])

                case 8:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["last_modified_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["created_at"])

                case 11:
                    kwargs["mandatory_dimensions"] = _deserialize_list_mandatory_dimensions(de, _SCHEMA_CREATE_WORKSPACE_OUTPUT.members["mandatory_dimensions"])

                case 12:
                    kwargs["strict_mode"] = de.read_boolean(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["strict_mode"])

                case 13:
                    kwargs["metrics"] = de.read_document(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["metrics"])

                case 14:
                    kwargs["allow_experiment_self_approval"] = de.read_boolean(_SCHEMA_CREATE_WORKSPACE_OUTPUT.members["allow_experiment_self_approval"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_CREATE_WORKSPACE_OUTPUT, consumer=_consumer)
        return kwargs

CREATE_WORKSPACE = APIOperation(
        input = CreateWorkspaceInput,
        output = CreateWorkspaceOutput,
        schema = _SCHEMA_CREATE_WORKSPACE,
        input_schema = _SCHEMA_CREATE_WORKSPACE_INPUT,
        output_schema = _SCHEMA_CREATE_WORKSPACE_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DeleteDefaultConfigInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    key: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_DEFAULT_CONFIG_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DELETE_DEFAULT_CONFIG_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DELETE_DEFAULT_CONFIG_INPUT.members["org_id"])

                case 2:
                    kwargs["key"] = de.read_string(_SCHEMA_DELETE_DEFAULT_CONFIG_INPUT.members["key"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_DEFAULT_CONFIG_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DeleteDefaultConfigOutput:

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_DEFAULT_CONFIG_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_DEFAULT_CONFIG_OUTPUT, consumer=_consumer)
        return kwargs

DELETE_DEFAULT_CONFIG = APIOperation(
        input = DeleteDefaultConfigInput,
        output = DeleteDefaultConfigOutput,
        schema = _SCHEMA_DELETE_DEFAULT_CONFIG,
        input_schema = _SCHEMA_DELETE_DEFAULT_CONFIG_INPUT,
        output_schema = _SCHEMA_DELETE_DEFAULT_CONFIG_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListDefaultConfigsInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None
    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT.members["all"])

                case 3:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT.members["workspace_id"])

                case 4:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_DEFAULT_CONFIGS_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DefaultConfigFull:
    """

    :param function_name:
         Optional

    """

    key: str

    value: Document

    schema: Document

    description: str

    change_reason: str

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    function_name: str | None = None
    autocomplete_function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DEFAULT_CONFIG_FULL, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["key"], self.key)
        serializer.write_document(_SCHEMA_DEFAULT_CONFIG_FULL.members["value"], self.value)
        serializer.write_document(_SCHEMA_DEFAULT_CONFIG_FULL.members["schema"], self.schema)
        serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["description"], self.description)
        serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["change_reason"], self.change_reason)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["function_name"], self.function_name)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["autocomplete_function_name"], self.autocomplete_function_name)

        serializer.write_timestamp(_SCHEMA_DEFAULT_CONFIG_FULL.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_DEFAULT_CONFIG_FULL.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["key"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["key"])

                case 1:
                    kwargs["value"] = de.read_document(_SCHEMA_DEFAULT_CONFIG_FULL.members["value"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_DEFAULT_CONFIG_FULL.members["schema"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["change_reason"])

                case 5:
                    kwargs["function_name"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["function_name"])

                case 6:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["autocomplete_function_name"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_DEFAULT_CONFIG_FULL.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_DEFAULT_CONFIG_FULL.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_DEFAULT_CONFIG_FULL.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DEFAULT_CONFIG_FULL, consumer=_consumer)
        return kwargs

def _serialize_list_default_config_out(serializer: ShapeSerializer, schema: Schema, value: list[DefaultConfigFull]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_list_default_config_out(deserializer: ShapeDeserializer, schema: Schema) -> list[DefaultConfigFull]:
    result: list[DefaultConfigFull] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(DefaultConfigFull.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListDefaultConfigsOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[DefaultConfigFull] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_list_default_config_out(serializer, _SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_list_default_config_out(de, _SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT, consumer=_consumer)
        return kwargs

LIST_DEFAULT_CONFIGS = APIOperation(
        input = ListDefaultConfigsInput,
        output = ListDefaultConfigsOutput,
        schema = _SCHEMA_LIST_DEFAULT_CONFIGS,
        input_schema = _SCHEMA_LIST_DEFAULT_CONFIGS_INPUT,
        output_schema = _SCHEMA_LIST_DEFAULT_CONFIGS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateDefaultConfigInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    key: str | None = None
    change_reason: str | None = None
    value: Document | None = None
    schema: Document | None = None
    function_name: str | None = None
    description: str | None = None
    autocomplete_function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["change_reason"], self.change_reason)

        if self.value is not None:
            serializer.write_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["value"], self.value)

        if self.schema is not None:
            serializer.write_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["schema"], self.schema)

        if self.function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["function_name"], self.function_name)

        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["description"], self.description)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["org_id"])

                case 2:
                    kwargs["key"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["key"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["change_reason"])

                case 4:
                    kwargs["value"] = de.read_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["value"])

                case 5:
                    kwargs["schema"] = de.read_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["schema"])

                case 6:
                    kwargs["function_name"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["function_name"])

                case 7:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["description"])

                case 8:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT.members["autocomplete_function_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateDefaultConfigOutput:
    """

    :param function_name:
         Optional

    """

    key: str

    value: Document

    schema: Document

    description: str

    change_reason: str

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    function_name: str | None = None
    autocomplete_function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["key"], self.key)
        serializer.write_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["value"], self.value)
        serializer.write_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["schema"], self.schema)
        serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["change_reason"], self.change_reason)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["function_name"], self.function_name)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

        serializer.write_timestamp(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["key"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["key"])

                case 1:
                    kwargs["value"] = de.read_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["value"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["schema"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["function_name"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["function_name"])

                case 6:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["autocomplete_function_name"])

                case 7:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["created_at"])

                case 8:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["created_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_DEFAULT_CONFIG = APIOperation(
        input = UpdateDefaultConfigInput,
        output = UpdateDefaultConfigOutput,
        schema = _SCHEMA_UPDATE_DEFAULT_CONFIG,
        input_schema = _SCHEMA_UPDATE_DEFAULT_CONFIG_INPUT,
        output_schema = _SCHEMA_UPDATE_DEFAULT_CONFIG_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DeleteDimensionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    dimension: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_DIMENSION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DELETE_DIMENSION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DELETE_DIMENSION_INPUT.members["org_id"])

                case 2:
                    kwargs["dimension"] = de.read_string(_SCHEMA_DELETE_DIMENSION_INPUT.members["dimension"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_DIMENSION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DeleteDimensionOutput:

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_DIMENSION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_DIMENSION_OUTPUT, consumer=_consumer)
        return kwargs

DELETE_DIMENSION = APIOperation(
        input = DeleteDimensionInput,
        output = DeleteDimensionOutput,
        schema = _SCHEMA_DELETE_DIMENSION,
        input_schema = _SCHEMA_DELETE_DIMENSION_INPUT,
        output_schema = _SCHEMA_DELETE_DIMENSION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DeleteExperimentGroupInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT.members["id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DeleteExperimentGroupOutput:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["context"], self.context)
        serializer.write_integer(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT, consumer=_consumer)
        return kwargs

DELETE_EXPERIMENT_GROUP = APIOperation(
        input = DeleteExperimentGroupInput,
        output = DeleteExperimentGroupOutput,
        schema = _SCHEMA_DELETE_EXPERIMENT_GROUP,
        input_schema = _SCHEMA_DELETE_EXPERIMENT_GROUP_INPUT,
        output_schema = _SCHEMA_DELETE_EXPERIMENT_GROUP_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DeleteFunctionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_FUNCTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DELETE_FUNCTION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DELETE_FUNCTION_INPUT.members["org_id"])

                case 2:
                    kwargs["function_name"] = de.read_string(_SCHEMA_DELETE_FUNCTION_INPUT.members["function_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_FUNCTION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DeleteFunctionOutput:

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_FUNCTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_FUNCTION_OUTPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class FunctionNotFound(ApiError):

    code: ClassVar[str] = "FunctionNotFound"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_FUNCTION_NOT_FOUND, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_FUNCTION_NOT_FOUND, consumer=_consumer)
        return kwargs

DELETE_FUNCTION = APIOperation(
        input = DeleteFunctionInput,
        output = DeleteFunctionOutput,
        schema = _SCHEMA_DELETE_FUNCTION,
        input_schema = _SCHEMA_DELETE_FUNCTION_INPUT,
        output_schema = _SCHEMA_DELETE_FUNCTION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
ShapeID("io.superposition#FunctionNotFound"): FunctionNotFound,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DeleteTypeTemplatesInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    type_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_TYPE_TEMPLATES_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_INPUT.members["org_id"])

                case 2:
                    kwargs["type_name"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_INPUT.members["type_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_TYPE_TEMPLATES_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DeleteTypeTemplatesOutput:

    type_name: str

    type_schema: Document

    description: str

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["type_name"], self.type_name)
        serializer.write_document(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["type_schema"], self.type_schema)
        serializer.write_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["type_name"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["type_name"])

                case 1:
                    kwargs["type_schema"] = de.read_document(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["type_schema"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["change_reason"])

                case 4:
                    kwargs["created_by"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["created_by"])

                case 5:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["created_at"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class TypeTemplatesNotFound(ApiError):

    code: ClassVar[str] = "TypeTemplatesNotFound"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TYPE_TEMPLATES_NOT_FOUND, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TYPE_TEMPLATES_NOT_FOUND, consumer=_consumer)
        return kwargs

DELETE_TYPE_TEMPLATES = APIOperation(
        input = DeleteTypeTemplatesInput,
        output = DeleteTypeTemplatesOutput,
        schema = _SCHEMA_DELETE_TYPE_TEMPLATES,
        input_schema = _SCHEMA_DELETE_TYPE_TEMPLATES_INPUT,
        output_schema = _SCHEMA_DELETE_TYPE_TEMPLATES_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#TypeTemplatesNotFound"): TypeTemplatesNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetDimensionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    dimension: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_DIMENSION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_DIMENSION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_DIMENSION_INPUT.members["org_id"])

                case 2:
                    kwargs["dimension"] = de.read_string(_SCHEMA_GET_DIMENSION_INPUT.members["dimension"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_DIMENSION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetDimensionOutput:

    dimension: str

    position: int

    schema: Document

    description: str

    change_reason: str

    last_modified_at: datetime

    last_modified_by: str

    created_at: datetime

    created_by: str

    dependencies: list[str]

    dependents: list[str]

    dependency_graph: dict[str, Document]

    function_name: str | None = None
    autocomplete_function_name: str | None = None
    mandatory: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_DIMENSION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["dimension"], self.dimension)
        serializer.write_integer(_SCHEMA_GET_DIMENSION_OUTPUT.members["position"], self.position)
        serializer.write_document(_SCHEMA_GET_DIMENSION_OUTPUT.members["schema"], self.schema)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["function_name"], self.function_name)

        serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_timestamp(_SCHEMA_GET_DIMENSION_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_GET_DIMENSION_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["created_by"], self.created_by)
        _serialize_dependencies(serializer, _SCHEMA_GET_DIMENSION_OUTPUT.members["dependencies"], self.dependencies)
        _serialize_dependents(serializer, _SCHEMA_GET_DIMENSION_OUTPUT.members["dependents"], self.dependents)
        _serialize_object(serializer, _SCHEMA_GET_DIMENSION_OUTPUT.members["dependency_graph"], self.dependency_graph)
        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

        if self.mandatory is not None:
            serializer.write_boolean(_SCHEMA_GET_DIMENSION_OUTPUT.members["mandatory"], self.mandatory)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["dimension"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["dimension"])

                case 1:
                    kwargs["position"] = de.read_integer(_SCHEMA_GET_DIMENSION_OUTPUT.members["position"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_GET_DIMENSION_OUTPUT.members["schema"])

                case 3:
                    kwargs["function_name"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["function_name"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["change_reason"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_GET_DIMENSION_OUTPUT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["last_modified_by"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_DIMENSION_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["created_by"])

                case 10:
                    kwargs["dependencies"] = _deserialize_dependencies(de, _SCHEMA_GET_DIMENSION_OUTPUT.members["dependencies"])

                case 11:
                    kwargs["dependents"] = _deserialize_dependents(de, _SCHEMA_GET_DIMENSION_OUTPUT.members["dependents"])

                case 12:
                    kwargs["dependency_graph"] = _deserialize_object(de, _SCHEMA_GET_DIMENSION_OUTPUT.members["dependency_graph"])

                case 13:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_GET_DIMENSION_OUTPUT.members["autocomplete_function_name"])

                case 14:
                    kwargs["mandatory"] = de.read_boolean(_SCHEMA_GET_DIMENSION_OUTPUT.members["mandatory"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_DIMENSION_OUTPUT, consumer=_consumer)
        return kwargs

GET_DIMENSION = APIOperation(
        input = GetDimensionInput,
        output = GetDimensionOutput,
        schema = _SCHEMA_GET_DIMENSION,
        input_schema = _SCHEMA_GET_DIMENSION_INPUT,
        output_schema = _SCHEMA_GET_DIMENSION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListDimensionsInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None
    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_DIMENSIONS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_DIMENSIONS_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_DIMENSIONS_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_DIMENSIONS_INPUT.members["all"])

                case 3:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_DIMENSIONS_INPUT.members["workspace_id"])

                case 4:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_DIMENSIONS_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_DIMENSIONS_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DimensionExt:

    dimension: str

    position: int

    schema: Document

    description: str

    change_reason: str

    last_modified_at: datetime

    last_modified_by: str

    created_at: datetime

    created_by: str

    dependencies: list[str]

    dependents: list[str]

    dependency_graph: dict[str, Document]

    function_name: str | None = None
    autocomplete_function_name: str | None = None
    mandatory: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DIMENSION_EXT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_DIMENSION_EXT.members["dimension"], self.dimension)
        serializer.write_integer(_SCHEMA_DIMENSION_EXT.members["position"], self.position)
        serializer.write_document(_SCHEMA_DIMENSION_EXT.members["schema"], self.schema)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_DIMENSION_EXT.members["function_name"], self.function_name)

        serializer.write_string(_SCHEMA_DIMENSION_EXT.members["description"], self.description)
        serializer.write_string(_SCHEMA_DIMENSION_EXT.members["change_reason"], self.change_reason)
        serializer.write_timestamp(_SCHEMA_DIMENSION_EXT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_DIMENSION_EXT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_DIMENSION_EXT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_DIMENSION_EXT.members["created_by"], self.created_by)
        _serialize_dependencies(serializer, _SCHEMA_DIMENSION_EXT.members["dependencies"], self.dependencies)
        _serialize_dependents(serializer, _SCHEMA_DIMENSION_EXT.members["dependents"], self.dependents)
        _serialize_object(serializer, _SCHEMA_DIMENSION_EXT.members["dependency_graph"], self.dependency_graph)
        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_DIMENSION_EXT.members["autocomplete_function_name"], self.autocomplete_function_name)

        if self.mandatory is not None:
            serializer.write_boolean(_SCHEMA_DIMENSION_EXT.members["mandatory"], self.mandatory)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["dimension"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["dimension"])

                case 1:
                    kwargs["position"] = de.read_integer(_SCHEMA_DIMENSION_EXT.members["position"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_DIMENSION_EXT.members["schema"])

                case 3:
                    kwargs["function_name"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["function_name"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["change_reason"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_DIMENSION_EXT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["last_modified_by"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_DIMENSION_EXT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["created_by"])

                case 10:
                    kwargs["dependencies"] = _deserialize_dependencies(de, _SCHEMA_DIMENSION_EXT.members["dependencies"])

                case 11:
                    kwargs["dependents"] = _deserialize_dependents(de, _SCHEMA_DIMENSION_EXT.members["dependents"])

                case 12:
                    kwargs["dependency_graph"] = _deserialize_object(de, _SCHEMA_DIMENSION_EXT.members["dependency_graph"])

                case 13:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_DIMENSION_EXT.members["autocomplete_function_name"])

                case 14:
                    kwargs["mandatory"] = de.read_boolean(_SCHEMA_DIMENSION_EXT.members["mandatory"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DIMENSION_EXT, consumer=_consumer)
        return kwargs

def _serialize_dimension_ext_list(serializer: ShapeSerializer, schema: Schema, value: list[DimensionExt]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_dimension_ext_list(deserializer: ShapeDeserializer, schema: Schema) -> list[DimensionExt]:
    result: list[DimensionExt] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(DimensionExt.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListDimensionsOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[DimensionExt] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_DIMENSIONS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_LIST_DIMENSIONS_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_LIST_DIMENSIONS_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_dimension_ext_list(serializer, _SCHEMA_LIST_DIMENSIONS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_DIMENSIONS_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_DIMENSIONS_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_dimension_ext_list(de, _SCHEMA_LIST_DIMENSIONS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_DIMENSIONS_OUTPUT, consumer=_consumer)
        return kwargs

LIST_DIMENSIONS = APIOperation(
        input = ListDimensionsInput,
        output = ListDimensionsOutput,
        schema = _SCHEMA_LIST_DIMENSIONS,
        input_schema = _SCHEMA_LIST_DIMENSIONS_INPUT,
        output_schema = _SCHEMA_LIST_DIMENSIONS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateDimensionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    dimension: str | None = None
    schema: Document | None = None
    position: int | None = None
    function_name: str | None = None
    description: str | None = None
    dependencies: list[str] | None = None
    change_reason: str | None = None
    autocomplete_function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_DIMENSION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.schema is not None:
            serializer.write_document(_SCHEMA_UPDATE_DIMENSION_INPUT.members["schema"], self.schema)

        if self.position is not None:
            serializer.write_integer(_SCHEMA_UPDATE_DIMENSION_INPUT.members["position"], self.position)

        if self.function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["function_name"], self.function_name)

        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["description"], self.description)

        if self.dependencies is not None:
            _serialize_dependencies(serializer, _SCHEMA_UPDATE_DIMENSION_INPUT.members["dependencies"], self.dependencies)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["change_reason"], self.change_reason)

        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["org_id"])

                case 2:
                    kwargs["dimension"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["dimension"])

                case 3:
                    kwargs["schema"] = de.read_document(_SCHEMA_UPDATE_DIMENSION_INPUT.members["schema"])

                case 4:
                    kwargs["position"] = de.read_integer(_SCHEMA_UPDATE_DIMENSION_INPUT.members["position"])

                case 5:
                    kwargs["function_name"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["function_name"])

                case 6:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["description"])

                case 7:
                    kwargs["dependencies"] = _deserialize_dependencies(de, _SCHEMA_UPDATE_DIMENSION_INPUT.members["dependencies"])

                case 8:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["change_reason"])

                case 9:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_INPUT.members["autocomplete_function_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_DIMENSION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateDimensionOutput:

    dimension: str

    position: int

    schema: Document

    description: str

    change_reason: str

    last_modified_at: datetime

    last_modified_by: str

    created_at: datetime

    created_by: str

    dependencies: list[str]

    dependents: list[str]

    dependency_graph: dict[str, Document]

    function_name: str | None = None
    autocomplete_function_name: str | None = None
    mandatory: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_DIMENSION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dimension"], self.dimension)
        serializer.write_integer(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["position"], self.position)
        serializer.write_document(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["schema"], self.schema)
        if self.function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["function_name"], self.function_name)

        serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_timestamp(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["created_by"], self.created_by)
        _serialize_dependencies(serializer, _SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dependencies"], self.dependencies)
        _serialize_dependents(serializer, _SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dependents"], self.dependents)
        _serialize_object(serializer, _SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dependency_graph"], self.dependency_graph)
        if self.autocomplete_function_name is not None:
            serializer.write_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["autocomplete_function_name"], self.autocomplete_function_name)

        if self.mandatory is not None:
            serializer.write_boolean(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["mandatory"], self.mandatory)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["dimension"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dimension"])

                case 1:
                    kwargs["position"] = de.read_integer(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["position"])

                case 2:
                    kwargs["schema"] = de.read_document(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["schema"])

                case 3:
                    kwargs["function_name"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["function_name"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["change_reason"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["last_modified_by"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["created_by"])

                case 10:
                    kwargs["dependencies"] = _deserialize_dependencies(de, _SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dependencies"])

                case 11:
                    kwargs["dependents"] = _deserialize_dependents(de, _SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dependents"])

                case 12:
                    kwargs["dependency_graph"] = _deserialize_object(de, _SCHEMA_UPDATE_DIMENSION_OUTPUT.members["dependency_graph"])

                case 13:
                    kwargs["autocomplete_function_name"] = de.read_string(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["autocomplete_function_name"])

                case 14:
                    kwargs["mandatory"] = de.read_boolean(_SCHEMA_UPDATE_DIMENSION_OUTPUT.members["mandatory"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_DIMENSION_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_DIMENSION = APIOperation(
        input = UpdateDimensionInput,
        output = UpdateDimensionOutput,
        schema = _SCHEMA_UPDATE_DIMENSION,
        input_schema = _SCHEMA_UPDATE_DIMENSION_INPUT,
        output_schema = _SCHEMA_UPDATE_DIMENSION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class DiscardExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DISCARD_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DISCARD_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class DiscardExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_DISCARD_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

DISCARD_EXPERIMENT = APIOperation(
        input = DiscardExperimentInput,
        output = DiscardExperimentOutput,
        schema = _SCHEMA_DISCARD_EXPERIMENT,
        input_schema = _SCHEMA_DISCARD_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_DISCARD_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetExperimentGroupInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_EXPERIMENT_GROUP_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_INPUT.members["id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_EXPERIMENT_GROUP_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetExperimentGroupOutput:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["context"], self.context)
        serializer.write_integer(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT, consumer=_consumer)
        return kwargs

GET_EXPERIMENT_GROUP = APIOperation(
        input = GetExperimentGroupInput,
        output = GetExperimentGroupOutput,
        schema = _SCHEMA_GET_EXPERIMENT_GROUP,
        input_schema = _SCHEMA_GET_EXPERIMENT_GROUP_INPUT,
        output_schema = _SCHEMA_GET_EXPERIMENT_GROUP_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

class ExperimentGroupSortOn(StrEnum):
    NAME = "name"
    """
    Sort by name.

    """
    CREATED_AT = "created_at"
    """
    Sort by creation timestamp.

    """
    LAST_MODIFIED_AT = "last_modified_at"
    """
    Sort by last modification timestamp.

    """

@dataclass(kw_only=True)
class ListExperimentGroupsInput:
    """

    :param name:
         Filter by experiment group name (exact match or substring, depending on backend
         implementation).

    :param created_by:
         Filter by the user who created the experiment group.

    :param last_modified_by:
         Filter by the user who last modified the experiment group.

    :param sort_on:
         Field to sort the results by.

    :param sort_by:
         Sort order (ascending or descending).

    :param all:
         If true, returns all experiment groups, ignoring pagination parameters page and
         count.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    page: int | None = None
    count: int | None = None
    name: str | None = None
    created_by: str | None = None
    last_modified_by: str | None = None
    sort_on: str | None = None
    sort_by: str | None = None
    all: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["org_id"])

                case 2:
                    kwargs["page"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["page"])

                case 3:
                    kwargs["count"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["count"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["name"])

                case 5:
                    kwargs["created_by"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["created_by"])

                case 6:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["last_modified_by"])

                case 7:
                    kwargs["sort_on"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["sort_on"])

                case 8:
                    kwargs["sort_by"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["sort_by"])

                case 9:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT.members["all"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ExperimentGroupResponse:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_EXPERIMENT_GROUP_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["id"], self.id)
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["name"], self.name)
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["description"], self.description)
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["context"], self.context)
        serializer.write_integer(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_EXPERIMENT_GROUP_RESPONSE.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_EXPERIMENT_GROUP_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_experiment_group_list(serializer: ShapeSerializer, schema: Schema, value: list[ExperimentGroupResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_experiment_group_list(deserializer: ShapeDeserializer, schema: Schema) -> list[ExperimentGroupResponse]:
    result: list[ExperimentGroupResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(ExperimentGroupResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListExperimentGroupsOutput:
    """
    Output structure for the list experiment groups operation, including pagination
    details.

    :param data:
        **[Required]** - A list of experiment group responses.

    """

    total_pages: int

    total_items: int

    data: list[ExperimentGroupResponse]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_long(_SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT.members["total_pages"], self.total_pages)
        serializer.write_long(_SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT.members["total_items"], self.total_items)
        _serialize_experiment_group_list(serializer, _SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_experiment_group_list(de, _SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT, consumer=_consumer)
        return kwargs

LIST_EXPERIMENT_GROUPS = APIOperation(
        input = ListExperimentGroupsInput,
        output = ListExperimentGroupsOutput,
        schema = _SCHEMA_LIST_EXPERIMENT_GROUPS,
        input_schema = _SCHEMA_LIST_EXPERIMENT_GROUPS_INPUT,
        output_schema = _SCHEMA_LIST_EXPERIMENT_GROUPS_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class RemoveMembersFromGroupInput:
    """
    Input structure for adding members to an experiment group.

    :param change_reason:
        **[Required]** - Reason for adding these members.

    :param member_experiment_ids:
        **[Required]** - List of experiment IDs to add to this group.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None
    member_experiment_ids: list[str] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["change_reason"], self.change_reason)

        if self.member_experiment_ids is not None:
            _serialize_string_list(serializer, _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["member_experiment_ids"], self.member_experiment_ids)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["change_reason"])

                case 4:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT.members["member_experiment_ids"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class RemoveMembersFromGroupOutput:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["context"], self.context)
        serializer.write_integer(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT, consumer=_consumer)
        return kwargs

REMOVE_MEMBERS_FROM_GROUP = APIOperation(
        input = RemoveMembersFromGroupInput,
        output = RemoveMembersFromGroupOutput,
        schema = _SCHEMA_REMOVE_MEMBERS_FROM_GROUP,
        input_schema = _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_INPUT,
        output_schema = _SCHEMA_REMOVE_MEMBERS_FROM_GROUP_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateExperimentGroupInput:
    """
    Input structure for updating an existing experiment group.

    :param change_reason:
        **[Required]** - Reason for this update.

    :param description:
         Optional new description for the group.

    :param traffic_percentage:
         Optional new traffic percentage for the group.

    """

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None
    description: str | None = None
    traffic_percentage: int | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["change_reason"], self.change_reason)

        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["description"], self.description)

        if self.traffic_percentage is not None:
            serializer.write_integer(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["traffic_percentage"], self.traffic_percentage)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["change_reason"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["description"])

                case 5:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT.members["traffic_percentage"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateExperimentGroupOutput:
    """
    Standard response structure for an experiment group.

    """

    id: str

    context_hash: str

    name: str

    description: str

    change_reason: str

    context: dict[str, Document]

    traffic_percentage: int

    member_experiment_ids: list[str]

    created_at: datetime

    created_by: str

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["context_hash"], self.context_hash)
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["change_reason"], self.change_reason)
        _serialize_condition(serializer, _SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["context"], self.context)
        serializer.write_integer(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_string_list(serializer, _SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"], self.member_experiment_ids)
        serializer.write_timestamp(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["id"])

                case 1:
                    kwargs["context_hash"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["context_hash"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["change_reason"])

                case 5:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["context"])

                case 6:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["traffic_percentage"])

                case 7:
                    kwargs["member_experiment_ids"] = _deserialize_string_list(de, _SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["member_experiment_ids"])

                case 8:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["created_at"])

                case 9:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["created_by"])

                case 10:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_at"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_EXPERIMENT_GROUP = APIOperation(
        input = UpdateExperimentGroupInput,
        output = UpdateExperimentGroupOutput,
        schema = _SCHEMA_UPDATE_EXPERIMENT_GROUP,
        input_schema = _SCHEMA_UPDATE_EXPERIMENT_GROUP_INPUT,
        output_schema = _SCHEMA_UPDATE_EXPERIMENT_GROUP_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#ResourceNotFound"): ResourceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ExperimentResponse:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_EXPERIMENT_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_EXPERIMENT_RESPONSE.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_EXPERIMENT_RESPONSE.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["name"], self.name)
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_EXPERIMENT_RESPONSE.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["status"], self.status)
        serializer.write_integer(_SCHEMA_EXPERIMENT_RESPONSE.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_EXPERIMENT_RESPONSE.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_EXPERIMENT_RESPONSE.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["description"], self.description)
        serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_EXPERIMENT_RESPONSE.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_EXPERIMENT_RESPONSE.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_EXPERIMENT_RESPONSE.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_EXPERIMENT_RESPONSE.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_EXPERIMENT_RESPONSE.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_EXPERIMENT_RESPONSE.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_EXPERIMENT_RESPONSE.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_EXPERIMENT_RESPONSE.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_EXPERIMENT_RESPONSE.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_EXPERIMENT_RESPONSE.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_EXPERIMENT_RESPONSE.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_EXPERIMENT_RESPONSE.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_EXPERIMENT_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_experiment_list(serializer: ShapeSerializer, schema: Schema, value: list[ExperimentResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_experiment_list(deserializer: ShapeDeserializer, schema: Schema) -> list[ExperimentResponse]:
    result: list[ExperimentResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(ExperimentResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class GetExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_INPUT.members["id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_GET_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_GET_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_GET_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_GET_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_GET_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_GET_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_GET_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

GET_EXPERIMENT = APIOperation(
        input = GetExperimentInput,
        output = GetExperimentOutput,
        schema = _SCHEMA_GET_EXPERIMENT,
        input_schema = _SCHEMA_GET_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_GET_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

class ExperimentSortOn(StrEnum):
    LAST_MODIFIED_AT = "last_modified_at"
    CREATED_AT = "created_at"

@dataclass(kw_only=True)
class ListExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    page: int | None = None
    count: int | None = None
    all: bool | None = None
    status: str | None = None
    from_date: datetime | None = None
    to_date: datetime | None = None
    experiment_name: str | None = None
    experiment_ids: str | None = None
    created_by: str | None = None
    sort_on: str | None = None
    sort_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["page"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_INPUT.members["page"])

                case 3:
                    kwargs["count"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_INPUT.members["count"])

                case 4:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_EXPERIMENT_INPUT.members["all"])

                case 5:
                    kwargs["status"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["status"])

                case 6:
                    kwargs["from_date"] = de.read_timestamp(_SCHEMA_LIST_EXPERIMENT_INPUT.members["from_date"])

                case 7:
                    kwargs["to_date"] = de.read_timestamp(_SCHEMA_LIST_EXPERIMENT_INPUT.members["to_date"])

                case 8:
                    kwargs["experiment_name"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["experiment_name"])

                case 9:
                    kwargs["experiment_ids"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["experiment_ids"])

                case 10:
                    kwargs["created_by"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["created_by"])

                case 11:
                    kwargs["sort_on"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["sort_on"])

                case 12:
                    kwargs["sort_by"] = de.read_string(_SCHEMA_LIST_EXPERIMENT_INPUT.members["sort_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ListExperimentOutput:

    total_pages: int

    total_items: int

    data: list[ExperimentResponse]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_long(_SCHEMA_LIST_EXPERIMENT_OUTPUT.members["total_pages"], self.total_pages)
        serializer.write_long(_SCHEMA_LIST_EXPERIMENT_OUTPUT.members["total_items"], self.total_items)
        _serialize_experiment_list(serializer, _SCHEMA_LIST_EXPERIMENT_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_long(_SCHEMA_LIST_EXPERIMENT_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_experiment_list(de, _SCHEMA_LIST_EXPERIMENT_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

LIST_EXPERIMENT = APIOperation(
        input = ListExperimentInput,
        output = ListExperimentOutput,
        schema = _SCHEMA_LIST_EXPERIMENT,
        input_schema = _SCHEMA_LIST_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_LIST_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class PauseExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_PAUSE_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_PAUSE_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class PauseExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_PAUSE_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

PAUSE_EXPERIMENT = APIOperation(
        input = PauseExperimentInput,
        output = PauseExperimentOutput,
        schema = _SCHEMA_PAUSE_EXPERIMENT,
        input_schema = _SCHEMA_PAUSE_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_PAUSE_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class RampExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None
    traffic_percentage: int | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RAMP_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

        if self.traffic_percentage is not None:
            serializer.write_integer(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["traffic_percentage"], self.traffic_percentage)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["change_reason"])

                case 4:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_RAMP_EXPERIMENT_INPUT.members["traffic_percentage"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_RAMP_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class RampExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RAMP_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_RAMP_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_RAMP_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

RAMP_EXPERIMENT = APIOperation(
        input = RampExperimentInput,
        output = RampExperimentOutput,
        schema = _SCHEMA_RAMP_EXPERIMENT,
        input_schema = _SCHEMA_RAMP_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_RAMP_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ResumeExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RESUME_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_INPUT.members["id"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_RESUME_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class ResumeExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_RESUME_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_RESUME_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_RESUME_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

RESUME_EXPERIMENT = APIOperation(
        input = ResumeExperimentInput,
        output = ResumeExperimentOutput,
        schema = _SCHEMA_RESUME_EXPERIMENT,
        input_schema = _SCHEMA_RESUME_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_RESUME_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class VariantUpdateRequest:

    id: str

    overrides: Document

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_VARIANT_UPDATE_REQUEST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_VARIANT_UPDATE_REQUEST.members["id"], self.id)
        serializer.write_document(_SCHEMA_VARIANT_UPDATE_REQUEST.members["overrides"], self.overrides)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_VARIANT_UPDATE_REQUEST.members["id"])

                case 1:
                    kwargs["overrides"] = de.read_document(_SCHEMA_VARIANT_UPDATE_REQUEST.members["overrides"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_VARIANT_UPDATE_REQUEST, consumer=_consumer)
        return kwargs

def _serialize_list_variant_update_request(serializer: ShapeSerializer, schema: Schema, value: list[VariantUpdateRequest]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_list_variant_update_request(deserializer: ShapeDeserializer, schema: Schema) -> list[VariantUpdateRequest]:
    result: list[VariantUpdateRequest] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(VariantUpdateRequest.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class UpdateOverridesExperimentInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    id: str | None = None
    variant_list: list[VariantUpdateRequest] | None = None
    description: str | None = None
    change_reason: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.variant_list is not None:
            _serialize_list_variant_update_request(serializer, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["variant_list"], self.variant_list)

        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["change_reason"], self.change_reason)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["org_id"])

                case 2:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["id"])

                case 3:
                    kwargs["variant_list"] = _deserialize_list_variant_update_request(de, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["variant_list"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["change_reason"])

                case 6:
                    kwargs["metrics"] = de.read_document(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["metrics"])

                case 7:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateOverridesExperimentOutput:

    id: str

    created_at: datetime

    created_by: str

    last_modified: datetime

    name: str

    experiment_type: str

    override_keys: list[str]

    status: str

    traffic_percentage: int

    context: dict[str, Document]

    variants: list[Variant]

    last_modified_by: str

    description: str

    change_reason: str

    chosen_variant: str | None = None
    started_at: datetime | None = None
    started_by: str | None = None
    metrics_url: str | None = None
    metrics: Document | None = None
    experiment_group_id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["id"], self.id)
        serializer.write_timestamp(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["last_modified"], self.last_modified)
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["experiment_type"], self.experiment_type)
        _serialize_list_override_keys(serializer, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["override_keys"], self.override_keys)
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["status"], self.status)
        serializer.write_integer(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["traffic_percentage"], self.traffic_percentage)
        _serialize_condition(serializer, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["context"], self.context)
        _serialize_list_variant(serializer, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["variants"], self.variants)
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["last_modified_by"], self.last_modified_by)
        if self.chosen_variant is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["chosen_variant"], self.chosen_variant)

        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["change_reason"], self.change_reason)
        if self.started_at is not None:
            serializer.write_timestamp(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["started_at"], self.started_at)

        if self.started_by is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["started_by"], self.started_by)

        if self.metrics_url is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["metrics_url"], self.metrics_url)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["metrics"], self.metrics)

        if self.experiment_group_id is not None:
            serializer.write_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["experiment_group_id"], self.experiment_group_id)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["id"])

                case 1:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["created_at"])

                case 2:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["created_by"])

                case 3:
                    kwargs["last_modified"] = de.read_timestamp(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["last_modified"])

                case 4:
                    kwargs["name"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["name"])

                case 5:
                    kwargs["experiment_type"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["experiment_type"])

                case 6:
                    kwargs["override_keys"] = _deserialize_list_override_keys(de, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["override_keys"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["status"])

                case 8:
                    kwargs["traffic_percentage"] = de.read_integer(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["traffic_percentage"])

                case 9:
                    kwargs["context"] = _deserialize_condition(de, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["context"])

                case 10:
                    kwargs["variants"] = _deserialize_list_variant(de, _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["variants"])

                case 11:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["last_modified_by"])

                case 12:
                    kwargs["chosen_variant"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["chosen_variant"])

                case 13:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["description"])

                case 14:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["change_reason"])

                case 15:
                    kwargs["started_at"] = de.read_timestamp(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["started_at"])

                case 16:
                    kwargs["started_by"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["started_by"])

                case 17:
                    kwargs["metrics_url"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["metrics_url"])

                case 18:
                    kwargs["metrics"] = de.read_document(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["metrics"])

                case 19:
                    kwargs["experiment_group_id"] = de.read_string(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT.members["experiment_group_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_OVERRIDES_EXPERIMENT = APIOperation(
        input = UpdateOverridesExperimentInput,
        output = UpdateOverridesExperimentOutput,
        schema = _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT,
        input_schema = _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_INPUT,
        output_schema = _SCHEMA_UPDATE_OVERRIDES_EXPERIMENT_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetFunctionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_FUNCTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_FUNCTION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_FUNCTION_INPUT.members["org_id"])

                case 2:
                    kwargs["function_name"] = de.read_string(_SCHEMA_GET_FUNCTION_INPUT.members["function_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_FUNCTION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetFunctionOutput:

    function_name: str

    draft_code: str

    draft_runtime_version: str

    draft_edited_at: datetime

    draft_edited_by: str

    last_modified_at: datetime

    last_modified_by: str

    change_reason: str

    description: str

    function_type: str

    published_code: str | None = None
    published_runtime_version: str | None = None
    published_at: datetime | None = None
    published_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_FUNCTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["function_name"], self.function_name)
        if self.published_code is not None:
            serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_code"], self.published_code)

        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_code"], self.draft_code)
        if self.published_runtime_version is not None:
            serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_runtime_version"], self.published_runtime_version)

        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_runtime_version"], self.draft_runtime_version)
        if self.published_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_at"], self.published_at)

        serializer.write_timestamp(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_edited_at"], self.draft_edited_at)
        if self.published_by is not None:
            serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_by"], self.published_by)

        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_edited_by"], self.draft_edited_by)
        serializer.write_timestamp(_SCHEMA_GET_FUNCTION_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["function_name"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["function_name"])

                case 1:
                    kwargs["published_code"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_code"])

                case 2:
                    kwargs["draft_code"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_code"])

                case 3:
                    kwargs["published_runtime_version"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_runtime_version"])

                case 4:
                    kwargs["draft_runtime_version"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_runtime_version"])

                case 5:
                    kwargs["published_at"] = de.read_timestamp(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_at"])

                case 6:
                    kwargs["draft_edited_at"] = de.read_timestamp(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_edited_at"])

                case 7:
                    kwargs["published_by"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["published_by"])

                case 8:
                    kwargs["draft_edited_by"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["draft_edited_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_GET_FUNCTION_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["last_modified_by"])

                case 11:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["change_reason"])

                case 12:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["description"])

                case 13:
                    kwargs["function_type"] = de.read_string(_SCHEMA_GET_FUNCTION_OUTPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_FUNCTION_OUTPUT, consumer=_consumer)
        return kwargs

GET_FUNCTION = APIOperation(
        input = GetFunctionInput,
        output = GetFunctionOutput,
        schema = _SCHEMA_GET_FUNCTION,
        input_schema = _SCHEMA_GET_FUNCTION_INPUT,
        output_schema = _SCHEMA_GET_FUNCTION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#FunctionNotFound"): FunctionNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListFunctionInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None
    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_FUNCTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_FUNCTION_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_FUNCTION_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_FUNCTION_INPUT.members["all"])

                case 3:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_FUNCTION_INPUT.members["workspace_id"])

                case 4:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_FUNCTION_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_FUNCTION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class FunctionResponse:

    function_name: str

    draft_code: str

    draft_runtime_version: str

    draft_edited_at: datetime

    draft_edited_by: str

    last_modified_at: datetime

    last_modified_by: str

    change_reason: str

    description: str

    function_type: str

    published_code: str | None = None
    published_runtime_version: str | None = None
    published_at: datetime | None = None
    published_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_FUNCTION_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["function_name"], self.function_name)
        if self.published_code is not None:
            serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["published_code"], self.published_code)

        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["draft_code"], self.draft_code)
        if self.published_runtime_version is not None:
            serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["published_runtime_version"], self.published_runtime_version)

        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["draft_runtime_version"], self.draft_runtime_version)
        if self.published_at is not None:
            serializer.write_timestamp(_SCHEMA_FUNCTION_RESPONSE.members["published_at"], self.published_at)

        serializer.write_timestamp(_SCHEMA_FUNCTION_RESPONSE.members["draft_edited_at"], self.draft_edited_at)
        if self.published_by is not None:
            serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["published_by"], self.published_by)

        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["draft_edited_by"], self.draft_edited_by)
        serializer.write_timestamp(_SCHEMA_FUNCTION_RESPONSE.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["last_modified_by"], self.last_modified_by)
        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["description"], self.description)
        serializer.write_string(_SCHEMA_FUNCTION_RESPONSE.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["function_name"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["function_name"])

                case 1:
                    kwargs["published_code"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["published_code"])

                case 2:
                    kwargs["draft_code"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["draft_code"])

                case 3:
                    kwargs["published_runtime_version"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["published_runtime_version"])

                case 4:
                    kwargs["draft_runtime_version"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["draft_runtime_version"])

                case 5:
                    kwargs["published_at"] = de.read_timestamp(_SCHEMA_FUNCTION_RESPONSE.members["published_at"])

                case 6:
                    kwargs["draft_edited_at"] = de.read_timestamp(_SCHEMA_FUNCTION_RESPONSE.members["draft_edited_at"])

                case 7:
                    kwargs["published_by"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["published_by"])

                case 8:
                    kwargs["draft_edited_by"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["draft_edited_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_FUNCTION_RESPONSE.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["last_modified_by"])

                case 11:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["change_reason"])

                case 12:
                    kwargs["description"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["description"])

                case 13:
                    kwargs["function_type"] = de.read_string(_SCHEMA_FUNCTION_RESPONSE.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_FUNCTION_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_function_list_response(serializer: ShapeSerializer, schema: Schema, value: list[FunctionResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_function_list_response(deserializer: ShapeDeserializer, schema: Schema) -> list[FunctionResponse]:
    result: list[FunctionResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(FunctionResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListFunctionOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[FunctionResponse] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_FUNCTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_LIST_FUNCTION_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_LIST_FUNCTION_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_function_list_response(serializer, _SCHEMA_LIST_FUNCTION_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_FUNCTION_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_FUNCTION_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_function_list_response(de, _SCHEMA_LIST_FUNCTION_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_FUNCTION_OUTPUT, consumer=_consumer)
        return kwargs

LIST_FUNCTION = APIOperation(
        input = ListFunctionInput,
        output = ListFunctionOutput,
        schema = _SCHEMA_LIST_FUNCTION,
        input_schema = _SCHEMA_LIST_FUNCTION_INPUT,
        output_schema = _SCHEMA_LIST_FUNCTION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class PublishInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    function_name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_PUBLISH_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_PUBLISH_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_PUBLISH_INPUT.members["org_id"])

                case 2:
                    kwargs["function_name"] = de.read_string(_SCHEMA_PUBLISH_INPUT.members["function_name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_PUBLISH_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class PublishOutput:

    function_name: str

    draft_code: str

    draft_runtime_version: str

    draft_edited_at: datetime

    draft_edited_by: str

    last_modified_at: datetime

    last_modified_by: str

    change_reason: str

    description: str

    function_type: str

    published_code: str | None = None
    published_runtime_version: str | None = None
    published_at: datetime | None = None
    published_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_PUBLISH_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["function_name"], self.function_name)
        if self.published_code is not None:
            serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["published_code"], self.published_code)

        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["draft_code"], self.draft_code)
        if self.published_runtime_version is not None:
            serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["published_runtime_version"], self.published_runtime_version)

        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["draft_runtime_version"], self.draft_runtime_version)
        if self.published_at is not None:
            serializer.write_timestamp(_SCHEMA_PUBLISH_OUTPUT.members["published_at"], self.published_at)

        serializer.write_timestamp(_SCHEMA_PUBLISH_OUTPUT.members["draft_edited_at"], self.draft_edited_at)
        if self.published_by is not None:
            serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["published_by"], self.published_by)

        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["draft_edited_by"], self.draft_edited_by)
        serializer.write_timestamp(_SCHEMA_PUBLISH_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_PUBLISH_OUTPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["function_name"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["function_name"])

                case 1:
                    kwargs["published_code"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["published_code"])

                case 2:
                    kwargs["draft_code"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["draft_code"])

                case 3:
                    kwargs["published_runtime_version"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["published_runtime_version"])

                case 4:
                    kwargs["draft_runtime_version"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["draft_runtime_version"])

                case 5:
                    kwargs["published_at"] = de.read_timestamp(_SCHEMA_PUBLISH_OUTPUT.members["published_at"])

                case 6:
                    kwargs["draft_edited_at"] = de.read_timestamp(_SCHEMA_PUBLISH_OUTPUT.members["draft_edited_at"])

                case 7:
                    kwargs["published_by"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["published_by"])

                case 8:
                    kwargs["draft_edited_by"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["draft_edited_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_PUBLISH_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["last_modified_by"])

                case 11:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["change_reason"])

                case 12:
                    kwargs["description"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["description"])

                case 13:
                    kwargs["function_type"] = de.read_string(_SCHEMA_PUBLISH_OUTPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_PUBLISH_OUTPUT, consumer=_consumer)
        return kwargs

PUBLISH = APIOperation(
        input = PublishInput,
        output = PublishOutput,
        schema = _SCHEMA_PUBLISH,
        input_schema = _SCHEMA_PUBLISH_INPUT,
        output_schema = _SCHEMA_PUBLISH_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#FunctionNotFound"): FunctionNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ValidateFunctionRequest:

    key: str | None = None
    value: Document | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_VALIDATE_FUNCTION_REQUEST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.key is not None:
            serializer.write_string(_SCHEMA_VALIDATE_FUNCTION_REQUEST.members["key"], self.key)

        if self.value is not None:
            serializer.write_document(_SCHEMA_VALIDATE_FUNCTION_REQUEST.members["value"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["key"] = de.read_string(_SCHEMA_VALIDATE_FUNCTION_REQUEST.members["key"])

                case 1:
                    kwargs["value"] = de.read_document(_SCHEMA_VALIDATE_FUNCTION_REQUEST.members["value"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_VALIDATE_FUNCTION_REQUEST, consumer=_consumer)
        return kwargs

@dataclass
class FunctionExecutionRequestValidateFunctionRequest:

    value: ValidateFunctionRequest

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_FUNCTION_EXECUTION_REQUEST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_FUNCTION_EXECUTION_REQUEST.members["ValidateFunctionRequest"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=ValidateFunctionRequest.deserialize(deserializer))

@dataclass
class FunctionExecutionRequestAutocompleteFunctionRequest:

    value: AutocompleteFunctionRequest

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_FUNCTION_EXECUTION_REQUEST, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_FUNCTION_EXECUTION_REQUEST.members["AutocompleteFunctionRequest"], self.value)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(value=AutocompleteFunctionRequest.deserialize(deserializer))

@dataclass
class FunctionExecutionRequestUnknown:
    """Represents an unknown variant.

    If you receive this value, you will need to update your library to receive the
    parsed value.

    This value may not be deliberately sent.
    """

    tag: str

    def serialize(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    def serialize_members(self, serializer: ShapeSerializer):
        raise SmithyException("Unknown union variants may not be serialized.")

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        raise NotImplementedError()

FunctionExecutionRequest = Union[FunctionExecutionRequestValidateFunctionRequest | FunctionExecutionRequestAutocompleteFunctionRequest | FunctionExecutionRequestUnknown]

class _FunctionExecutionRequestDeserializer:
    _result: FunctionExecutionRequest | None = None

    def deserialize(self, deserializer: ShapeDeserializer) -> FunctionExecutionRequest:
        self._result = None
        deserializer.read_struct(_SCHEMA_FUNCTION_EXECUTION_REQUEST, self._consumer)

        if self._result is None:
            raise SmithyException("Unions must have exactly one value, but found none.")

        return self._result

    def _consumer(self, schema: Schema, de: ShapeDeserializer) -> None:
        match schema.expect_member_index():
            case 0:
                self._set_result(FunctionExecutionRequestValidateFunctionRequest.deserialize(de))

            case 1:
                self._set_result(FunctionExecutionRequestAutocompleteFunctionRequest.deserialize(de))

            case _:
                logger.debug("Unexpected member schema: %s", schema)

    def _set_result(self, value: FunctionExecutionRequest) -> None:
        if self._result is not None:
            raise SmithyException("Unions must have exactly one value, but found more than one.")
        self._result = value

class Stage(StrEnum):
    DRAFT = "draft"
    PUBLISHED = "published"

@dataclass(kw_only=True)
class TestInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    function_name: str | None = None
    stage: str | None = None
    request: FunctionExecutionRequest | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TEST_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_TEST_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_TEST_INPUT.members["org_id"])

                case 2:
                    kwargs["function_name"] = de.read_string(_SCHEMA_TEST_INPUT.members["function_name"])

                case 3:
                    kwargs["stage"] = de.read_string(_SCHEMA_TEST_INPUT.members["stage"])

                case 4:
                    kwargs["request"] = _FunctionExecutionRequestDeserializer().deserialize(de)

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TEST_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class TestOutput:

    fn_output: Document

    stdout: str

    function_type: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TEST_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_document(_SCHEMA_TEST_OUTPUT.members["fn_output"], self.fn_output)
        serializer.write_string(_SCHEMA_TEST_OUTPUT.members["stdout"], self.stdout)
        serializer.write_string(_SCHEMA_TEST_OUTPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["fn_output"] = de.read_document(_SCHEMA_TEST_OUTPUT.members["fn_output"])

                case 1:
                    kwargs["stdout"] = de.read_string(_SCHEMA_TEST_OUTPUT.members["stdout"])

                case 2:
                    kwargs["function_type"] = de.read_string(_SCHEMA_TEST_OUTPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TEST_OUTPUT, consumer=_consumer)
        return kwargs

TEST = APIOperation(
        input = TestInput,
        output = TestOutput,
        schema = _SCHEMA_TEST,
        input_schema = _SCHEMA_TEST_INPUT,
        output_schema = _SCHEMA_TEST_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#FunctionNotFound"): FunctionNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateFunctionInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    function_name: str | None = None
    description: str | None = None
    change_reason: str | None = None
    function: str | None = None
    runtime_version: str | None = None
    function_type: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_FUNCTION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["change_reason"], self.change_reason)

        if self.function is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["function"], self.function)

        if self.runtime_version is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["runtime_version"], self.runtime_version)

        if self.function_type is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["org_id"])

                case 2:
                    kwargs["function_name"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["function_name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["description"])

                case 4:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["change_reason"])

                case 5:
                    kwargs["function"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["function"])

                case 6:
                    kwargs["runtime_version"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["runtime_version"])

                case 7:
                    kwargs["function_type"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_INPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_FUNCTION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateFunctionOutput:

    function_name: str

    draft_code: str

    draft_runtime_version: str

    draft_edited_at: datetime

    draft_edited_by: str

    last_modified_at: datetime

    last_modified_by: str

    change_reason: str

    description: str

    function_type: str

    published_code: str | None = None
    published_runtime_version: str | None = None
    published_at: datetime | None = None
    published_by: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_FUNCTION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["function_name"], self.function_name)
        if self.published_code is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_code"], self.published_code)

        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_code"], self.draft_code)
        if self.published_runtime_version is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_runtime_version"], self.published_runtime_version)

        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_runtime_version"], self.draft_runtime_version)
        if self.published_at is not None:
            serializer.write_timestamp(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_at"], self.published_at)

        serializer.write_timestamp(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_edited_at"], self.draft_edited_at)
        if self.published_by is not None:
            serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_by"], self.published_by)

        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_edited_by"], self.draft_edited_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["function_type"], self.function_type)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["function_name"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["function_name"])

                case 1:
                    kwargs["published_code"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_code"])

                case 2:
                    kwargs["draft_code"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_code"])

                case 3:
                    kwargs["published_runtime_version"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_runtime_version"])

                case 4:
                    kwargs["draft_runtime_version"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_runtime_version"])

                case 5:
                    kwargs["published_at"] = de.read_timestamp(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_at"])

                case 6:
                    kwargs["draft_edited_at"] = de.read_timestamp(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_edited_at"])

                case 7:
                    kwargs["published_by"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["published_by"])

                case 8:
                    kwargs["draft_edited_by"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["draft_edited_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["last_modified_by"])

                case 11:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["change_reason"])

                case 12:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["description"])

                case 13:
                    kwargs["function_type"] = de.read_string(_SCHEMA_UPDATE_FUNCTION_OUTPUT.members["function_type"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_FUNCTION_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_FUNCTION = APIOperation(
        input = UpdateFunctionInput,
        output = UpdateFunctionOutput,
        schema = _SCHEMA_UPDATE_FUNCTION,
        input_schema = _SCHEMA_UPDATE_FUNCTION_INPUT,
        output_schema = _SCHEMA_UPDATE_FUNCTION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#FunctionNotFound"): FunctionNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetOrganisationInput:

    id: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_ORGANISATION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_ORGANISATION_INPUT.members["id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_ORGANISATION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetOrganisationOutput:

    id: str

    name: str

    created_by: str

    admin_email: str

    status: str

    created_at: datetime

    updated_at: datetime

    updated_by: str

    country_code: str | None = None
    contact_email: str | None = None
    contact_phone: str | None = None
    sector: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_ORGANISATION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["name"], self.name)
        if self.country_code is not None:
            serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["country_code"], self.country_code)

        if self.contact_email is not None:
            serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["contact_email"], self.contact_email)

        if self.contact_phone is not None:
            serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["contact_phone"], self.contact_phone)

        serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["admin_email"], self.admin_email)
        serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["status"], self.status)
        if self.sector is not None:
            serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["sector"], self.sector)

        serializer.write_timestamp(_SCHEMA_GET_ORGANISATION_OUTPUT.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_GET_ORGANISATION_OUTPUT.members["updated_at"], self.updated_at)
        serializer.write_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["updated_by"], self.updated_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["id"])

                case 1:
                    kwargs["name"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["name"])

                case 2:
                    kwargs["country_code"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["country_code"])

                case 3:
                    kwargs["contact_email"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["contact_email"])

                case 4:
                    kwargs["contact_phone"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["contact_phone"])

                case 5:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["created_by"])

                case 6:
                    kwargs["admin_email"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["admin_email"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["status"])

                case 8:
                    kwargs["sector"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["sector"])

                case 9:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_ORGANISATION_OUTPUT.members["created_at"])

                case 10:
                    kwargs["updated_at"] = de.read_timestamp(_SCHEMA_GET_ORGANISATION_OUTPUT.members["updated_at"])

                case 11:
                    kwargs["updated_by"] = de.read_string(_SCHEMA_GET_ORGANISATION_OUTPUT.members["updated_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_ORGANISATION_OUTPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class OrganisationNotFound(ApiError):

    code: ClassVar[str] = "OrganisationNotFound"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ORGANISATION_NOT_FOUND, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ORGANISATION_NOT_FOUND, consumer=_consumer)
        return kwargs

GET_ORGANISATION = APIOperation(
        input = GetOrganisationInput,
        output = GetOrganisationOutput,
        schema = _SCHEMA_GET_ORGANISATION,
        input_schema = _SCHEMA_GET_ORGANISATION_INPUT,
        output_schema = _SCHEMA_GET_ORGANISATION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#OrganisationNotFound"): OrganisationNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetTypeTemplatesListInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None
    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT.members["all"])

                case 3:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT.members["workspace_id"])

                case 4:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class TypeTemplatesResponse:

    type_name: str

    type_schema: Document

    description: str

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_TYPE_TEMPLATES_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["type_name"], self.type_name)
        serializer.write_document(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["type_schema"], self.type_schema)
        serializer.write_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["description"], self.description)
        serializer.write_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["type_name"] = de.read_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["type_name"])

                case 1:
                    kwargs["type_schema"] = de.read_document(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["type_schema"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["change_reason"])

                case 4:
                    kwargs["created_by"] = de.read_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["created_by"])

                case 5:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["created_at"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_TYPE_TEMPLATES_RESPONSE.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_TYPE_TEMPLATES_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_type_templates_list(serializer: ShapeSerializer, schema: Schema, value: list[TypeTemplatesResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_type_templates_list(deserializer: ShapeDeserializer, schema: Schema) -> list[TypeTemplatesResponse]:
    result: list[TypeTemplatesResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(TypeTemplatesResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class GetTypeTemplatesListOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[TypeTemplatesResponse] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_type_templates_list(serializer, _SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_type_templates_list(de, _SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT, consumer=_consumer)
        return kwargs

GET_TYPE_TEMPLATES_LIST = APIOperation(
        input = GetTypeTemplatesListInput,
        output = GetTypeTemplatesListOutput,
        schema = _SCHEMA_GET_TYPE_TEMPLATES_LIST,
        input_schema = _SCHEMA_GET_TYPE_TEMPLATES_LIST_INPUT,
        output_schema = _SCHEMA_GET_TYPE_TEMPLATES_LIST_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class GetWebhookInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    name: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_WEBHOOK_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_GET_WEBHOOK_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_GET_WEBHOOK_INPUT.members["org_id"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_GET_WEBHOOK_INPUT.members["name"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_WEBHOOK_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class GetWebhookOutput:

    name: str

    description: str

    enabled: bool

    url: str

    method: str

    version: str

    events: list[str]

    max_retries: int

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_by: str

    last_modified_at: datetime

    custom_headers: dict[str, Document] | None = None
    last_triggered_at: datetime | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_GET_WEBHOOK_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["description"], self.description)
        serializer.write_boolean(_SCHEMA_GET_WEBHOOK_OUTPUT.members["enabled"], self.enabled)
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["url"], self.url)
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["method"], self.method)
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["version"], self.version)
        if self.custom_headers is not None:
            _serialize_object(serializer, _SCHEMA_GET_WEBHOOK_OUTPUT.members["custom_headers"], self.custom_headers)

        _serialize_events(serializer, _SCHEMA_GET_WEBHOOK_OUTPUT.members["events"], self.events)
        serializer.write_integer(_SCHEMA_GET_WEBHOOK_OUTPUT.members["max_retries"], self.max_retries)
        if self.last_triggered_at is not None:
            serializer.write_timestamp(_SCHEMA_GET_WEBHOOK_OUTPUT.members["last_triggered_at"], self.last_triggered_at)

        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_GET_WEBHOOK_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_GET_WEBHOOK_OUTPUT.members["last_modified_at"], self.last_modified_at)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["name"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["name"])

                case 1:
                    kwargs["description"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["description"])

                case 2:
                    kwargs["enabled"] = de.read_boolean(_SCHEMA_GET_WEBHOOK_OUTPUT.members["enabled"])

                case 3:
                    kwargs["url"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["url"])

                case 4:
                    kwargs["method"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["method"])

                case 5:
                    kwargs["version"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["version"])

                case 6:
                    kwargs["custom_headers"] = _deserialize_object(de, _SCHEMA_GET_WEBHOOK_OUTPUT.members["custom_headers"])

                case 7:
                    kwargs["events"] = _deserialize_events(de, _SCHEMA_GET_WEBHOOK_OUTPUT.members["events"])

                case 8:
                    kwargs["max_retries"] = de.read_integer(_SCHEMA_GET_WEBHOOK_OUTPUT.members["max_retries"])

                case 9:
                    kwargs["last_triggered_at"] = de.read_timestamp(_SCHEMA_GET_WEBHOOK_OUTPUT.members["last_triggered_at"])

                case 10:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["change_reason"])

                case 11:
                    kwargs["created_by"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["created_by"])

                case 12:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_GET_WEBHOOK_OUTPUT.members["created_at"])

                case 13:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_GET_WEBHOOK_OUTPUT.members["last_modified_by"])

                case 14:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_GET_WEBHOOK_OUTPUT.members["last_modified_at"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_GET_WEBHOOK_OUTPUT, consumer=_consumer)
        return kwargs

GET_WEBHOOK = APIOperation(
        input = GetWebhookInput,
        output = GetWebhookOutput,
        schema = _SCHEMA_GET_WEBHOOK,
        input_schema = _SCHEMA_GET_WEBHOOK_INPUT,
        output_schema = _SCHEMA_GET_WEBHOOK_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListOrganisationInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_ORGANISATION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_ORGANISATION_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_ORGANISATION_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_ORGANISATION_INPUT.members["all"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_ORGANISATION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class OrganisationResponse:

    id: str

    name: str

    created_by: str

    admin_email: str

    status: str

    created_at: datetime

    updated_at: datetime

    updated_by: str

    country_code: str | None = None
    contact_email: str | None = None
    contact_phone: str | None = None
    sector: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_ORGANISATION_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["id"], self.id)
        serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["name"], self.name)
        if self.country_code is not None:
            serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["country_code"], self.country_code)

        if self.contact_email is not None:
            serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["contact_email"], self.contact_email)

        if self.contact_phone is not None:
            serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["contact_phone"], self.contact_phone)

        serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["admin_email"], self.admin_email)
        serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["status"], self.status)
        if self.sector is not None:
            serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["sector"], self.sector)

        serializer.write_timestamp(_SCHEMA_ORGANISATION_RESPONSE.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_ORGANISATION_RESPONSE.members["updated_at"], self.updated_at)
        serializer.write_string(_SCHEMA_ORGANISATION_RESPONSE.members["updated_by"], self.updated_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["id"])

                case 1:
                    kwargs["name"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["name"])

                case 2:
                    kwargs["country_code"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["country_code"])

                case 3:
                    kwargs["contact_email"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["contact_email"])

                case 4:
                    kwargs["contact_phone"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["contact_phone"])

                case 5:
                    kwargs["created_by"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["created_by"])

                case 6:
                    kwargs["admin_email"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["admin_email"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["status"])

                case 8:
                    kwargs["sector"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["sector"])

                case 9:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_ORGANISATION_RESPONSE.members["created_at"])

                case 10:
                    kwargs["updated_at"] = de.read_timestamp(_SCHEMA_ORGANISATION_RESPONSE.members["updated_at"])

                case 11:
                    kwargs["updated_by"] = de.read_string(_SCHEMA_ORGANISATION_RESPONSE.members["updated_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_ORGANISATION_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_organisation_list(serializer: ShapeSerializer, schema: Schema, value: list[OrganisationResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_organisation_list(deserializer: ShapeDeserializer, schema: Schema) -> list[OrganisationResponse]:
    result: list[OrganisationResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(OrganisationResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListOrganisationOutput:

    total_pages: int | None = None
    total_items: int | None = None
    data: list[OrganisationResponse] | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_ORGANISATION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.total_pages is not None:
            serializer.write_integer(_SCHEMA_LIST_ORGANISATION_OUTPUT.members["total_pages"], self.total_pages)

        if self.total_items is not None:
            serializer.write_integer(_SCHEMA_LIST_ORGANISATION_OUTPUT.members["total_items"], self.total_items)

        if self.data is not None:
            _serialize_organisation_list(serializer, _SCHEMA_LIST_ORGANISATION_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_integer(_SCHEMA_LIST_ORGANISATION_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_integer(_SCHEMA_LIST_ORGANISATION_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_organisation_list(de, _SCHEMA_LIST_ORGANISATION_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_ORGANISATION_OUTPUT, consumer=_consumer)
        return kwargs

LIST_ORGANISATION = APIOperation(
        input = ListOrganisationInput,
        output = ListOrganisationOutput,
        schema = _SCHEMA_LIST_ORGANISATION,
        input_schema = _SCHEMA_LIST_ORGANISATION_INPUT,
        output_schema = _SCHEMA_LIST_ORGANISATION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListWebhookInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None
    workspace_id: str | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_WEBHOOK_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_WEBHOOK_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_WEBHOOK_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_WEBHOOK_INPUT.members["all"])

                case 3:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_LIST_WEBHOOK_INPUT.members["workspace_id"])

                case 4:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_WEBHOOK_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_WEBHOOK_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class WebhookResponse:

    name: str

    description: str

    enabled: bool

    url: str

    method: str

    version: str

    events: list[str]

    max_retries: int

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_by: str

    last_modified_at: datetime

    custom_headers: dict[str, Document] | None = None
    last_triggered_at: datetime | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WEBHOOK_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["name"], self.name)
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["description"], self.description)
        serializer.write_boolean(_SCHEMA_WEBHOOK_RESPONSE.members["enabled"], self.enabled)
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["url"], self.url)
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["method"], self.method)
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["version"], self.version)
        if self.custom_headers is not None:
            _serialize_object(serializer, _SCHEMA_WEBHOOK_RESPONSE.members["custom_headers"], self.custom_headers)

        _serialize_events(serializer, _SCHEMA_WEBHOOK_RESPONSE.members["events"], self.events)
        serializer.write_integer(_SCHEMA_WEBHOOK_RESPONSE.members["max_retries"], self.max_retries)
        if self.last_triggered_at is not None:
            serializer.write_timestamp(_SCHEMA_WEBHOOK_RESPONSE.members["last_triggered_at"], self.last_triggered_at)

        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_WEBHOOK_RESPONSE.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_WEBHOOK_RESPONSE.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_WEBHOOK_RESPONSE.members["last_modified_at"], self.last_modified_at)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["name"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["name"])

                case 1:
                    kwargs["description"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["description"])

                case 2:
                    kwargs["enabled"] = de.read_boolean(_SCHEMA_WEBHOOK_RESPONSE.members["enabled"])

                case 3:
                    kwargs["url"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["url"])

                case 4:
                    kwargs["method"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["method"])

                case 5:
                    kwargs["version"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["version"])

                case 6:
                    kwargs["custom_headers"] = _deserialize_object(de, _SCHEMA_WEBHOOK_RESPONSE.members["custom_headers"])

                case 7:
                    kwargs["events"] = _deserialize_events(de, _SCHEMA_WEBHOOK_RESPONSE.members["events"])

                case 8:
                    kwargs["max_retries"] = de.read_integer(_SCHEMA_WEBHOOK_RESPONSE.members["max_retries"])

                case 9:
                    kwargs["last_triggered_at"] = de.read_timestamp(_SCHEMA_WEBHOOK_RESPONSE.members["last_triggered_at"])

                case 10:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["change_reason"])

                case 11:
                    kwargs["created_by"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["created_by"])

                case 12:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_WEBHOOK_RESPONSE.members["created_at"])

                case 13:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_WEBHOOK_RESPONSE.members["last_modified_by"])

                case 14:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_WEBHOOK_RESPONSE.members["last_modified_at"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WEBHOOK_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_webhook_list(serializer: ShapeSerializer, schema: Schema, value: list[WebhookResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_webhook_list(deserializer: ShapeDeserializer, schema: Schema) -> list[WebhookResponse]:
    result: list[WebhookResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(WebhookResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListWebhookOutput:

    total_pages: int

    total_items: int

    data: list[WebhookResponse]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_WEBHOOK_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_long(_SCHEMA_LIST_WEBHOOK_OUTPUT.members["total_pages"], self.total_pages)
        serializer.write_long(_SCHEMA_LIST_WEBHOOK_OUTPUT.members["total_items"], self.total_items)
        _serialize_webhook_list(serializer, _SCHEMA_LIST_WEBHOOK_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_long(_SCHEMA_LIST_WEBHOOK_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_long(_SCHEMA_LIST_WEBHOOK_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_webhook_list(de, _SCHEMA_LIST_WEBHOOK_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_WEBHOOK_OUTPUT, consumer=_consumer)
        return kwargs

LIST_WEBHOOK = APIOperation(
        input = ListWebhookInput,
        output = ListWebhookOutput,
        schema = _SCHEMA_LIST_WEBHOOK,
        input_schema = _SCHEMA_LIST_WEBHOOK_INPUT,
        output_schema = _SCHEMA_LIST_WEBHOOK_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class ListWorkspaceInput:

    count: int | None = None
    page: int | None = None
    all: bool | None = None
    org_id: str = "juspay"

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_WORKSPACE_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["count"] = de.read_integer(_SCHEMA_LIST_WORKSPACE_INPUT.members["count"])

                case 1:
                    kwargs["page"] = de.read_integer(_SCHEMA_LIST_WORKSPACE_INPUT.members["page"])

                case 2:
                    kwargs["all"] = de.read_boolean(_SCHEMA_LIST_WORKSPACE_INPUT.members["all"])

                case 3:
                    kwargs["org_id"] = de.read_string(_SCHEMA_LIST_WORKSPACE_INPUT.members["org_id"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_WORKSPACE_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class WorkspaceResponse:

    workspace_name: str

    organisation_id: str

    organisation_name: str

    workspace_schema_name: str

    workspace_status: str

    workspace_admin_email: str

    created_by: str

    last_modified_by: str

    last_modified_at: datetime

    created_at: datetime

    strict_mode: bool

    allow_experiment_self_approval: bool

    config_version: str | None = None
    mandatory_dimensions: list[str] | None = None
    metrics: Document | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WORKSPACE_RESPONSE, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_name"], self.workspace_name)
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["organisation_id"], self.organisation_id)
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["organisation_name"], self.organisation_name)
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_schema_name"], self.workspace_schema_name)
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_status"], self.workspace_status)
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_admin_email"], self.workspace_admin_email)
        if self.config_version is not None:
            serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["config_version"], self.config_version)

        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_WORKSPACE_RESPONSE.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_WORKSPACE_RESPONSE.members["last_modified_at"], self.last_modified_at)
        serializer.write_timestamp(_SCHEMA_WORKSPACE_RESPONSE.members["created_at"], self.created_at)
        if self.mandatory_dimensions is not None:
            _serialize_list_mandatory_dimensions(serializer, _SCHEMA_WORKSPACE_RESPONSE.members["mandatory_dimensions"], self.mandatory_dimensions)

        serializer.write_boolean(_SCHEMA_WORKSPACE_RESPONSE.members["strict_mode"], self.strict_mode)
        if self.metrics is not None:
            serializer.write_document(_SCHEMA_WORKSPACE_RESPONSE.members["metrics"], self.metrics)

        serializer.write_boolean(_SCHEMA_WORKSPACE_RESPONSE.members["allow_experiment_self_approval"], self.allow_experiment_self_approval)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_name"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_name"])

                case 1:
                    kwargs["organisation_id"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["organisation_id"])

                case 2:
                    kwargs["organisation_name"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["organisation_name"])

                case 3:
                    kwargs["workspace_schema_name"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_schema_name"])

                case 4:
                    kwargs["workspace_status"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_status"])

                case 5:
                    kwargs["workspace_admin_email"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["workspace_admin_email"])

                case 6:
                    kwargs["config_version"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["config_version"])

                case 7:
                    kwargs["created_by"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["created_by"])

                case 8:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_WORKSPACE_RESPONSE.members["last_modified_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_WORKSPACE_RESPONSE.members["last_modified_at"])

                case 10:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_WORKSPACE_RESPONSE.members["created_at"])

                case 11:
                    kwargs["mandatory_dimensions"] = _deserialize_list_mandatory_dimensions(de, _SCHEMA_WORKSPACE_RESPONSE.members["mandatory_dimensions"])

                case 12:
                    kwargs["strict_mode"] = de.read_boolean(_SCHEMA_WORKSPACE_RESPONSE.members["strict_mode"])

                case 13:
                    kwargs["metrics"] = de.read_document(_SCHEMA_WORKSPACE_RESPONSE.members["metrics"])

                case 14:
                    kwargs["allow_experiment_self_approval"] = de.read_boolean(_SCHEMA_WORKSPACE_RESPONSE.members["allow_experiment_self_approval"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WORKSPACE_RESPONSE, consumer=_consumer)
        return kwargs

def _serialize_workspace_list(serializer: ShapeSerializer, schema: Schema, value: list[WorkspaceResponse]) -> None:
    member_schema = schema.members["member"]
    with serializer.begin_list(schema, len(value)) as ls:
        for e in value:
            ls.write_struct(member_schema, e)

def _deserialize_workspace_list(deserializer: ShapeDeserializer, schema: Schema) -> list[WorkspaceResponse]:
    result: list[WorkspaceResponse] = []
    def _read_value(d: ShapeDeserializer):
        if d.is_null():
            d.read_null()

        else:
            result.append(WorkspaceResponse.deserialize(d))
    deserializer.read_list(schema, _read_value)
    return result

@dataclass(kw_only=True)
class ListWorkspaceOutput:

    total_pages: int

    total_items: int

    data: list[WorkspaceResponse]

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_LIST_WORKSPACE_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_long(_SCHEMA_LIST_WORKSPACE_OUTPUT.members["total_pages"], self.total_pages)
        serializer.write_long(_SCHEMA_LIST_WORKSPACE_OUTPUT.members["total_items"], self.total_items)
        _serialize_workspace_list(serializer, _SCHEMA_LIST_WORKSPACE_OUTPUT.members["data"], self.data)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["total_pages"] = de.read_long(_SCHEMA_LIST_WORKSPACE_OUTPUT.members["total_pages"])

                case 1:
                    kwargs["total_items"] = de.read_long(_SCHEMA_LIST_WORKSPACE_OUTPUT.members["total_items"])

                case 2:
                    kwargs["data"] = _deserialize_workspace_list(de, _SCHEMA_LIST_WORKSPACE_OUTPUT.members["data"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_LIST_WORKSPACE_OUTPUT, consumer=_consumer)
        return kwargs

LIST_WORKSPACE = APIOperation(
        input = ListWorkspaceInput,
        output = ListWorkspaceOutput,
        schema = _SCHEMA_LIST_WORKSPACE,
        input_schema = _SCHEMA_LIST_WORKSPACE_INPUT,
        output_schema = _SCHEMA_LIST_WORKSPACE_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateOrganisationInput:

    country_code: str | None = None
    contact_email: str | None = None
    contact_phone: str | None = None
    admin_email: str | None = None
    sector: str | None = None
    id: str | None = None
    status: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_ORGANISATION_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.country_code is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["country_code"], self.country_code)

        if self.contact_email is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["contact_email"], self.contact_email)

        if self.contact_phone is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["contact_phone"], self.contact_phone)

        if self.admin_email is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["admin_email"], self.admin_email)

        if self.sector is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["sector"], self.sector)

        if self.status is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["status"], self.status)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["country_code"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["country_code"])

                case 1:
                    kwargs["contact_email"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["contact_email"])

                case 2:
                    kwargs["contact_phone"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["contact_phone"])

                case 3:
                    kwargs["admin_email"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["admin_email"])

                case 4:
                    kwargs["sector"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["sector"])

                case 5:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["id"])

                case 6:
                    kwargs["status"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_INPUT.members["status"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_ORGANISATION_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateOrganisationOutput:

    id: str

    name: str

    created_by: str

    admin_email: str

    status: str

    created_at: datetime

    updated_at: datetime

    updated_by: str

    country_code: str | None = None
    contact_email: str | None = None
    contact_phone: str | None = None
    sector: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_ORGANISATION_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["id"], self.id)
        serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["name"], self.name)
        if self.country_code is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["country_code"], self.country_code)

        if self.contact_email is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["contact_email"], self.contact_email)

        if self.contact_phone is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["contact_phone"], self.contact_phone)

        serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["admin_email"], self.admin_email)
        serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["status"], self.status)
        if self.sector is not None:
            serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["sector"], self.sector)

        serializer.write_timestamp(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["updated_at"], self.updated_at)
        serializer.write_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["updated_by"], self.updated_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["id"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["id"])

                case 1:
                    kwargs["name"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["name"])

                case 2:
                    kwargs["country_code"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["country_code"])

                case 3:
                    kwargs["contact_email"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["contact_email"])

                case 4:
                    kwargs["contact_phone"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["contact_phone"])

                case 5:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["created_by"])

                case 6:
                    kwargs["admin_email"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["admin_email"])

                case 7:
                    kwargs["status"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["status"])

                case 8:
                    kwargs["sector"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["sector"])

                case 9:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["created_at"])

                case 10:
                    kwargs["updated_at"] = de.read_timestamp(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["updated_at"])

                case 11:
                    kwargs["updated_by"] = de.read_string(_SCHEMA_UPDATE_ORGANISATION_OUTPUT.members["updated_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_ORGANISATION_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_ORGANISATION = APIOperation(
        input = UpdateOrganisationInput,
        output = UpdateOrganisationOutput,
        schema = _SCHEMA_UPDATE_ORGANISATION,
        input_schema = _SCHEMA_UPDATE_ORGANISATION_INPUT,
        output_schema = _SCHEMA_UPDATE_ORGANISATION_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#OrganisationNotFound"): OrganisationNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateTypeTemplatesInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    type_name: str | None = None
    type_schema: Document | None = None
    description: str | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.type_schema is not None:
            serializer.write_document(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["type_schema"], self.type_schema)

        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["description"], self.description)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["org_id"])

                case 2:
                    kwargs["type_name"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["type_name"])

                case 3:
                    kwargs["type_schema"] = de.read_document(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["type_schema"])

                case 4:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["description"])

                case 5:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateTypeTemplatesOutput:

    type_name: str

    type_schema: Document

    description: str

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_at: datetime

    last_modified_by: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["type_name"], self.type_name)
        serializer.write_document(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["type_schema"], self.type_schema)
        serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["description"], self.description)
        serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["created_at"], self.created_at)
        serializer.write_timestamp(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_by"], self.last_modified_by)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["type_name"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["type_name"])

                case 1:
                    kwargs["type_schema"] = de.read_document(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["type_schema"])

                case 2:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["description"])

                case 3:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["change_reason"])

                case 4:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["created_by"])

                case 5:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["created_at"])

                case 6:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_at"])

                case 7:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT.members["last_modified_by"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT, consumer=_consumer)
        return kwargs

UPDATE_TYPE_TEMPLATES = APIOperation(
        input = UpdateTypeTemplatesInput,
        output = UpdateTypeTemplatesOutput,
        schema = _SCHEMA_UPDATE_TYPE_TEMPLATES,
        input_schema = _SCHEMA_UPDATE_TYPE_TEMPLATES_INPUT,
        output_schema = _SCHEMA_UPDATE_TYPE_TEMPLATES_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#TypeTemplatesNotFound"): TypeTemplatesNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateWebhookInput:

    workspace_id: str | None = None
    org_id: str = "juspay"
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    url: str | None = None
    method: str | None = None
    version: str | None = None
    custom_headers: dict[str, Document] | None = None
    events: list[str] | None = None
    change_reason: str | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_WEBHOOK_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.description is not None:
            serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["description"], self.description)

        if self.enabled is not None:
            serializer.write_boolean(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["enabled"], self.enabled)

        if self.url is not None:
            serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["url"], self.url)

        if self.method is not None:
            serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["method"], self.method)

        if self.version is not None:
            serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["version"], self.version)

        if self.custom_headers is not None:
            _serialize_object(serializer, _SCHEMA_UPDATE_WEBHOOK_INPUT.members["custom_headers"], self.custom_headers)

        if self.events is not None:
            _serialize_events(serializer, _SCHEMA_UPDATE_WEBHOOK_INPUT.members["events"], self.events)

        if self.change_reason is not None:
            serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["change_reason"], self.change_reason)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_id"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["workspace_id"])

                case 1:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["org_id"])

                case 2:
                    kwargs["name"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["name"])

                case 3:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["description"])

                case 4:
                    kwargs["enabled"] = de.read_boolean(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["enabled"])

                case 5:
                    kwargs["url"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["url"])

                case 6:
                    kwargs["method"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["method"])

                case 7:
                    kwargs["version"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["version"])

                case 8:
                    kwargs["custom_headers"] = _deserialize_object(de, _SCHEMA_UPDATE_WEBHOOK_INPUT.members["custom_headers"])

                case 9:
                    kwargs["events"] = _deserialize_events(de, _SCHEMA_UPDATE_WEBHOOK_INPUT.members["events"])

                case 10:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_INPUT.members["change_reason"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_WEBHOOK_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateWebhookOutput:

    name: str

    description: str

    enabled: bool

    url: str

    method: str

    version: str

    events: list[str]

    max_retries: int

    change_reason: str

    created_by: str

    created_at: datetime

    last_modified_by: str

    last_modified_at: datetime

    custom_headers: dict[str, Document] | None = None
    last_triggered_at: datetime | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_WEBHOOK_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["name"], self.name)
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["description"], self.description)
        serializer.write_boolean(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["enabled"], self.enabled)
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["url"], self.url)
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["method"], self.method)
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["version"], self.version)
        if self.custom_headers is not None:
            _serialize_object(serializer, _SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["custom_headers"], self.custom_headers)

        _serialize_events(serializer, _SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["events"], self.events)
        serializer.write_integer(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["max_retries"], self.max_retries)
        if self.last_triggered_at is not None:
            serializer.write_timestamp(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["last_triggered_at"], self.last_triggered_at)

        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["change_reason"], self.change_reason)
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["created_by"], self.created_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["created_at"], self.created_at)
        serializer.write_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["last_modified_at"], self.last_modified_at)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["name"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["name"])

                case 1:
                    kwargs["description"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["description"])

                case 2:
                    kwargs["enabled"] = de.read_boolean(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["enabled"])

                case 3:
                    kwargs["url"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["url"])

                case 4:
                    kwargs["method"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["method"])

                case 5:
                    kwargs["version"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["version"])

                case 6:
                    kwargs["custom_headers"] = _deserialize_object(de, _SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["custom_headers"])

                case 7:
                    kwargs["events"] = _deserialize_events(de, _SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["events"])

                case 8:
                    kwargs["max_retries"] = de.read_integer(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["max_retries"])

                case 9:
                    kwargs["last_triggered_at"] = de.read_timestamp(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["last_triggered_at"])

                case 10:
                    kwargs["change_reason"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["change_reason"])

                case 11:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["created_by"])

                case 12:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["created_at"])

                case 13:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["last_modified_by"])

                case 14:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_WEBHOOK_OUTPUT.members["last_modified_at"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_WEBHOOK_OUTPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class WebhookNotFound(ApiError):

    code: ClassVar[str] = "WebhookNotFound"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WEBHOOK_NOT_FOUND, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WEBHOOK_NOT_FOUND, consumer=_consumer)
        return kwargs

UPDATE_WEBHOOK = APIOperation(
        input = UpdateWebhookInput,
        output = UpdateWebhookOutput,
        schema = _SCHEMA_UPDATE_WEBHOOK,
        input_schema = _SCHEMA_UPDATE_WEBHOOK_INPUT,
        output_schema = _SCHEMA_UPDATE_WEBHOOK_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#WebhookNotFound"): WebhookNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)

@dataclass(kw_only=True)
class UpdateWorkspaceInput:

    org_id: str = "juspay"
    workspace_name: str | None = None
    workspace_admin_email: str | None = None
    config_version: str | None = None
    mandatory_dimensions: list[str] | None = None
    workspace_status: str | None = None
    metrics: Document | None = None
    allow_experiment_self_approval: bool | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_WORKSPACE_INPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        if self.workspace_admin_email is not None:
            serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["workspace_admin_email"], self.workspace_admin_email)

        if self.config_version is not None:
            serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["config_version"], self.config_version)

        if self.mandatory_dimensions is not None:
            _serialize_list_mandatory_dimensions(serializer, _SCHEMA_UPDATE_WORKSPACE_INPUT.members["mandatory_dimensions"], self.mandatory_dimensions)

        if self.workspace_status is not None:
            serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["workspace_status"], self.workspace_status)

        if self.metrics is not None:
            serializer.write_document(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["metrics"], self.metrics)

        if self.allow_experiment_self_approval is not None:
            serializer.write_boolean(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["allow_experiment_self_approval"], self.allow_experiment_self_approval)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["org_id"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["org_id"])

                case 1:
                    kwargs["workspace_name"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["workspace_name"])

                case 2:
                    kwargs["workspace_admin_email"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["workspace_admin_email"])

                case 3:
                    kwargs["config_version"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["config_version"])

                case 4:
                    kwargs["mandatory_dimensions"] = _deserialize_list_mandatory_dimensions(de, _SCHEMA_UPDATE_WORKSPACE_INPUT.members["mandatory_dimensions"])

                case 5:
                    kwargs["workspace_status"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["workspace_status"])

                case 6:
                    kwargs["metrics"] = de.read_document(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["metrics"])

                case 7:
                    kwargs["allow_experiment_self_approval"] = de.read_boolean(_SCHEMA_UPDATE_WORKSPACE_INPUT.members["allow_experiment_self_approval"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_WORKSPACE_INPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class UpdateWorkspaceOutput:

    workspace_name: str

    organisation_id: str

    organisation_name: str

    workspace_schema_name: str

    workspace_status: str

    workspace_admin_email: str

    created_by: str

    last_modified_by: str

    last_modified_at: datetime

    created_at: datetime

    strict_mode: bool

    allow_experiment_self_approval: bool

    config_version: str | None = None
    mandatory_dimensions: list[str] | None = None
    metrics: Document | None = None

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_UPDATE_WORKSPACE_OUTPUT, self)

    def serialize_members(self, serializer: ShapeSerializer):
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_name"], self.workspace_name)
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["organisation_id"], self.organisation_id)
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["organisation_name"], self.organisation_name)
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_schema_name"], self.workspace_schema_name)
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_status"], self.workspace_status)
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_admin_email"], self.workspace_admin_email)
        if self.config_version is not None:
            serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["config_version"], self.config_version)

        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["created_by"], self.created_by)
        serializer.write_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["last_modified_by"], self.last_modified_by)
        serializer.write_timestamp(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["last_modified_at"], self.last_modified_at)
        serializer.write_timestamp(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["created_at"], self.created_at)
        if self.mandatory_dimensions is not None:
            _serialize_list_mandatory_dimensions(serializer, _SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["mandatory_dimensions"], self.mandatory_dimensions)

        serializer.write_boolean(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["strict_mode"], self.strict_mode)
        if self.metrics is not None:
            serializer.write_document(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["metrics"], self.metrics)

        serializer.write_boolean(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["allow_experiment_self_approval"], self.allow_experiment_self_approval)

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():
                case 0:
                    kwargs["workspace_name"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_name"])

                case 1:
                    kwargs["organisation_id"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["organisation_id"])

                case 2:
                    kwargs["organisation_name"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["organisation_name"])

                case 3:
                    kwargs["workspace_schema_name"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_schema_name"])

                case 4:
                    kwargs["workspace_status"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_status"])

                case 5:
                    kwargs["workspace_admin_email"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["workspace_admin_email"])

                case 6:
                    kwargs["config_version"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["config_version"])

                case 7:
                    kwargs["created_by"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["created_by"])

                case 8:
                    kwargs["last_modified_by"] = de.read_string(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["last_modified_by"])

                case 9:
                    kwargs["last_modified_at"] = de.read_timestamp(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["last_modified_at"])

                case 10:
                    kwargs["created_at"] = de.read_timestamp(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["created_at"])

                case 11:
                    kwargs["mandatory_dimensions"] = _deserialize_list_mandatory_dimensions(de, _SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["mandatory_dimensions"])

                case 12:
                    kwargs["strict_mode"] = de.read_boolean(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["strict_mode"])

                case 13:
                    kwargs["metrics"] = de.read_document(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["metrics"])

                case 14:
                    kwargs["allow_experiment_self_approval"] = de.read_boolean(_SCHEMA_UPDATE_WORKSPACE_OUTPUT.members["allow_experiment_self_approval"])

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_UPDATE_WORKSPACE_OUTPUT, consumer=_consumer)
        return kwargs

@dataclass(kw_only=True)
class WorkspaceNotFound(ApiError):

    code: ClassVar[str] = "WorkspaceNotFound"
    fault: ClassVar[Literal["client", "server"]] = "client"

    message: str

    def serialize(self, serializer: ShapeSerializer):
        serializer.write_struct(_SCHEMA_WORKSPACE_NOT_FOUND, self)

    def serialize_members(self, serializer: ShapeSerializer):
        pass

    @classmethod
    def deserialize(cls, deserializer: ShapeDeserializer) -> Self:
        return cls(**cls.deserialize_kwargs(deserializer))

    @classmethod
    def deserialize_kwargs(cls, deserializer: ShapeDeserializer) -> dict[str, Any]:
        kwargs: dict[str, Any] = {}

        def _consumer(schema: Schema, de: ShapeDeserializer) -> None:
            match schema.expect_member_index():

                case _:
                    logger.debug("Unexpected member schema: %s", schema)

        deserializer.read_struct(_SCHEMA_WORKSPACE_NOT_FOUND, consumer=_consumer)
        return kwargs

UPDATE_WORKSPACE = APIOperation(
        input = UpdateWorkspaceInput,
        output = UpdateWorkspaceOutput,
        schema = _SCHEMA_UPDATE_WORKSPACE,
        input_schema = _SCHEMA_UPDATE_WORKSPACE_INPUT,
        output_schema = _SCHEMA_UPDATE_WORKSPACE_OUTPUT,
        error_registry = TypeRegistry({
            ShapeID("io.superposition#WorkspaceNotFound"): WorkspaceNotFound,
ShapeID("io.superposition#InternalServerError"): InternalServerError,
        }),
        effective_auth_schemes = [
            ShapeID("smithy.api#httpBearerAuth")
        ]
)
