// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_dimension_type<'a, I>(tokens: &mut ::std::iter::Peekable<I>) -> ::std::result::Result<Option<crate::types::DimensionType>, ::aws_smithy_json::deserialize::error::DeserializeError>
                        where I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>> {
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
                                    Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                                            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) = tokens.peek() {
                                                                let _ = tokens.next().expect("peek returned a token")?;
                                                                continue;
                                                            }
                        let key = key.to_unescaped()?;
                                                            if key == "__type" {
                                                                ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                continue
                                                            }
                                                            if variant.is_some() {
                                                                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom("encountered mixed variants in union"));
                                                            }
                        variant = match key.as_ref() {
                            "REGULAR" => {
                                ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                                    Some(crate::types::DimensionType::Regular)
                            }
                            "LOCAL_COHORT" => {
                                Some(crate::types::DimensionType::LocalCohort(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?.map(|s|
                                        s.to_unescaped().map(|u|
                                            u.into_owned()
                                        )
                                    ).transpose()?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'LOCAL_COHORT' cannot be null"))?
                                ))
                            }
                            "REMOTE_COHORT" => {
                                Some(crate::types::DimensionType::RemoteCohort(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?.map(|s|
                                        s.to_unescaped().map(|u|
                                            u.into_owned()
                                        )
                                    ).transpose()?
                                    .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'REMOTE_COHORT' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                              ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                              Some(crate::types::DimensionType::Unknown)
                                                                            }
                        };
                    }
                    other => return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!("expected object key or end object, found: {:?}", other)))
                }
            }
        }
        _ => return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom("expected start object or null"))
    }
    if variant.is_none() {
                                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom("Union did not contain a valid variant."))
                            }
    Ok(variant)
}

pub fn ser_dimension_type(object_6: &mut ::aws_smithy_json::serialize::JsonObjectWriter, input: &crate::types::DimensionType) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::DimensionType::Regular => {
             {
                #[allow(unused_mut)]
                let mut object_1 = object_6.key("REGULAR").start_object();
                object_1.finish();
            }
        },
        crate::types::DimensionType::LocalCohort(inner) => {
             {
                object_6.key("LOCAL_COHORT").string(inner.as_str());
            }
        },
        crate::types::DimensionType::RemoteCohort(inner) => {
             {
                object_6.key("REMOTE_COHORT").string(inner.as_str());
            }
        },
        crate::types::DimensionType::Unknown => return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant("DimensionType"))
    }
    Ok(())
}

