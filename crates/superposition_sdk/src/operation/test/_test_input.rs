// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub workspace_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub org_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub function_name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub stage: ::std::option::Option<crate::types::Stage>,
    #[allow(missing_docs)] // documentation missing in model
    pub request: ::std::option::Option<crate::types::FunctionExecutionRequest>,
}
impl  TestInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(&self) -> ::std::option::Option<&str> {
        self.org_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn function_name(&self) -> ::std::option::Option<&str> {
        self.function_name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn stage(&self) -> ::std::option::Option<&crate::types::Stage> {
        self.stage.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn request(&self) -> ::std::option::Option<&crate::types::FunctionExecutionRequest> {
        self.request.as_ref()
    }
}
impl TestInput {
    /// Creates a new builder-style object to manufacture [`TestInput`](crate::operation::test::TestInput).
    pub fn builder() -> crate::operation::test::builders::TestInputBuilder {
        crate::operation::test::builders::TestInputBuilder::default()
    }
}

/// A builder for [`TestInput`](crate::operation::test::TestInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) org_id: ::std::option::Option<::std::string::String>,
    pub(crate) function_name: ::std::option::Option<::std::string::String>,
    pub(crate) stage: ::std::option::Option<crate::types::Stage>,
    pub(crate) request: ::std::option::Option<crate::types::FunctionExecutionRequest>,
}
impl TestInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.org_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn function_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_function_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_function_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_name
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn stage(mut self, input: crate::types::Stage) -> Self {
        self.stage = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_stage(mut self, input: ::std::option::Option<crate::types::Stage>) -> Self {
        self.stage = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_stage(&self) -> &::std::option::Option<crate::types::Stage> {
        &self.stage
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn request(mut self, input: crate::types::FunctionExecutionRequest) -> Self {
        self.request = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_request(mut self, input: ::std::option::Option<crate::types::FunctionExecutionRequest>) -> Self {
        self.request = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_request(&self) -> &::std::option::Option<crate::types::FunctionExecutionRequest> {
        &self.request
    }
    /// Consumes the builder and constructs a [`TestInput`](crate::operation::test::TestInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::test::TestInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::test::TestInput {
                workspace_id: self.workspace_id
                ,
                org_id: self.org_id
                ,
                function_name: self.function_name
                ,
                stage: self.stage
                ,
                request: self.request
                ,
            }
        )
    }
}

