// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Input structure for adding members to an experiment group.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddMembersToGroupInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub workspace_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub org_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub id: ::std::option::Option<::std::string::String>,
    /// Reason for adding these members.
    pub change_reason: ::std::option::Option<::std::string::String>,
    /// List of experiment IDs to add to this group.
    pub member_experiment_ids: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl  AddMembersToGroupInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(&self) -> ::std::option::Option<&str> {
        self.org_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Reason for adding these members.
    pub fn change_reason(&self) -> ::std::option::Option<&str> {
        self.change_reason.as_deref()
    }
    /// List of experiment IDs to add to this group.
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.member_experiment_ids.is_none()`.
    pub fn member_experiment_ids(&self) -> &[::std::string::String] {
        self.member_experiment_ids.as_deref()
        .unwrap_or_default()
    }
}
impl AddMembersToGroupInput {
    /// Creates a new builder-style object to manufacture [`AddMembersToGroupInput`](crate::operation::add_members_to_group::AddMembersToGroupInput).
    pub fn builder() -> crate::operation::add_members_to_group::builders::AddMembersToGroupInputBuilder {
        crate::operation::add_members_to_group::builders::AddMembersToGroupInputBuilder::default()
    }
}

/// A builder for [`AddMembersToGroupInput`](crate::operation::add_members_to_group::AddMembersToGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddMembersToGroupInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) org_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) change_reason: ::std::option::Option<::std::string::String>,
    pub(crate) member_experiment_ids: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl AddMembersToGroupInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.org_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Reason for adding these members.
    /// This field is required.
    pub fn change_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// Reason for adding these members.
    pub fn set_change_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_reason = input; self
    }
    /// Reason for adding these members.
    pub fn get_change_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_reason
    }
    /// Appends an item to `member_experiment_ids`.
    ///
    /// To override the contents of this collection use [`set_member_experiment_ids`](Self::set_member_experiment_ids).
    ///
    /// List of experiment IDs to add to this group.
    pub fn member_experiment_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.member_experiment_ids.unwrap_or_default();
                        v.push(input.into());
                        self.member_experiment_ids = ::std::option::Option::Some(v);
                        self
    }
    /// List of experiment IDs to add to this group.
    pub fn set_member_experiment_ids(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.member_experiment_ids = input; self
    }
    /// List of experiment IDs to add to this group.
    pub fn get_member_experiment_ids(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.member_experiment_ids
    }
    /// Consumes the builder and constructs a [`AddMembersToGroupInput`](crate::operation::add_members_to_group::AddMembersToGroupInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::add_members_to_group::AddMembersToGroupInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::add_members_to_group::AddMembersToGroupInput {
                workspace_id: self.workspace_id
                ,
                org_id: self.org_id
                ,
                id: self.id
                ,
                change_reason: self.change_reason
                ,
                member_experiment_ids: self.member_experiment_ids
                ,
            }
        )
    }
}

