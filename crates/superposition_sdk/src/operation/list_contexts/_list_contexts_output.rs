// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListContextsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub total_pages: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub total_items: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub data: ::std::option::Option<::std::vec::Vec::<crate::types::ContextFull>>,
}
impl  ListContextsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn total_pages(&self) -> ::std::option::Option<i32> {
        self.total_pages
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn total_items(&self) -> ::std::option::Option<i32> {
        self.total_items
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data.is_none()`.
    pub fn data(&self) -> &[crate::types::ContextFull] {
        self.data.as_deref()
        .unwrap_or_default()
    }
}
impl ListContextsOutput {
    /// Creates a new builder-style object to manufacture [`ListContextsOutput`](crate::operation::list_contexts::ListContextsOutput).
    pub fn builder() -> crate::operation::list_contexts::builders::ListContextsOutputBuilder {
        crate::operation::list_contexts::builders::ListContextsOutputBuilder::default()
    }
}

/// A builder for [`ListContextsOutput`](crate::operation::list_contexts::ListContextsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListContextsOutputBuilder {
    pub(crate) total_pages: ::std::option::Option<i32>,
    pub(crate) total_items: ::std::option::Option<i32>,
    pub(crate) data: ::std::option::Option<::std::vec::Vec::<crate::types::ContextFull>>,
}
impl ListContextsOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn total_pages(mut self, input: i32) -> Self {
        self.total_pages = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_total_pages(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_pages = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_total_pages(&self) -> &::std::option::Option<i32> {
        &self.total_pages
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn total_items(mut self, input: i32) -> Self {
        self.total_items = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_total_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_items = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_total_items(&self) -> &::std::option::Option<i32> {
        &self.total_items
    }
    /// Appends an item to `data`.
    ///
    /// To override the contents of this collection use [`set_data`](Self::set_data).
    ///
    pub fn data(mut self, input: crate::types::ContextFull) -> Self {
        let mut v = self.data.unwrap_or_default();
                        v.push(input);
                        self.data = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_data(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::ContextFull>>) -> Self {
        self.data = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_data(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::ContextFull>> {
        &self.data
    }
    /// Consumes the builder and constructs a [`ListContextsOutput`](crate::operation::list_contexts::ListContextsOutput).
    pub fn build(self) -> crate::operation::list_contexts::ListContextsOutput {
        crate::operation::list_contexts::ListContextsOutput {
            total_pages: self.total_pages
            ,
            total_items: self.total_items
            ,
            data: self.data
            ,
        }
    }
}

