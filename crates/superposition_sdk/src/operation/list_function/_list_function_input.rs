// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFunctionInput  {
    /// Number of items to be returned in each page.
    pub count: ::std::option::Option<i32>,
    /// Page number to retrieve, starting from 1.
    pub page: ::std::option::Option<i32>,
    /// If true, returns all requested items, ignoring pagination parameters page and count.
    pub all: ::std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    pub workspace_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub org_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub function_type: ::std::option::Option<::std::vec::Vec::<crate::types::FunctionTypes>>,
}
impl  ListFunctionInput  {
    /// Number of items to be returned in each page.
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    /// Page number to retrieve, starting from 1.
    pub fn page(&self) -> ::std::option::Option<i32> {
        self.page
    }
    /// If true, returns all requested items, ignoring pagination parameters page and count.
    pub fn all(&self) -> ::std::option::Option<bool> {
        self.all
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(&self) -> ::std::option::Option<&str> {
        self.org_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.function_type.is_none()`.
    pub fn function_type(&self) -> &[crate::types::FunctionTypes] {
        self.function_type.as_deref()
        .unwrap_or_default()
    }
}
impl ListFunctionInput {
    /// Creates a new builder-style object to manufacture [`ListFunctionInput`](crate::operation::list_function::ListFunctionInput).
    pub fn builder() -> crate::operation::list_function::builders::ListFunctionInputBuilder {
        crate::operation::list_function::builders::ListFunctionInputBuilder::default()
    }
}

/// A builder for [`ListFunctionInput`](crate::operation::list_function::ListFunctionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListFunctionInputBuilder {
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) page: ::std::option::Option<i32>,
    pub(crate) all: ::std::option::Option<bool>,
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) org_id: ::std::option::Option<::std::string::String>,
    pub(crate) function_type: ::std::option::Option<::std::vec::Vec::<crate::types::FunctionTypes>>,
}
impl ListFunctionInputBuilder {
    /// Number of items to be returned in each page.
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// Number of items to be returned in each page.
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input; self
    }
    /// Number of items to be returned in each page.
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// Page number to retrieve, starting from 1.
    pub fn page(mut self, input: i32) -> Self {
        self.page = ::std::option::Option::Some(input);
        self
    }
    /// Page number to retrieve, starting from 1.
    pub fn set_page(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page = input; self
    }
    /// Page number to retrieve, starting from 1.
    pub fn get_page(&self) -> &::std::option::Option<i32> {
        &self.page
    }
    /// If true, returns all requested items, ignoring pagination parameters page and count.
    pub fn all(mut self, input: bool) -> Self {
        self.all = ::std::option::Option::Some(input);
        self
    }
    /// If true, returns all requested items, ignoring pagination parameters page and count.
    pub fn set_all(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all = input; self
    }
    /// If true, returns all requested items, ignoring pagination parameters page and count.
    pub fn get_all(&self) -> &::std::option::Option<bool> {
        &self.all
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.org_id
    }
    /// Appends an item to `function_type`.
    ///
    /// To override the contents of this collection use [`set_function_type`](Self::set_function_type).
    ///
    pub fn function_type(mut self, input: crate::types::FunctionTypes) -> Self {
        let mut v = self.function_type.unwrap_or_default();
                        v.push(input);
                        self.function_type = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_function_type(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::types::FunctionTypes>>) -> Self {
        self.function_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_function_type(&self) -> &::std::option::Option<::std::vec::Vec::<crate::types::FunctionTypes>> {
        &self.function_type
    }
    /// Consumes the builder and constructs a [`ListFunctionInput`](crate::operation::list_function::ListFunctionInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_function::ListFunctionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::list_function::ListFunctionInput {
                count: self.count
                ,
                page: self.page
                ,
                all: self.all
                ,
                workspace_id: self.workspace_id
                ,
                org_id: self.org_id
                ,
                function_type: self.function_type
                ,
            }
        )
    }
}

