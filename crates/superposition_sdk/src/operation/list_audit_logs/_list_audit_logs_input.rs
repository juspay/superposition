// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAuditLogsInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub workspace_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub org_id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub count: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub page: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub all: ::std::option::Option<bool>,
    #[allow(missing_docs)] // documentation missing in model
    pub from_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    #[allow(missing_docs)] // documentation missing in model
    pub to_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// Comma serparated list of tables.
    pub tables: ::std::option::Option<::std::string::String>,
    /// Comma serparated list of actions.
    pub action: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub username: ::std::option::Option<::std::string::String>,
}
impl  ListAuditLogsInput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn org_id(&self) -> ::std::option::Option<&str> {
        self.org_id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn page(&self) -> ::std::option::Option<i32> {
        self.page
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn all(&self) -> ::std::option::Option<bool> {
        self.all
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn from_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.from_date.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn to_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.to_date.as_ref()
    }
    /// Comma serparated list of tables.
    pub fn tables(&self) -> ::std::option::Option<&str> {
        self.tables.as_deref()
    }
    /// Comma serparated list of actions.
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl ListAuditLogsInput {
    /// Creates a new builder-style object to manufacture [`ListAuditLogsInput`](crate::operation::list_audit_logs::ListAuditLogsInput).
    pub fn builder() -> crate::operation::list_audit_logs::builders::ListAuditLogsInputBuilder {
        crate::operation::list_audit_logs::builders::ListAuditLogsInputBuilder::default()
    }
}

/// A builder for [`ListAuditLogsInput`](crate::operation::list_audit_logs::ListAuditLogsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAuditLogsInputBuilder {
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    pub(crate) org_id: ::std::option::Option<::std::string::String>,
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) page: ::std::option::Option<i32>,
    pub(crate) all: ::std::option::Option<bool>,
    pub(crate) from_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) to_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tables: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
}
impl ListAuditLogsInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn org_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org_id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_org_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org_id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_org_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.org_id
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn page(mut self, input: i32) -> Self {
        self.page = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_page(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_page(&self) -> &::std::option::Option<i32> {
        &self.page
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn all(mut self, input: bool) -> Self {
        self.all = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_all(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_all(&self) -> &::std::option::Option<bool> {
        &self.all
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn from_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.from_date = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_from_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.from_date = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_from_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.from_date
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn to_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.to_date = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_to_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.to_date = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_to_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.to_date
    }
    /// Comma serparated list of tables.
    pub fn tables(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tables = ::std::option::Option::Some(input.into());
        self
    }
    /// Comma serparated list of tables.
    pub fn set_tables(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tables = input; self
    }
    /// Comma serparated list of tables.
    pub fn get_tables(&self) -> &::std::option::Option<::std::string::String> {
        &self.tables
    }
    /// Comma serparated list of actions.
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// Comma serparated list of actions.
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input; self
    }
    /// Comma serparated list of actions.
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Consumes the builder and constructs a [`ListAuditLogsInput`](crate::operation::list_audit_logs::ListAuditLogsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_audit_logs::ListAuditLogsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(
            crate::operation::list_audit_logs::ListAuditLogsInput {
                workspace_id: self.workspace_id
                ,
                org_id: self.org_id
                ,
                count: self.count
                ,
                page: self.page
                ,
                all: self.all
                ,
                from_date: self.from_date
                ,
                to_date: self.to_date
                ,
                tables: self.tables
                ,
                action: self.action
                ,
                username: self.username
                ,
            }
        )
    }
}

