// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionInfo  {
    /// Generic key-value object structure used for flexible data representation throughout the API.
    pub schema: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>,
    #[allow(missing_docs)] // documentation missing in model
    pub position: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub dimension_type: ::std::option::Option<crate::types::DimensionType>,
    #[allow(missing_docs)] // documentation missing in model
    pub dependency_graph: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::vec::Vec::<::std::string::String>>>,
}
impl  DimensionInfo  {
    /// Generic key-value object structure used for flexible data representation throughout the API.
    pub fn schema(&self) -> ::std::option::Option<&::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
        self.schema.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn position(&self) -> ::std::option::Option<i32> {
        self.position
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn dimension_type(&self) -> ::std::option::Option<&crate::types::DimensionType> {
        self.dimension_type.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn dependency_graph(&self) -> ::std::option::Option<&::std::collections::HashMap::<::std::string::String, ::std::vec::Vec::<::std::string::String>>> {
        self.dependency_graph.as_ref()
    }
}
impl DimensionInfo {
    /// Creates a new builder-style object to manufacture [`DimensionInfo`](crate::types::DimensionInfo).
    pub fn builder() -> crate::types::builders::DimensionInfoBuilder {
        crate::types::builders::DimensionInfoBuilder::default()
    }
}

/// A builder for [`DimensionInfo`](crate::types::DimensionInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DimensionInfoBuilder {
    pub(crate) schema: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>,
    pub(crate) position: ::std::option::Option<i32>,
    pub(crate) dimension_type: ::std::option::Option<crate::types::DimensionType>,
    pub(crate) dependency_graph: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::vec::Vec::<::std::string::String>>>,
}
impl DimensionInfoBuilder {
    /// Adds a key-value pair to `schema`.
    ///
    /// To override the contents of this collection use [`set_schema`](Self::set_schema).
    ///
    /// Generic key-value object structure used for flexible data representation throughout the API.
    pub fn schema(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        let mut hash_map = self.schema.unwrap_or_default();
                        hash_map.insert(k.into(), v);
                        self.schema = ::std::option::Option::Some(hash_map);
                        self
    }
    /// Generic key-value object structure used for flexible data representation throughout the API.
    pub fn set_schema(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>) -> Self {
        self.schema = input; self
    }
    /// Generic key-value object structure used for flexible data representation throughout the API.
    pub fn get_schema(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
        &self.schema
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn position(mut self, input: i32) -> Self {
        self.position = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_position(mut self, input: ::std::option::Option<i32>) -> Self {
        self.position = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_position(&self) -> &::std::option::Option<i32> {
        &self.position
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn dimension_type(mut self, input: crate::types::DimensionType) -> Self {
        self.dimension_type = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_dimension_type(mut self, input: ::std::option::Option<crate::types::DimensionType>) -> Self {
        self.dimension_type = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_dimension_type(&self) -> &::std::option::Option<crate::types::DimensionType> {
        &self.dimension_type
    }
    /// Adds a key-value pair to `dependency_graph`.
    ///
    /// To override the contents of this collection use [`set_dependency_graph`](Self::set_dependency_graph).
    ///
    pub fn dependency_graph(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec::<::std::string::String>) -> Self {
        let mut hash_map = self.dependency_graph.unwrap_or_default();
                        hash_map.insert(k.into(), v);
                        self.dependency_graph = ::std::option::Option::Some(hash_map);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_dependency_graph(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::vec::Vec::<::std::string::String>>>) -> Self {
        self.dependency_graph = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_dependency_graph(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::std::vec::Vec::<::std::string::String>>> {
        &self.dependency_graph
    }
    /// Consumes the builder and constructs a [`DimensionInfo`](crate::types::DimensionInfo).
    pub fn build(self) -> crate::types::DimensionInfo {
        crate::types::DimensionInfo {
            schema: self.schema
            ,
            position: self.position
            ,
            dimension_type: self.dimension_type
            ,
            dependency_graph: self.dependency_graph
            ,
        }
    }
}

