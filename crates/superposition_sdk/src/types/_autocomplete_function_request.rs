// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutocompleteFunctionRequest  {
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub prefix: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub environment: ::std::option::Option<::aws_smithy_types::Document>,
}
impl  AutocompleteFunctionRequest  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn environment(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.environment.as_ref()
    }
}
impl AutocompleteFunctionRequest {
    /// Creates a new builder-style object to manufacture [`AutocompleteFunctionRequest`](crate::types::AutocompleteFunctionRequest).
    pub fn builder() -> crate::types::builders::AutocompleteFunctionRequestBuilder {
        crate::types::builders::AutocompleteFunctionRequestBuilder::default()
    }
}

/// A builder for [`AutocompleteFunctionRequest`](crate::types::AutocompleteFunctionRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutocompleteFunctionRequestBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) environment: ::std::option::Option<::aws_smithy_types::Document>,
}
impl AutocompleteFunctionRequestBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn environment(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.environment = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_environment(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.environment = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_environment(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.environment
    }
    /// Consumes the builder and constructs a [`AutocompleteFunctionRequest`](crate::types::AutocompleteFunctionRequest).
    pub fn build(self) -> crate::types::AutocompleteFunctionRequest {
        crate::types::AutocompleteFunctionRequest {
            name: self.name
            ,
            prefix: self.prefix
            ,
            environment: self.environment
            ,
        }
    }
}

