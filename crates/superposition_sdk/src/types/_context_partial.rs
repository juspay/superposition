// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContextPartial  {
    #[allow(missing_docs)] // documentation missing in model
    pub id: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub condition: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>,
    #[allow(missing_docs)] // documentation missing in model
    pub priority: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub weight: ::std::option::Option<i32>,
    #[allow(missing_docs)] // documentation missing in model
    pub override_with_keys: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl  ContextPartial  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn condition(&self) -> ::std::option::Option<&::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
        self.condition.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn weight(&self) -> ::std::option::Option<i32> {
        self.weight
    }
    #[allow(missing_docs)] // documentation missing in model
    /// 
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.override_with_keys.is_none()`.
    pub fn override_with_keys(&self) -> &[::std::string::String] {
        self.override_with_keys.as_deref()
        .unwrap_or_default()
    }
}
impl ContextPartial {
    /// Creates a new builder-style object to manufacture [`ContextPartial`](crate::types::ContextPartial).
    pub fn builder() -> crate::types::builders::ContextPartialBuilder {
        crate::types::builders::ContextPartialBuilder::default()
    }
}

/// A builder for [`ContextPartial`](crate::types::ContextPartial).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContextPartialBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) weight: ::std::option::Option<i32>,
    pub(crate) override_with_keys: ::std::option::Option<::std::vec::Vec::<::std::string::String>>,
}
impl ContextPartialBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Adds a key-value pair to `condition`.
    ///
    /// To override the contents of this collection use [`set_condition`](Self::set_condition).
    ///
    pub fn condition(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        let mut hash_map = self.condition.unwrap_or_default();
                        hash_map.insert(k.into(), v);
                        self.condition = ::std::option::Option::Some(hash_map);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_condition(mut self, input: ::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>>) -> Self {
        self.condition = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_condition(&self) -> &::std::option::Option<::std::collections::HashMap::<::std::string::String, ::aws_smithy_types::Document>> {
        &self.condition
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn weight(mut self, input: i32) -> Self {
        self.weight = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_weight(mut self, input: ::std::option::Option<i32>) -> Self {
        self.weight = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_weight(&self) -> &::std::option::Option<i32> {
        &self.weight
    }
    /// Appends an item to `override_with_keys`.
    ///
    /// To override the contents of this collection use [`set_override_with_keys`](Self::set_override_with_keys).
    ///
    pub fn override_with_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.override_with_keys.unwrap_or_default();
                        v.push(input.into());
                        self.override_with_keys = ::std::option::Option::Some(v);
                        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_override_with_keys(mut self, input: ::std::option::Option<::std::vec::Vec::<::std::string::String>>) -> Self {
        self.override_with_keys = input; self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_override_with_keys(&self) -> &::std::option::Option<::std::vec::Vec::<::std::string::String>> {
        &self.override_with_keys
    }
    /// Consumes the builder and constructs a [`ContextPartial`](crate::types::ContextPartial).
    pub fn build(self) -> crate::types::ContextPartial {
        crate::types::ContextPartial {
            id: self.id
            ,
            condition: self.condition
            ,
            priority: self.priority
            ,
            weight: self.weight
            ,
            override_with_keys: self.override_with_keys
            ,
        }
    }
}

