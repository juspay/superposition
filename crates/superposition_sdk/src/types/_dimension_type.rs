// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum DimensionType {
    #[allow(missing_docs)] // documentation missing in model
    LocalCohort(::std::string::String),
    #[allow(missing_docs)] // documentation missing in model
    Regular,
    #[allow(missing_docs)] // documentation missing in model
    RemoteCohort(::std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DimensionType {
    /// Tries to convert the enum instance into [`LocalCohort`](crate::types::DimensionType::LocalCohort), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_local_cohort(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let DimensionType::LocalCohort(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`LocalCohort`](crate::types::DimensionType::LocalCohort).
    pub fn is_local_cohort(&self) -> bool {
        self.as_local_cohort().is_ok()
    }
    /// Tries to convert the enum instance into [`Regular`](crate::types::DimensionType::Regular), extracting the inner `()`.
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_regular(&self) -> ::std::result::Result<(), &Self> {
        if let DimensionType::Regular = &self { ::std::result::Result::Ok(()) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`Regular`](crate::types::DimensionType::Regular).
    pub fn is_regular(&self) -> bool {
        self.as_regular().is_ok()
    }
    /// Tries to convert the enum instance into [`RemoteCohort`](crate::types::DimensionType::RemoteCohort), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_remote_cohort(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let DimensionType::RemoteCohort(val) = &self { ::std::result::Result::Ok(val) } else { ::std::result::Result::Err(self) }
    }
    /// Returns true if this is a [`RemoteCohort`](crate::types::DimensionType::RemoteCohort).
    pub fn is_remote_cohort(&self) -> bool {
        self.as_remote_cohort().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

